var N=null,E="",T="t",U="u",searchIndex={};
var R=["argmin","Executor","argmin::prelude","Calculation of the Jacobian J(x) of a vector function `fs`…","Calculation of the product of the Jacobian J(x) of a…","Calculation of the product of the Hessian H(x) of a…","Hessian","Jacobian","result","error","Computes the hessian at the given parameters","argminiterdata","opwrapper","iterstate","terminationreason","Set the initial step length","Add a `T` to `self`","(Pointwise) Multiply a `T` with `self`","Subtract a `T` scaled by an `U` from `self`","operator","Compute the l2-norm (`U`) of `self`","decomposition","arraybase","ownedrepr","argmin::prelude::modcholesky","Dot/scalar product of `T` and `self`","Subtract a `T` from `self`","(Pointwise) Divide a `T` by `self`","Number of gradient evaluations so far","Return zero(s)","cost_func_count","grad_func_count","hessian_func_count","modify_func_count","argminkv","argmin::prelude::ArgminError","Add a `T` scaled by an `U` to `self`","argmin::solver::conjugategradient","Constructor","argmin::solver","argmin::solver::linesearch","set alpha limits","argmin::solver::newton","set gamma","argmin::solver::quasinewton","References:","hessian","argmin::solver::trustregion","max_iters","set radius","Rastrigin test function","Ackley test function","argmin::prelude::executor","argmin::prelude::finitediff","to_owned","clone_into","try_from","borrow_mut","try_into","type_id","argmin::prelude::slog_logger","borrow","typeid","to_string","argmin::prelude::file","string","argmin::solver::conjugategradient::cg","argmin::solver::conjugategradient::nonlinear_cg","argmin::solver::conjugategradient::beta","argmin::solver::gradientdescent::steepestdescent","argmin::solver::landweber","argmin::solver::linesearch::backtracking","argmin::solver::linesearch::condition","argmin::solver::linesearch::hagerzhang","argmin::solver::linesearch::morethuente","argmin::solver::newton::newton_cg","argmin::solver::newton::newton_method","argmin::solver::quasinewton::bfgs","argmin::solver::quasinewton::dfp","argmin::solver::quasinewton::lbfgs","argmin::solver::quasinewton::sr1","argmin::solver::quasinewton::sr1_trustregion","argmin::solver::simulatedannealing","argmin::solver::trustregion::cauchypoint","argmin::solver::trustregion::dogleg","argmin::solver::trustregion::steihaug","argmin::solver::trustregion::trustregion_method","argmin::solver::particleswarm","ordering","writetofileserializer","argmincheckpoint","minimalnooperator","argminresult","executor","writetofile","observermode","nooperator","checkpointmode","observe_iter","observe_init","default","formatter","gradient","Do nothing, really.","serialize","serializer","partial_cmp","deserialize","backtrace","perturbationvector","requires_cur_grad","cauchypoint","steihaug","fletcherreeves","polakribiere","polakribiereplus","hestenesstiefel","conjugategradient","landweber","armijocondition","wolfecondition","strongwolfecondition","goldsteincondition","satempfunc","next_iter","terminate","Perform one iteration of SA algorithm","set_search_direction","set_init_alpha","Set search direction","Set initial alpha value","set_radius","target_cost","termination_reason","argminsloglogger","Attempts to downcast this `Error` to a particular `Fail`…","best_param","best_cost","last_best_iter","get_param","get_termination_reason","get_hessian","terminated","observer","FiniteDiff","PerturbationVector","ArgminLineSearch","ArgminTrustRegion","ArgminNLCGBetaUpdate","TerminationReason","ArgminRandom","ArgminAdd","ArgminMul","ArgminEye","ArgminSlogKV","ObserverMode","ArgminScaledSub","ArgminResult","CheckpointMode","WriteToFileSerializer","ArgminNorm","GershgorinCircles","ModCholeskySE90","ModCholeskyGMW81","Decomposition","ModCholeskySE99","ArgminDot","ArgminSub","ArgminDiv","ArgminInv","ArgminZeroLike","IterState","ArgminZero","OpWrapper","ArgminWeightedDot","ArgminError","ArgminScaledAdd","ArgminMinMax","ArgminTranspose","ConjugateGradient","NonlinearConjugateGradient","FletcherReeves","PolakRibiere","PolakRibierePlus","HestenesStiefel","SteepestDescent","Landweber","BacktrackingLineSearch","LineSearchCondition","ArmijoCondition","WolfeCondition","StrongWolfeCondition","GoldsteinCondition","HagerZhangLineSearch","MoreThuenteLineSearch","SR1TrustRegion","SATempFunc","SimulatedAnnealing","CauchyPoint","TrustRegion","ParticleSwarm","ArgminIterData","ArgminSlogLogger","ArgminCheckpoint","WriteToFile","NoOperator","MinimalNoOperator"];

searchIndex[R[0]]={"doc":"A pure Rust optimization framework","i":[[0,"prelude",R[0],"Definition of all relevant traits and types # Re-export of…",N,N],[0,"macros",R[2],"Macros # Macros",N,N],[0,R[93],E,R[1],N,N],[3,R[1],R[52],E,N,N],[0,"finitediff",R[2],"Finite Differentiation",N,N],[8,R[144],R[53],E,N,N],[16,R[7],E,E,0,N],[16,R[6],E,E,0,N],[16,"OperatorOutput",E,E,0,N],[10,"forward_diff",E,"Forward difference calculated as",0,[[["fn"],["self"]],["self"]]],[10,"central_diff",E,"Central difference calculated as",0,[[["fn"],["self"]],["self"]]],[10,"forward_jacobian",E,R[3],0,[[["fn"],["self"]]]],[10,"central_jacobian",E,R[3],0,[[["fn"],["self"]]]],[10,"forward_jacobian_vec_prod",E,R[4],0,[[["fn"],["self"]],["self"]]],[10,"central_jacobian_vec_prod",E,R[4],0,[[["fn"],["self"]],["self"]]],[10,"forward_jacobian_pert",E,E,0,[[["fn"],["self"],["vec"]]]],[10,"central_jacobian_pert",E,E,0,[[["fn"],["self"],["vec"]]]],[10,"forward_hessian",E,"Calculation of the Hessian using forward differences",0,[[["fn"],["self"]]]],[10,"central_hessian",E,"Calculation of the Hessian using central differences",0,[[["fn"],["self"]]]],[10,"forward_hessian_vec_prod",E,R[5],0,[[["fn"],["self"]],["self"]]],[10,"central_hessian_vec_prod",E,R[5],0,[[["fn"],["self"]],["self"]]],[10,"forward_hessian_nograd",E,"Calculation of the Hessian using forward differences…",0,[[["fn"],["self"]]]],[10,"forward_hessian_nograd_sparse",E,"Calculation of a sparse Hessian using forward differences…",0,[[["vec"],["fn"],["self"]]]],[6,"PerturbationVectors",E,"A collection of `PerturbationVector`s",N,N],[3,R[145],E,"Perturbation Vector for the accelerated computation of the…",N,N],[12,"x_idx",E,"x indices",1,N],[12,"r_idx",E,"correspoding function indices",1,N],[8,"ArgminOp",R[2],"This trait needs to be implemented for every operator/cost…",N,N],[16,"Param",E,"Type of the parameter vector",2,N],[16,"Output",E,"Output of the operator",2,N],[16,R[6],E,"Type of Hessian",2,N],[16,R[7],E,"Type of Jacobian",2,N],[11,"apply",E,"Applies the operator/cost function to parameters",2,[[["self"]],[[R[9]],[R[8],[R[9]]]]]],[11,R[102],E,"Computes the gradient at the given parameters",2,[[["self"]],[[R[8],[R[9]]],[R[9]]]]],[11,R[46],E,R[10],2,[[["self"]],[[R[8],[R[9]]],[R[9]]]]],[11,"jacobian",E,R[10],2,[[["self"]],[[R[9]],[R[8],[R[9]]]]]],[11,"modify",E,"Modifies a parameter vector. Comes with a variable that…",2,[[["f64"],["self"]],[[R[8],[R[9]]],[R[9]]]]],[8,"Solver",E,E,N,N],[18,"NAME",E,E,3,N],[10,R[124],E,"Computes one iteration of the algorithm.",3,[[["self"],[R[12]],[R[13]]],[[R[8],[R[11],R[9]]],[R[9]],[R[11]]]]],[11,"init",E,"Initializes the algorithm",3,[[["self"],[R[12]],[R[13]]],[["option",[R[11]]],[R[9]],[R[8],["option",R[9]]]]]],[11,"terminate_internal",E,"Checks whether basic termination reasons apply.",3,[[["self"],[R[13]]],[R[14]]]],[11,R[125],E,"Checks whether the algorithm must be terminated",3,[[["self"],[R[13]]],[R[14]]]],[3,R[201],E,"The datastructure which is returned by the `next_iter`…",N,N],[8,R[146],E,"Defines a common interface for line search methods.",N,N],[10,R[127],E,"Set the search direction",4,[[["self"],["p"]]]],[10,R[128],E,R[15],4,[[["self"],["f64"]],[[R[9]],[R[8],[R[9]]]]]],[8,R[147],E,"Defines a common interface to methods which calculate…",N,N],[10,R[131],E,R[15],5,[[["self"],["f64"]]]],[8,R[148],E,"Common interface for beta update methods (Nonlinear-CG)",N,N],[10,"update",E,"Update beta Parameter 1: \\nabla f_k Parameter 2: \\nabla…",6,[[[T],["self"]],["f64"]]],[4,R[149],E,"Indicates why the optimization algorithm stopped",N,N],[13,"NotTerminated",E,"In case it has not terminated yet",7,N],[13,"MaxItersReached",E,"Maximum number of iterations reached",7,N],[13,"TargetCostReached",E,"Target cost function value reached",7,N],[13,"TargetPrecisionReached",E,"Target precision reached",7,N],[13,"NoChangeInCost",E,"Cost function value did not change",7,N],[13,"AcceptedStallIterExceeded",E,"Acceped stall iter exceeded",7,N],[13,"BestStallIterExceeded",E,"Best stall iter exceeded",7,N],[13,"LineSearchConditionMet",E,"Condition for Line search met",7,N],[13,"Aborted",E,"Aborted",7,N],[8,R[150],E,E,N,N],[10,"rand_from_range",E,"Get a random element between min and max,",8,[[["self"]],["self"]]],[8,R[151],E,R[16],N,N],[10,"add",E,R[16],9,[[[T],["self"]],[U]]],[8,R[152],E,R[17],N,N],[10,"mul",E,R[17],10,[[[T],["self"]],[U]]],[8,R[153],E,E,N,N],[10,"eye",E,E,11,[[["usize"]],["self"]]],[10,"eye_like",E,E,11,[[["self"]],["self"]]],[0,"slog_logger",E,"Loggers based on the `slog` crate",N,N],[3,R[202],R[60],"A logger based on `slog`",N,N],[3,R[154],E,"This type is necessary in order to be able to implement…",N,N],[12,"kv",E,E,12,N],[4,R[155],R[2],"This is used to indicate how often the observer will…",N,N],[13,"Never",E,E,13,N],[13,"Always",E,E,13,N],[13,"Every",E,E,13,N],[13,"NewBest",E,E,13,N],[8,R[156],E,R[18],N,N],[10,"scaled_sub",E,R[18],14,[[[U],[T],["self"]],["v"]]],[3,R[203],E,E,N,N],[3,R[157],E,"This is returned by the `Executor` after the solver is run…",N,N],[12,R[19],E,R[19],15,N],[12,"state",E,"iteration state",15,N],[4,R[158],E,E,N,N],[13,"Never",E,E,16,N],[13,"Every",E,E,16,N],[13,"Always",E,E,16,N],[0,"file",E,"Output parameter vectors to file",N,N],[4,R[159],R[64],E,N,N],[13,"Bincode",E,E,17,N],[13,"JSON",E,E,17,N],[3,R[204],E,E,N,N],[8,R[160],R[2],R[20],N,N],[10,"norm",E,R[20],18,[[["self"]],[U]]],[5,"load_checkpoint",E,E,N,[[["p"]],[[R[9]],[R[8],[R[9]]]]]],[3,R[205],E,"Fake Operators for testing No-op operator with free choice…",N,N],[3,"ArgminKV",E,"A simple key-value storage",N,N],[12,"kv",E,"The actual key value storage",19,N],[0,"modcholesky",E,"Modified Cholesky decompositions Modified Cholesky…",N,N],[8,R[161],R[24],"Gershgorin circles",N,N],[10,"gershgorin_circles",E,"Computes the Gershgorin Circles of a matrix",20,[[["self"]],["vec"]]],[8,R[162],E,"Schnabel & Eskow algorithm (1990)",N,N],[11,"mod_cholesky_se90",E,"Computes the modified Cholesky decomposition with the SE90…",21,[[["self"]],[R[21]]]],[8,R[163],E,"Gill, Murray and Wright (1981)",N,N],[11,"mod_cholesky_gmw81",E,"Computes the modified Cholesky decomposition with the…",22,[[["self"]],[R[21]]]],[3,R[164],E,E,N,N],[12,"l",E,E,23,N],[12,"e",E,E,23,N],[12,"p",E,E,23,N],[0,"utils",E,"Utility functions",N,N],[5,"eigenvalues_2x2","argmin::prelude::modcholesky::utils","Computes the Eigenvalues of a 2x2 matrix",N,[[[R[22]]]]],[5,"swap_columns",E,"Swaps columns `idx1` and `idx2` of matrix `mat`",N,[[[R[22]],["usize"]]]],[5,"swap_rows",E,"Swaps rows `idx1` and `idx2` of matrix `mat`",N,[[[R[22]],["usize"]]]],[5,"index_of_largest",E,"Returns the index of the largest element in a 1D array",N,[[[R[22]]],["usize"]]],[5,"index_of_largest_abs",E,"Returns the index of the element with the largest absolute…",N,[[[R[22]]],["usize"]]],[5,"index_to_permutation_mat",E,"Returns the permutation matrix for a vector of permuted…",N,[[],[[R[23],["f64"]],[R[22],[R[23],"dim"]],["dim"]]]],[5,"diag_mat_from_arr",E,"Builds a diagonal matrix from a 1D slice",N,[[],[[R[23]],[R[22],[R[23],"dim"]],["dim"]]]],[5,"random_householder",E,"Returns a random Householder matrix of dimension `dim` and…",N,[[["u8"],["usize"]],[[R[23],["f64"]],[R[22],[R[23],"dim"]],["dim"]]]],[5,"random_diagonal",E,"Returns a random diagonal matrix with Eigenvalues…",N,[[["u8"],["usize"]],[[R[23],["f64"]],[R[22],[R[23],"dim"]],["dim"]]]],[8,R[165],R[24],"Schnabel & Eskow algorithm (1999)",N,N],[11,"mod_cholesky_se99",E,"Computes the modified Cholesky decomposition with the SE99…",24,[[["self"]],[R[21]]]],[3,"Error",R[2],"The `Error` type, which can contain any failure.",N,N],[8,R[166],E,R[25],N,N],[10,"dot",E,R[25],25,[[[T],["self"]],[U]]],[3,R[206],E,E,N,N],[8,R[167],E,R[26],N,N],[10,"sub",E,R[26],26,[[[T],["self"]],[U]]],[8,R[168],E,R[27],N,N],[10,"div",E,R[27],27,[[[T],["self"]],[U]]],[8,R[169],E,"Compute the inverse (`T`) of `self`",N,N],[10,"inv",E,E,28,[[["self"]],[[R[9]],[R[8],[R[9]]]]]],[14,"check_param",E,"Release an `T` from an `Option<T>` if it is not `None`. If…",N,N],[8,R[170],E,"Zero for dynamically sized objects",N,N],[10,"zero_like",E,R[29],29,[[["self"]],["self"]]],[3,R[171],E,E,N,N],[12,"param",E,"Current parameter vector",30,N],[12,"prev_param",E,"Previous parameter vector",30,N],[12,R[136],E,"Current best parameter vector",30,N],[12,"prev_best_param",E,"Previous best parameter vector",30,N],[12,"cost",E,"Current cost function value",30,N],[12,"prev_cost",E,"Previous cost function value",30,N],[12,R[137],E,"Current best cost function value",30,N],[12,"prev_best_cost",E,"Previous best cost function value",30,N],[12,R[132],E,"Target cost function value",30,N],[12,"grad",E,"Current gradient",30,N],[12,"prev_grad",E,"Previous gradient",30,N],[12,R[46],E,"Current Hessian",30,N],[12,"prev_hessian",E,"Previous Hessian",30,N],[12,"iter",E,"Current iteration",30,N],[12,R[138],E,"Iteration number of last best cost",30,N],[12,R[48],E,"Maximum number of iterations",30,N],[12,R[30],E,"Number of cost function evaluations so far",30,N],[12,R[31],E,R[28],30,N],[12,R[32],E,R[28],30,N],[12,R[33],E,"Number of modify evaluations so far",30,N],[12,"time",E,"Time required so far",30,N],[12,R[133],E,"Reason of termination",30,N],[8,R[172],E,"Return param vector of all zeros (for now, this is a hack.…",N,N],[10,"zero",E,R[29],31,[[],["self"]]],[3,"Observer",E,"Container for observers which acts just like a single…",N,N],[3,R[173],E,"This wraps an operator and keeps track of how often the…",N,N],[12,R[30],E,E,32,N],[12,R[31],E,E,32,N],[12,R[32],E,E,32,N],[12,R[33],E,E,32,N],[8,R[174],E,"Dot/scalar product of `T` and `self` weighted by W (p^TWv)",N,N],[10,"weighted_dot",E,R[25],33,[[[T],["self"],["v"]],[U]]],[14,"trait_bound",E,"Reuse a list of trait bounds by giving it a name, e.g.…",N,N],[8,"Observe",E,"Defines the interface every Observer needs to expose",N,N],[11,R[99],E,"Called once at the beginning of the execution of the solver.",34,[[["str"],["self"],[R[34]]],[[R[9]],[R[8],[R[9]]]]]],[11,R[98],E,"Called at every iteration of the solver",34,[[["self"],[R[13]],[R[34]]],[[R[9]],[R[8],[R[9]]]]]],[4,R[175],E,E,N,N],[13,"InvalidParameter",E,"Indicates and invalid parameter",35,N],[12,"text",R[35],E,35,N],[13,"NotImplemented",R[2],"Indicates that a function is not implemented",35,N],[12,"text",R[35],E,35,N],[13,"NotInitialized",R[2],"Indicates that a function is not initialized",35,N],[12,"text",R[35],E,35,N],[13,"ConditionViolated",R[2],"Indicates that a condition is violated",35,N],[12,"text",R[35],E,35,N],[13,"CheckpointNotFound",R[2],"Checkpoint was not found",35,N],[12,"text",R[35],E,35,N],[13,"ImpossibleError",R[2],"Indicates an impossible error",35,N],[12,"text",R[35],E,35,N],[14,"make_kv",R[2],"Creates an `ArgminKV` at compile time in order to avoid…",N,N],[8,R[176],E,R[36],N,N],[10,"scaled_add",E,R[36],36,[[[U],[T],["self"]],["v"]]],[8,R[177],E,E,N,N],[10,"min",E,"Select piecewise minimum / maximum",37,[[["self"]],["self"]]],[10,"max",E,E,37,[[["self"]],["self"]]],[8,R[178],E,E,N,N],[10,T,E,E,38,[[],["self"]]],[0,"solver",R[0],"Solvers",N,N],[0,R[117],R[39],"Conjugate Gradient methods",N,N],[0,"cg",R[37],"Conjugate gradient method # References:",N,N],[3,R[179],R[66],"The conjugate gradient method is a solver for systems of…",N,N],[11,"new",E,R[38],39,[[["p"]],[[R[9]],[R[8],[R[9]]]]]],[11,"p",E,"Return the current search direction (This is needed by…",39,[[["self"]],["p"]]],[11,"p_prev",E,"Return the previous search direction (This is needed by…",39,[[["self"]],["p"]]],[11,"residual",E,"Return the current residual (This is needed by NewtonCG…",39,[[["self"]],["p"]]],[0,"nonlinear_cg",R[37],"Nonlinear conjugate gradient method Important TODO: Find…",N,N],[3,R[180],R[67],"The nonlinear conjugate gradient is a generalization of…",N,N],[11,"new",E,"Constructor (Polak Ribiere Conjugate Gradient (PR-CG))",40,[[["l"],["b"]],[[R[9]],[R[8],[R[9]]]]]],[11,"restart_iters",E,"Specifiy the number of iterations after which a restart…",40,[[["u64"]],["self"]]],[11,"restart_orthogonality",E,"Set the value for the orthogonality measure. Setting this…",40,[[["f64"]],["self"]]],[0,"beta",R[37],"Beta update methods for nonlinear CG # Beta update methods",N,N],[3,R[181],R[68],"Fletcher and Reeves (FR) method TODO: Reference",N,N],[3,R[182],E,"Polak and Ribiere (PR) method TODO: Reference",N,N],[3,R[183],E,"Polak and Ribiere Plus (PR+) method TODO: Reference",N,N],[3,R[184],E,"Hestenes and Stiefel (HS) method TODO: Reference",N,N],[11,"new",E,R[38],41,[[],["self"]]],[11,"new",E,R[38],42,[[],["self"]]],[11,"new",E,R[38],43,[[],["self"]]],[11,"new",E,R[38],44,[[],["self"]]],[0,"gradientdescent",R[39],"Gradient descent methods",N,N],[0,"steepestdescent","argmin::solver::gradientdescent","Steepest Descent method",N,N],[3,R[185],R[69],"Steepest descent iteratively takes steps in the direction…",N,N],[11,"new",E,R[38],45,[[["l"]],["self"]]],[0,R[118],R[39],"Landweber iteration",N,N],[3,R[186],R[70],"The Landweber iteration is a solver for ill-posed linear…",N,N],[11,"new",E,R[38],46,[[["f64"]],["self"]]],[0,"linesearch",R[39],"Line search methods",N,N],[0,"backtracking",R[40],"Backtracking line search algorithm * Backtracking line…",N,N],[3,R[187],R[71],"The Backtracking line search is a simple method to find a…",N,N],[11,"new",E,R[38],47,[[["l"]],["self"]]],[11,"rho",E,"Set rho",47,[[["f64"]],[[R[9]],[R[8],[R[9]]]]]],[0,"condition",R[40],"Acceptance conditions # References:",N,N],[3,R[189],R[72],"Armijo Condition",N,N],[3,R[190],E,"Wolfe Condition",N,N],[3,R[191],E,"Strong Wolfe conditions",N,N],[3,R[192],E,"Goldstein conditions",N,N],[8,R[188],E,"Needs to be implemented by everything that wants to be a…",N,N],[10,"eval",E,"Evaluate the condition",48,[[["f64"],["self"],[T]],["bool"]]],[10,R[110],E,"Indicates whether this condition requires the computation…",48,[[["self"]],["bool"]]],[11,"new",E,R[38],49,[[["f64"]],[[R[9]],[R[8],[R[9]]]]]],[11,"new",E,R[38],50,[[["f64"]],[[R[9]],[R[8],[R[9]]]]]],[11,"new",E,R[38],51,[[["f64"]],[[R[9]],[R[8],[R[9]]]]]],[11,"new",E,R[38],52,[[["f64"]],[[R[9]],[R[8],[R[9]]]]]],[0,"hagerzhang",R[40],"Hager-Zhang line search algorithm * Hager-Zhang line search",N,N],[3,R[193],R[73],"The Hager-Zhang line search is a method to find a step…",N,N],[11,"new",E,R[38],53,[[],["self"]]],[11,"delta",E,"set delta",53,[[["f64"]],[[R[9]],[R[8],[R[9]]]]]],[11,"sigma",E,"set sigma",53,[[["f64"]],[[R[9]],[R[8],[R[9]]]]]],[11,"epsilon",E,"set epsilon",53,[[["f64"]],[[R[9]],[R[8],[R[9]]]]]],[11,"theta",E,"set theta",53,[[["f64"]],[[R[9]],[R[8],[R[9]]]]]],[11,"gamma",E,R[43],53,[[["f64"]],[[R[9]],[R[8],[R[9]]]]]],[11,"eta",E,"set eta",53,[[["f64"]],[[R[9]],[R[8],[R[9]]]]]],[11,"alpha",E,R[41],53,[[["f64"]],[[R[9]],[R[8],[R[9]]]]]],[0,"morethuente",R[40],"More-Thuente line search algorithm * More-Thuente line…",N,N],[3,R[194],R[74],"The More-Thuente line search is a method to find a step…",N,N],[11,"new",E,R[38],54,[[],["self"]]],[11,"c",E,"Set c1 and c2 where 0 < c1 < c2 < 1.",54,[[["f64"]],[[R[9]],[R[8],[R[9]]]]]],[11,"alpha",E,R[41],54,[[["f64"]],[[R[9]],[R[8],[R[9]]]]]],[0,"newton",R[39],"Newton Methods",N,N],[0,"newton_cg",R[42],"Newton-CG method TODO: Stop when search direction is close…",N,N],[3,"NewtonCG",R[75],"The Newton-CG method (also called truncated Newton method)…",N,N],[11,"new",E,R[38],55,[[["l"]],["self"]]],[11,"curvature_threshold",E,"Set curvature threshold",55,[[["f64"]],["self"]]],[0,"newton_method",R[42],"Newton's method # References:",N,N],[3,"Newton",R[76],"Newton's method iteratively finds the stationary points of…",N,N],[11,"new",E,R[38],56,[[],["self"]]],[11,"set_gamma",E,R[43],56,[[["f64"]],[[R[9]],[R[8],[R[9]]]]]],[0,"quasinewton",R[39],"Quasi-Newton methods",N,N],[0,"bfgs",R[44],R[45],N,N],[3,"BFGS",R[77],"BFGS method",N,N],[11,"new",E,R[38],57,[[["l"],["h"]],["self"]]],[0,"dfp",R[44],R[45],N,N],[3,"DFP",R[78],"DFP method",N,N],[11,"new",E,R[38],58,[[["l"],["h"]],["self"]]],[0,"lbfgs",R[44],R[45],N,N],[3,"LBFGS",R[79],"L-BFGS method",N,N],[11,"new",E,R[38],59,[[["l"],["usize"]],["self"]]],[0,"sr1",R[44],R[45],N,N],[3,"SR1",R[80],"SR1 method (broken!)",N,N],[11,"new",E,R[38],60,[[["l"],["h"]],["self"]]],[11,"r",E,"Set r",60,[[["f64"]],[[R[9]],[R[8],[R[9]]]]]],[0,"sr1_trustregion",R[44],R[45],N,N],[3,R[195],R[81],"SR1 Trust Region method",N,N],[11,"new",E,R[38],61,[[["r"]],["self"]]],[11,R[46],E,"provide initial Hessian (if not provided, the algorithm…",61,[[["b"]],["self"]]],[11,"r",E,"Set r",61,[[["f64"]],[[R[9]],[R[8],[R[9]]]]]],[11,"radius",E,R[49],61,[[["f64"]],["self"]]],[11,"eta",E,"Set eta",61,[[["f64"]],[[R[9]],[R[8],[R[9]]]]]],[0,"simulatedannealing",R[39],E,N,N],[3,R[197],R[82],"Simulated Annealing",N,N],[4,R[196],E,"Temperature functions for Simulated Annealing.",N,N],[13,"TemperatureFast",E,"`t_i = t_init / i`",62,N],[13,"Boltzmann",E,"`t_i = t_init / ln(i)`",62,N],[13,"Exponential",E,"`t_i = t_init * x^i`",62,N],[11,"new",E,R[38],63,[[["f64"]],[[R[9]],[R[8],[R[9]]]]]],[11,"temp_func",E,"Set temperature function to one of the options in…",63,[[[R[123]]],["self"]]],[11,"stall_accepted",E,"The optimization stops after there has been no accepted…",63,[[["u64"]],["self"]]],[11,"stall_best",E,"The optimization stops after there has been no new best…",63,[[["u64"]],["self"]]],[11,"reannealing_fixed",E,"Start reannealing after `iter` iterations",63,[[["u64"]],["self"]]],[11,"reannealing_accepted",E,"Start reannealing after no accepted solution has been…",63,[[["u64"]],["self"]]],[11,"reannealing_best",E,"Start reannealing after no new best solution has been…",63,[[["u64"]],["self"]]],[0,"trustregion",R[39],"Argmin Trust region methods",N,N],[5,"reduction_ratio",R[47],"Computes reduction ratio",N,[[["f64"]],["f64"]]],[0,R[111],E,"Cauchy Point # References:",N,N],[3,R[198],R[83],"The Cauchy point is the minimum of the quadratic…",N,N],[11,"new",E,R[38],64,[[],["self"]]],[0,"dogleg",R[47],"Dogleg method # References:",N,N],[3,"Dogleg",R[84],"The Dogleg method computes the intersection of the trust…",N,N],[11,"new",E,R[38],65,[[],["self"]]],[0,R[112],R[47],"Steihaug method # References:",N,N],[3,"Steihaug",R[85],"The Steihaug method is a conjugate gradients based…",N,N],[11,"new",E,R[38],66,[[],["self"]]],[11,"epsilon",E,"Set epsilon",66,[[["f64"]],[[R[9]],[R[8],[R[9]]]]]],[11,R[48],E,"set maximum number of iterations",66,[[["u64"]],["self"]]],[0,"trustregion_method",R[47],"Trust region solver # References:",N,N],[3,R[199],R[86],"The trust region method approximates the cost function…",N,N],[11,"new",E,R[38],67,[[["r"]],["self"]]],[11,"radius",E,R[49],67,[[["f64"]],["self"]]],[11,"max_radius",E,"Set maximum radius",67,[[["f64"]],["self"]]],[11,"eta",E,"Set eta",67,[[["f64"]],[[R[9]],[R[8],[R[9]]]]]],[0,"particleswarm",R[39],R[45],N,N],[3,R[200],R[87],"Particle Swarm Optimization (PSO)",N,N],[3,"Particle",E,"A single particle",N,N],[12,"position",E,"Position of particle",68,N],[12,"cost",E,"Cost of particle",68,N],[8,"Position",E,E,N,N],[11,"new",E,R[38],69,[[["o"],["f64"],["usize"]],[[R[9]],[R[8],[R[9]]]]]],[11,"set_iter_callback",E,"Set callback",69,[[["self"],["fnmut"]]]],[0,"testfunctions",R[0],"Testfunctions # Testfunctions",N,N],[5,"beale","argmin::testfunctions","Beale test function",N,[[],[T]]],[5,"schaffer_n2",E,"Schaffer test function No. 2",N,[[],[T]]],[5,"sphere_derivative",E,"Derivative of sphere test function",N,[[],["vec"]]],[5,"rosenbrock_2d_hessian",E,"Hessian of 2D Rosenbrock function",N,[[[T]],["vec"]]],[5,"levy_n13",E,"Levy test function No. 13",N,[[],[T]]],[5,"rosenbrock",E,"Multidimensional Rosenbrock test function",N,[[[T]],[T]]],[5,"matyas",E,"Matyas test function",N,[[],[T]]],[5,"cross_in_tray",E,"Cross-in-tray test function",N,[[],["f64"]]],[5,"ackley_param",E,R[51],N,[[[T]],[T]]],[5,"sphere",E,"Sphere test function",N,[[],[T]]],[5,"zero",E,"Zero test function",N,[[],["f64"]]],[5,"himmelblau",E,"Himmelblau test function",N,[[],[T]]],[5,"schaffer_n4",E,"Schaffer test function No. 4",N,[[],[T]]],[5,"picheny",E,"Picheny test function",N,[[],[T]]],[5,"rastrigin",E,R[50],N,[[],[T]]],[5,"rastrigin_a",E,R[50],N,[[[T]],[T]]],[5,"zero_derivative",E,"Derivative of zero test function",N,[[],[["vec",["f64"]],["f64"]]]],[5,"bukin_n6",E,"Bukin test function No. 6",N,[[],[T]]],[5,"styblinski_tang",E,"Styblinski-Tang test function",N,[[],[T]]],[5,"threehumpcamel",E,"Three-hump camel test function",N,[[],[T]]],[5,"eggholder",E,"Eggholder test function",N,[[],[T]]],[5,"goldsteinprice",E,"Goldstein-Price test function",N,[[],[T]]],[5,"levy",E,"Levy test function",N,[[],[T]]],[5,"booth",E,"Booth test function",N,[[],[T]]],[5,"holder_table",E,"Holder table test function",N,[[],[T]]],[5,"easom",E,"Easom test function",N,[[],[T]]],[5,"mccorminck",E,"McCorminck test function",N,[[],[T]]],[5,"rosenbrock_2d_derivative",E,"Derivative of 2D Rosenbrock function",N,[[[T]],["vec"]]],[5,"ackley",E,R[51],N,[[],[T]]],[5,"rosenbrock_2d",E,"2D Rosenbrock test function",N,[[[T]],[T]]],[11,"into",R[52],E,70,[[],[U]]],[11,R[54],E,E,70,[[["self"]],[T]]],[11,R[55],E,E,70,[[[T],["self"]]]],[11,"from",E,E,70,[[[T]],[T]]],[11,R[56],E,E,70,[[[U]],[R[8]]]],[11,R[61],E,E,70,[[["self"]],[T]]],[11,R[59],E,E,70,[[["self"]],[R[62]]]],[11,R[57],E,E,70,[[["self"]],[T]]],[11,R[58],E,E,70,[[],[R[8]]]],[11,"into",R[53],E,1,[[],[U]]],[11,R[54],E,E,1,[[["self"]],[T]]],[11,R[55],E,E,1,[[[T],["self"]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[56],E,E,1,[[[U]],[R[8]]]],[11,R[61],E,E,1,[[["self"]],[T]]],[11,R[59],E,E,1,[[["self"]],[R[62]]]],[11,R[57],E,E,1,[[["self"]],[T]]],[11,R[58],E,E,1,[[],[R[8]]]],[11,"into",R[2],E,71,[[],[U]]],[11,R[54],E,E,71,[[["self"]],[T]]],[11,R[55],E,E,71,[[[T],["self"]]]],[11,"from",E,E,71,[[[T]],[T]]],[11,R[56],E,E,71,[[[U]],[R[8]]]],[11,R[61],E,E,71,[[["self"]],[T]]],[11,R[59],E,E,71,[[["self"]],[R[62]]]],[11,R[57],E,E,71,[[["self"]],[T]]],[11,R[58],E,E,71,[[],[R[8]]]],[11,"into",E,E,7,[[],[U]]],[11,R[54],E,E,7,[[["self"]],[T]]],[11,R[55],E,E,7,[[[T],["self"]]]],[11,"from",E,E,7,[[[T]],[T]]],[11,R[63],E,E,7,[[["self"]],[R[65]]]],[11,R[56],E,E,7,[[[U]],[R[8]]]],[11,R[61],E,E,7,[[["self"]],[T]]],[11,R[59],E,E,7,[[["self"]],[R[62]]]],[11,R[57],E,E,7,[[["self"]],[T]]],[11,R[58],E,E,7,[[],[R[8]]]],[11,"into",R[60],E,72,[[],[U]]],[11,R[54],E,E,72,[[["self"]],[T]]],[11,R[55],E,E,72,[[[T],["self"]]]],[11,"from",E,E,72,[[[T]],[T]]],[11,R[56],E,E,72,[[[U]],[R[8]]]],[11,R[61],E,E,72,[[["self"]],[T]]],[11,R[59],E,E,72,[[["self"]],[R[62]]]],[11,R[57],E,E,72,[[["self"]],[T]]],[11,R[58],E,E,72,[[],[R[8]]]],[11,"into",E,E,12,[[],[U]]],[11,"from",E,E,12,[[[T]],[T]]],[11,R[56],E,E,12,[[[U]],[R[8]]]],[11,R[61],E,E,12,[[["self"]],[T]]],[11,R[59],E,E,12,[[["self"]],[R[62]]]],[11,R[57],E,E,12,[[["self"]],[T]]],[11,R[58],E,E,12,[[],[R[8]]]],[11,"into",R[2],E,13,[[],[U]]],[11,R[54],E,E,13,[[["self"]],[T]]],[11,R[55],E,E,13,[[[T],["self"]]]],[11,"from",E,E,13,[[[T]],[T]]],[11,R[56],E,E,13,[[[U]],[R[8]]]],[11,R[61],E,E,13,[[["self"]],[T]]],[11,R[59],E,E,13,[[["self"]],[R[62]]]],[11,R[57],E,E,13,[[["self"]],[T]]],[11,R[58],E,E,13,[[],[R[8]]]],[11,"into",E,E,73,[[],[U]]],[11,R[54],E,E,73,[[["self"]],[T]]],[11,R[55],E,E,73,[[[T],["self"]]]],[11,"from",E,E,73,[[[T]],[T]]],[11,R[56],E,E,73,[[[U]],[R[8]]]],[11,R[61],E,E,73,[[["self"]],[T]]],[11,R[59],E,E,73,[[["self"]],[R[62]]]],[11,R[57],E,E,73,[[["self"]],[T]]],[11,R[58],E,E,73,[[],[R[8]]]],[11,"into",E,E,15,[[],[U]]],[11,R[54],E,E,15,[[["self"]],[T]]],[11,R[55],E,E,15,[[[T],["self"]]]],[11,"from",E,E,15,[[[T]],[T]]],[11,R[63],E,E,15,[[["self"]],[R[65]]]],[11,R[56],E,E,15,[[[U]],[R[8]]]],[11,R[61],E,E,15,[[["self"]],[T]]],[11,R[59],E,E,15,[[["self"]],[R[62]]]],[11,R[57],E,E,15,[[["self"]],[T]]],[11,R[58],E,E,15,[[],[R[8]]]],[11,"into",E,E,16,[[],[U]]],[11,R[54],E,E,16,[[["self"]],[T]]],[11,R[55],E,E,16,[[[T],["self"]]]],[11,"from",E,E,16,[[[T]],[T]]],[11,R[63],E,E,16,[[["self"]],[R[65]]]],[11,R[56],E,E,16,[[[U]],[R[8]]]],[11,R[61],E,E,16,[[["self"]],[T]]],[11,R[59],E,E,16,[[["self"]],[R[62]]]],[11,R[57],E,E,16,[[["self"]],[T]]],[11,R[58],E,E,16,[[],[R[8]]]],[11,"into",R[64],E,17,[[],[U]]],[11,R[54],E,E,17,[[["self"]],[T]]],[11,R[55],E,E,17,[[[T],["self"]]]],[11,"from",E,E,17,[[[T]],[T]]],[11,R[56],E,E,17,[[[U]],[R[8]]]],[11,R[61],E,E,17,[[["self"]],[T]]],[11,R[59],E,E,17,[[["self"]],[R[62]]]],[11,R[57],E,E,17,[[["self"]],[T]]],[11,R[58],E,E,17,[[],[R[8]]]],[11,"into",E,E,74,[[],[U]]],[11,R[54],E,E,74,[[["self"]],[T]]],[11,R[55],E,E,74,[[[T],["self"]]]],[11,"from",E,E,74,[[[T]],[T]]],[11,R[56],E,E,74,[[[U]],[R[8]]]],[11,R[61],E,E,74,[[["self"]],[T]]],[11,R[59],E,E,74,[[["self"]],[R[62]]]],[11,R[57],E,E,74,[[["self"]],[T]]],[11,R[58],E,E,74,[[],[R[8]]]],[11,"into",R[2],E,75,[[],[U]]],[11,R[54],E,E,75,[[["self"]],[T]]],[11,R[55],E,E,75,[[[T],["self"]]]],[11,"from",E,E,75,[[[T]],[T]]],[11,R[63],E,E,75,[[["self"]],[R[65]]]],[11,R[56],E,E,75,[[[U]],[R[8]]]],[11,R[61],E,E,75,[[["self"]],[T]]],[11,R[59],E,E,75,[[["self"]],[R[62]]]],[11,R[57],E,E,75,[[["self"]],[T]]],[11,R[58],E,E,75,[[],[R[8]]]],[11,"into",E,E,19,[[],[U]]],[11,R[54],E,E,19,[[["self"]],[T]]],[11,R[55],E,E,19,[[[T],["self"]]]],[11,"from",E,E,19,[[[T]],[T]]],[11,R[63],E,E,19,[[["self"]],[R[65]]]],[11,R[56],E,E,19,[[[U]],[R[8]]]],[11,R[61],E,E,19,[[["self"]],[T]]],[11,R[59],E,E,19,[[["self"]],[R[62]]]],[11,R[57],E,E,19,[[["self"]],[T]]],[11,R[58],E,E,19,[[],[R[8]]]],[11,"into",R[24],E,23,[[],[U]]],[11,"from",E,E,23,[[[T]],[T]]],[11,R[56],E,E,23,[[[U]],[R[8]]]],[11,R[61],E,E,23,[[["self"]],[T]]],[11,R[59],E,E,23,[[["self"]],[R[62]]]],[11,R[57],E,E,23,[[["self"]],[T]]],[11,R[58],E,E,23,[[],[R[8]]]],[11,"into",R[2],E,76,[[],[U]]],[11,"from",E,E,76,[[[T]],[T]]],[11,R[63],E,E,76,[[["self"]],[R[65]]]],[11,R[56],E,E,76,[[[U]],[R[8]]]],[11,R[61],E,E,76,[[["self"]],[T]]],[11,R[59],E,E,76,[[["self"]],[R[62]]]],[11,R[57],E,E,76,[[["self"]],[T]]],[11,R[58],E,E,76,[[],[R[8]]]],[11,"as_fail",E,E,76,[[["self"]],["fail"]]],[11,"into",E,E,77,[[],[U]]],[11,R[54],E,E,77,[[["self"]],[T]]],[11,R[55],E,E,77,[[[T],["self"]]]],[11,"from",E,E,77,[[[T]],[T]]],[11,R[63],E,E,77,[[["self"]],[R[65]]]],[11,R[56],E,E,77,[[[U]],[R[8]]]],[11,R[61],E,E,77,[[["self"]],[T]]],[11,R[59],E,E,77,[[["self"]],[R[62]]]],[11,R[57],E,E,77,[[["self"]],[T]]],[11,R[58],E,E,77,[[],[R[8]]]],[11,"into",E,E,30,[[],[U]]],[11,R[54],E,E,30,[[["self"]],[T]]],[11,R[55],E,E,30,[[[T],["self"]]]],[11,"from",E,E,30,[[[T]],[T]]],[11,R[56],E,E,30,[[[U]],[R[8]]]],[11,R[61],E,E,30,[[["self"]],[T]]],[11,R[59],E,E,30,[[["self"]],[R[62]]]],[11,R[57],E,E,30,[[["self"]],[T]]],[11,R[58],E,E,30,[[],[R[8]]]],[11,"into",E,E,78,[[],[U]]],[11,R[54],E,E,78,[[["self"]],[T]]],[11,R[55],E,E,78,[[[T],["self"]]]],[11,"from",E,E,78,[[[T]],[T]]],[11,R[56],E,E,78,[[[U]],[R[8]]]],[11,R[61],E,E,78,[[["self"]],[T]]],[11,R[59],E,E,78,[[["self"]],[R[62]]]],[11,R[57],E,E,78,[[["self"]],[T]]],[11,R[58],E,E,78,[[],[R[8]]]],[11,"into",E,E,32,[[],[U]]],[11,R[54],E,E,32,[[["self"]],[T]]],[11,R[55],E,E,32,[[[T],["self"]]]],[11,"from",E,E,32,[[[T]],[T]]],[11,R[56],E,E,32,[[[U]],[R[8]]]],[11,R[61],E,E,32,[[["self"]],[T]]],[11,R[59],E,E,32,[[["self"]],[R[62]]]],[11,R[57],E,E,32,[[["self"]],[T]]],[11,R[58],E,E,32,[[],[R[8]]]],[11,"into",E,E,35,[[],[U]]],[11,"from",E,E,35,[[[T]],[T]]],[11,R[63],E,E,35,[[["self"]],[R[65]]]],[11,R[56],E,E,35,[[[U]],[R[8]]]],[11,R[61],E,E,35,[[["self"]],[T]]],[11,R[59],E,E,35,[[["self"]],[R[62]]]],[11,R[57],E,E,35,[[["self"]],[T]]],[11,R[58],E,E,35,[[],[R[8]]]],[11,"as_fail",E,E,35,[[["self"]],["fail"]]],[11,"into",R[66],E,39,[[],[U]]],[11,R[54],E,E,39,[[["self"]],[T]]],[11,R[55],E,E,39,[[[T],["self"]]]],[11,"from",E,E,39,[[[T]],[T]]],[11,R[56],E,E,39,[[[U]],[R[8]]]],[11,R[61],E,E,39,[[["self"]],[T]]],[11,R[59],E,E,39,[[["self"]],[R[62]]]],[11,R[57],E,E,39,[[["self"]],[T]]],[11,R[58],E,E,39,[[],[R[8]]]],[11,"into",R[67],E,40,[[],[U]]],[11,"from",E,E,40,[[[T]],[T]]],[11,R[56],E,E,40,[[[U]],[R[8]]]],[11,R[61],E,E,40,[[["self"]],[T]]],[11,R[59],E,E,40,[[["self"]],[R[62]]]],[11,R[57],E,E,40,[[["self"]],[T]]],[11,R[58],E,E,40,[[],[R[8]]]],[11,"into",R[68],E,41,[[],[U]]],[11,R[54],E,E,41,[[["self"]],[T]]],[11,R[55],E,E,41,[[[T],["self"]]]],[11,"from",E,E,41,[[[T]],[T]]],[11,R[56],E,E,41,[[[U]],[R[8]]]],[11,R[61],E,E,41,[[["self"]],[T]]],[11,R[59],E,E,41,[[["self"]],[R[62]]]],[11,R[57],E,E,41,[[["self"]],[T]]],[11,R[58],E,E,41,[[],[R[8]]]],[11,"into",E,E,42,[[],[U]]],[11,R[54],E,E,42,[[["self"]],[T]]],[11,R[55],E,E,42,[[[T],["self"]]]],[11,"from",E,E,42,[[[T]],[T]]],[11,R[56],E,E,42,[[[U]],[R[8]]]],[11,R[61],E,E,42,[[["self"]],[T]]],[11,R[59],E,E,42,[[["self"]],[R[62]]]],[11,R[57],E,E,42,[[["self"]],[T]]],[11,R[58],E,E,42,[[],[R[8]]]],[11,"into",E,E,43,[[],[U]]],[11,R[54],E,E,43,[[["self"]],[T]]],[11,R[55],E,E,43,[[[T],["self"]]]],[11,"from",E,E,43,[[[T]],[T]]],[11,R[56],E,E,43,[[[U]],[R[8]]]],[11,R[61],E,E,43,[[["self"]],[T]]],[11,R[59],E,E,43,[[["self"]],[R[62]]]],[11,R[57],E,E,43,[[["self"]],[T]]],[11,R[58],E,E,43,[[],[R[8]]]],[11,"into",E,E,44,[[],[U]]],[11,R[54],E,E,44,[[["self"]],[T]]],[11,R[55],E,E,44,[[[T],["self"]]]],[11,"from",E,E,44,[[[T]],[T]]],[11,R[56],E,E,44,[[[U]],[R[8]]]],[11,R[61],E,E,44,[[["self"]],[T]]],[11,R[59],E,E,44,[[["self"]],[R[62]]]],[11,R[57],E,E,44,[[["self"]],[T]]],[11,R[58],E,E,44,[[],[R[8]]]],[11,"into",R[69],E,45,[[],[U]]],[11,"from",E,E,45,[[[T]],[T]]],[11,R[56],E,E,45,[[[U]],[R[8]]]],[11,R[61],E,E,45,[[["self"]],[T]]],[11,R[59],E,E,45,[[["self"]],[R[62]]]],[11,R[57],E,E,45,[[["self"]],[T]]],[11,R[58],E,E,45,[[],[R[8]]]],[11,"into",R[70],E,46,[[],[U]]],[11,R[54],E,E,46,[[["self"]],[T]]],[11,R[55],E,E,46,[[[T],["self"]]]],[11,"from",E,E,46,[[[T]],[T]]],[11,R[56],E,E,46,[[[U]],[R[8]]]],[11,R[61],E,E,46,[[["self"]],[T]]],[11,R[59],E,E,46,[[["self"]],[R[62]]]],[11,R[57],E,E,46,[[["self"]],[T]]],[11,R[58],E,E,46,[[],[R[8]]]],[11,"into",R[71],E,47,[[],[U]]],[11,R[54],E,E,47,[[["self"]],[T]]],[11,R[55],E,E,47,[[[T],["self"]]]],[11,"from",E,E,47,[[[T]],[T]]],[11,R[56],E,E,47,[[[U]],[R[8]]]],[11,R[61],E,E,47,[[["self"]],[T]]],[11,R[59],E,E,47,[[["self"]],[R[62]]]],[11,R[57],E,E,47,[[["self"]],[T]]],[11,R[58],E,E,47,[[],[R[8]]]],[11,"into",R[72],E,49,[[],[U]]],[11,R[54],E,E,49,[[["self"]],[T]]],[11,R[55],E,E,49,[[[T],["self"]]]],[11,"from",E,E,49,[[[T]],[T]]],[11,R[56],E,E,49,[[[U]],[R[8]]]],[11,R[61],E,E,49,[[["self"]],[T]]],[11,R[59],E,E,49,[[["self"]],[R[62]]]],[11,R[57],E,E,49,[[["self"]],[T]]],[11,R[58],E,E,49,[[],[R[8]]]],[11,"into",E,E,50,[[],[U]]],[11,R[54],E,E,50,[[["self"]],[T]]],[11,R[55],E,E,50,[[[T],["self"]]]],[11,"from",E,E,50,[[[T]],[T]]],[11,R[56],E,E,50,[[[U]],[R[8]]]],[11,R[61],E,E,50,[[["self"]],[T]]],[11,R[59],E,E,50,[[["self"]],[R[62]]]],[11,R[57],E,E,50,[[["self"]],[T]]],[11,R[58],E,E,50,[[],[R[8]]]],[11,"into",E,E,51,[[],[U]]],[11,R[54],E,E,51,[[["self"]],[T]]],[11,R[55],E,E,51,[[[T],["self"]]]],[11,"from",E,E,51,[[[T]],[T]]],[11,R[56],E,E,51,[[[U]],[R[8]]]],[11,R[61],E,E,51,[[["self"]],[T]]],[11,R[59],E,E,51,[[["self"]],[R[62]]]],[11,R[57],E,E,51,[[["self"]],[T]]],[11,R[58],E,E,51,[[],[R[8]]]],[11,"into",E,E,52,[[],[U]]],[11,R[54],E,E,52,[[["self"]],[T]]],[11,R[55],E,E,52,[[[T],["self"]]]],[11,"from",E,E,52,[[[T]],[T]]],[11,R[56],E,E,52,[[[U]],[R[8]]]],[11,R[61],E,E,52,[[["self"]],[T]]],[11,R[59],E,E,52,[[["self"]],[R[62]]]],[11,R[57],E,E,52,[[["self"]],[T]]],[11,R[58],E,E,52,[[],[R[8]]]],[11,"into",R[73],E,53,[[],[U]]],[11,R[54],E,E,53,[[["self"]],[T]]],[11,R[55],E,E,53,[[[T],["self"]]]],[11,"from",E,E,53,[[[T]],[T]]],[11,R[56],E,E,53,[[[U]],[R[8]]]],[11,R[61],E,E,53,[[["self"]],[T]]],[11,R[59],E,E,53,[[["self"]],[R[62]]]],[11,R[57],E,E,53,[[["self"]],[T]]],[11,R[58],E,E,53,[[],[R[8]]]],[11,"into",R[74],E,54,[[],[U]]],[11,R[54],E,E,54,[[["self"]],[T]]],[11,R[55],E,E,54,[[[T],["self"]]]],[11,"from",E,E,54,[[[T]],[T]]],[11,R[56],E,E,54,[[[U]],[R[8]]]],[11,R[61],E,E,54,[[["self"]],[T]]],[11,R[59],E,E,54,[[["self"]],[R[62]]]],[11,R[57],E,E,54,[[["self"]],[T]]],[11,R[58],E,E,54,[[],[R[8]]]],[11,"into",R[75],E,55,[[],[U]]],[11,"from",E,E,55,[[[T]],[T]]],[11,R[56],E,E,55,[[[U]],[R[8]]]],[11,R[61],E,E,55,[[["self"]],[T]]],[11,R[59],E,E,55,[[["self"]],[R[62]]]],[11,R[57],E,E,55,[[["self"]],[T]]],[11,R[58],E,E,55,[[],[R[8]]]],[11,"into",R[76],E,56,[[],[U]]],[11,"from",E,E,56,[[[T]],[T]]],[11,R[56],E,E,56,[[[U]],[R[8]]]],[11,R[61],E,E,56,[[["self"]],[T]]],[11,R[59],E,E,56,[[["self"]],[R[62]]]],[11,R[57],E,E,56,[[["self"]],[T]]],[11,R[58],E,E,56,[[],[R[8]]]],[11,"into",R[77],E,57,[[],[U]]],[11,"from",E,E,57,[[[T]],[T]]],[11,R[56],E,E,57,[[[U]],[R[8]]]],[11,R[61],E,E,57,[[["self"]],[T]]],[11,R[59],E,E,57,[[["self"]],[R[62]]]],[11,R[57],E,E,57,[[["self"]],[T]]],[11,R[58],E,E,57,[[],[R[8]]]],[11,"into",R[78],E,58,[[],[U]]],[11,"from",E,E,58,[[[T]],[T]]],[11,R[56],E,E,58,[[[U]],[R[8]]]],[11,R[61],E,E,58,[[["self"]],[T]]],[11,R[59],E,E,58,[[["self"]],[R[62]]]],[11,R[57],E,E,58,[[["self"]],[T]]],[11,R[58],E,E,58,[[],[R[8]]]],[11,"into",R[79],E,59,[[],[U]]],[11,"from",E,E,59,[[[T]],[T]]],[11,R[56],E,E,59,[[[U]],[R[8]]]],[11,R[61],E,E,59,[[["self"]],[T]]],[11,R[59],E,E,59,[[["self"]],[R[62]]]],[11,R[57],E,E,59,[[["self"]],[T]]],[11,R[58],E,E,59,[[],[R[8]]]],[11,"into",R[80],E,60,[[],[U]]],[11,"from",E,E,60,[[[T]],[T]]],[11,R[56],E,E,60,[[[U]],[R[8]]]],[11,R[61],E,E,60,[[["self"]],[T]]],[11,R[59],E,E,60,[[["self"]],[R[62]]]],[11,R[57],E,E,60,[[["self"]],[T]]],[11,R[58],E,E,60,[[],[R[8]]]],[11,"into",R[81],E,61,[[],[U]]],[11,"from",E,E,61,[[[T]],[T]]],[11,R[56],E,E,61,[[[U]],[R[8]]]],[11,R[61],E,E,61,[[["self"]],[T]]],[11,R[59],E,E,61,[[["self"]],[R[62]]]],[11,R[57],E,E,61,[[["self"]],[T]]],[11,R[58],E,E,61,[[],[R[8]]]],[11,"into",R[82],E,63,[[],[U]]],[11,"from",E,E,63,[[[T]],[T]]],[11,R[56],E,E,63,[[[U]],[R[8]]]],[11,R[61],E,E,63,[[["self"]],[T]]],[11,R[59],E,E,63,[[["self"]],[R[62]]]],[11,R[57],E,E,63,[[["self"]],[T]]],[11,R[58],E,E,63,[[],[R[8]]]],[11,"into",E,E,62,[[],[U]]],[11,R[54],E,E,62,[[["self"]],[T]]],[11,R[55],E,E,62,[[[T],["self"]]]],[11,"from",E,E,62,[[[T]],[T]]],[11,R[56],E,E,62,[[[U]],[R[8]]]],[11,R[61],E,E,62,[[["self"]],[T]]],[11,R[59],E,E,62,[[["self"]],[R[62]]]],[11,R[57],E,E,62,[[["self"]],[T]]],[11,R[58],E,E,62,[[],[R[8]]]],[11,"into",R[83],E,64,[[],[U]]],[11,R[54],E,E,64,[[["self"]],[T]]],[11,R[55],E,E,64,[[[T],["self"]]]],[11,"from",E,E,64,[[[T]],[T]]],[11,R[56],E,E,64,[[[U]],[R[8]]]],[11,R[61],E,E,64,[[["self"]],[T]]],[11,R[59],E,E,64,[[["self"]],[R[62]]]],[11,R[57],E,E,64,[[["self"]],[T]]],[11,R[58],E,E,64,[[],[R[8]]]],[11,"into",R[84],E,65,[[],[U]]],[11,R[54],E,E,65,[[["self"]],[T]]],[11,R[55],E,E,65,[[[T],["self"]]]],[11,"from",E,E,65,[[[T]],[T]]],[11,R[56],E,E,65,[[[U]],[R[8]]]],[11,R[61],E,E,65,[[["self"]],[T]]],[11,R[59],E,E,65,[[["self"]],[R[62]]]],[11,R[57],E,E,65,[[["self"]],[T]]],[11,R[58],E,E,65,[[],[R[8]]]],[11,"into",R[85],E,66,[[],[U]]],[11,R[54],E,E,66,[[["self"]],[T]]],[11,R[55],E,E,66,[[[T],["self"]]]],[11,"from",E,E,66,[[[T]],[T]]],[11,R[56],E,E,66,[[[U]],[R[8]]]],[11,R[61],E,E,66,[[["self"]],[T]]],[11,R[59],E,E,66,[[["self"]],[R[62]]]],[11,R[57],E,E,66,[[["self"]],[T]]],[11,R[58],E,E,66,[[],[R[8]]]],[11,"into",R[86],E,67,[[],[U]]],[11,"from",E,E,67,[[[T]],[T]]],[11,R[56],E,E,67,[[[U]],[R[8]]]],[11,R[61],E,E,67,[[["self"]],[T]]],[11,R[59],E,E,67,[[["self"]],[R[62]]]],[11,R[57],E,E,67,[[["self"]],[T]]],[11,R[58],E,E,67,[[],[R[8]]]],[11,"into",R[87],E,69,[[],[U]]],[11,"from",E,E,69,[[[T]],[T]]],[11,R[56],E,E,69,[[[U]],[R[8]]]],[11,R[61],E,E,69,[[["self"]],[T]]],[11,R[59],E,E,69,[[["self"]],[R[62]]]],[11,R[57],E,E,69,[[["self"]],[T]]],[11,R[58],E,E,69,[[],[R[8]]]],[11,"into",E,E,68,[[],[U]]],[11,"from",E,E,68,[[[T]],[T]]],[11,R[56],E,E,68,[[[U]],[R[8]]]],[11,R[61],E,E,68,[[["self"]],[T]]],[11,R[59],E,E,68,[[["self"]],[R[62]]]],[11,R[57],E,E,68,[[["self"]],[T]]],[11,R[58],E,E,68,[[],[R[8]]]],[11,"cmp",R[2],E,77,[[["self"],[R[91]]],[R[88]]]],[11,"cmp",E,E,16,[[["self"],[R[97]]],[R[88]]]],[11,"cmp",E,E,73,[[["self"],[R[90]]],[R[88]]]],[11,"cmp",E,E,15,[[[R[92]],["self"]],[R[88]]]],[11,"cmp",R[64],E,74,[[["self"],[R[94]]],[R[88]]]],[11,"cmp",R[2],E,7,[[[R[14]],["self"]],[R[88]]]],[11,"cmp",E,E,75,[[["self"],[R[96]]],[R[88]]]],[11,"cmp",E,E,13,[[["self"],[R[95]]],[R[88]]]],[11,"cmp",R[64],E,17,[[[R[89]],["self"]],[R[88]]]],[11,"cmp",R[2],E,19,[[["self"],[R[34]]],[R[88]]]],[11,"clone",E,E,30,[[["self"]],[R[13]]]],[11,"clone",R[64],E,17,[[["self"]],[R[89]]]],[11,"clone",R[2],E,73,[[["self"]],[R[90]]]],[11,"clone",E,E,71,[[["self"]],[R[11]]]],[11,"clone",R[60],E,72,[[["self"]],[R[134]]]],[11,"clone",R[2],E,77,[[["self"]],[R[91]]]],[11,"clone",E,E,32,[[["self"]],[R[12]]]],[11,"clone",E,E,15,[[["self"]],[R[92]]]],[11,"clone",R[52],E,70,[[["self"]],[R[93]]]],[11,"clone",R[64],E,74,[[["self"]],[R[94]]]],[11,"clone",R[2],E,13,[[["self"]],[R[95]]]],[11,"clone",E,E,19,[[["self"]],[R[34]]]],[11,"clone",E,E,78,[[["self"]],[R[143]]]],[11,"clone",E,E,7,[[["self"]],[R[14]]]],[11,"clone",E,E,75,[[["self"]],[R[96]]]],[11,"clone",E,E,16,[[["self"]],[R[97]]]],[11,R[98],R[64],E,74,[[["self"],[R[13]],[R[34]]],[[R[9]],[R[8],[R[9]]]]]],[11,R[99],R[60],"Log general info",72,[[["str"],["self"],[R[34]]],[[R[9]],[R[8],[R[9]]]]]],[11,R[98],E,"This should be used to log iteration data only (because…",72,[[["self"],[R[13]],[R[34]]],[[R[9]],[R[8],[R[9]]]]]],[11,R[99],R[2],"Initial observation This is called after the…",78,[[["str"],["self"],[R[34]]],[[R[9]],[R[8],[R[9]]]]]],[11,R[98],E,"This is called after every iteration and gets the current…",78,[[["self"],[R[13]],[R[34]]],[[R[9]],[R[8],[R[9]]]]]],[11,R[100],R[64],E,17,[[],[R[89]]]],[11,R[100],R[2],E,73,[[],[R[90]]]],[11,R[100],E,E,78,[[],[R[143]]]],[11,R[100],E,E,19,[[],[R[34]]]],[11,R[100],E,E,30,[[],[R[13]]]],[11,R[100],E,E,71,[[],[R[11]]]],[11,R[100],E,E,16,[[],[R[97]]]],[11,R[100],E,E,75,[[],[R[96]]]],[11,R[100],E,"The default is `Always`",13,[[],[R[95]]]],[11,R[100],E,E,77,[[],[R[91]]]],[11,R[100],E,E,7,[[],[R[14]]]],[11,"fmt",E,E,15,[[[R[101]],["self"]],[[R[8],[R[9]]],[R[9]]]]],[11,"fmt",E,E,75,[[[R[101]],["self"]],[[R[8],[R[9]]],[R[9]]]]],[11,"fmt",E,E,7,[[[R[101]],["self"]],[[R[8],[R[9]]],[R[9]]]]],[11,"fmt",E,E,35,[[[R[101]],["self"]],[[R[8],[R[9]]],[R[9]]]]],[11,"fmt",E,E,16,[[[R[101]],["self"]],[[R[8],[R[9]]],[R[9]]]]],[11,"fmt",E,E,19,[[[R[101]],["self"]],[[R[8],[R[9]]],[R[9]]]]],[11,"fmt",E,E,77,[[[R[101]],["self"]],[[R[8],[R[9]]],[R[9]]]]],[11,"apply",E,E,32,[[["self"]],[[R[9]],[R[8],[R[9]]]]]],[11,R[102],E,E,32,[[["self"]],[[R[9]],[R[8],[R[9]]]]]],[11,R[46],E,E,32,[[["self"]],[[R[8],[R[9]]],[R[9]]]]],[11,"modify",E,E,32,[[["f64"],["self"]],[[R[9]],[R[8],[R[9]]]]]],[11,"apply",E,R[103],77,[[["self"]],[[R[8],[R[9]]],[R[9]]]]],[11,R[102],E,R[103],77,[[["self"]],[[R[9]],[R[8],[R[9]]]]]],[11,R[46],E,R[103],77,[[["self"]],[[R[8],[R[9]]],[R[9]]]]],[11,"modify",E,R[103],77,[[["f64"],["self"]],[[R[9]],[R[8],[R[9]]]]]],[11,"apply",E,R[103],75,[[["self"]],[[R[8],[R[9]]],[R[9]]]]],[11,R[102],E,R[103],75,[[["self"]],[[R[9]],[R[8],[R[9]]]]]],[11,R[46],E,R[103],75,[[["self"]],[[R[9]],[R[8],[R[9]]]]]],[11,"modify",E,R[103],75,[[["f64"],["self"]],[[R[9]],[R[8],[R[9]]]]]],[11,"hash",E,E,7,[[["self"],["__h"]]]],[11,"hash",E,E,19,[[["self"],["__h"]]]],[11,"hash",E,E,75,[[["__htuhj"],["self"]]]],[11,"hash",E,E,16,[[["self"],["__h"]]]],[11,"hash",E,E,77,[[["self"],["__h"]]]],[11,"hash",E,E,73,[[["self"],["__h"]]]],[11,R[104],E,E,75,[[["__s"],["self"]],[R[8]]]],[11,R[104],E,E,13,[[["__s"],["self"]],[R[8]]]],[11,R[104],E,E,15,[[["__s"],["self"]],[R[8]]]],[11,R[104],E,E,7,[[["__s"],["self"]],[R[8]]]],[11,R[104],E,E,16,[[["__s"],["self"]],[R[8]]]],[11,R[104],E,E,19,[[["__s"],["self"]],[R[8]]]],[11,R[104],E,E,77,[[["__s"],["self"]],[R[8]]]],[11,R[104],E,E,73,[[["__s"],["self"]],[R[8]]]],[11,R[104],R[64],E,17,[[["__s"],["self"]],[R[8]]]],[11,R[104],E,E,74,[[["__s"],["self"]],[R[8]]]],[11,R[104],R[52],E,70,[[["__s"],["self"]],[R[8]]]],[11,R[104],R[2],E,32,[[["__s"],["self"]],[R[8]]]],[11,R[104],E,E,71,[[["__s"],["self"]],[R[8]]]],[11,R[104],E,E,30,[[["__s"],["self"]],[R[8]]]],[11,R[104],R[60],E,12,[[["record"],["self"],[R[105]]],[[R[8],[R[9]]],[R[9]]]]],[11,R[104],R[2],E,30,[[["record"],["self"],[R[105]]],[[R[8],[R[9]]],[R[9]]]]],[11,"from_iter",E,E,19,[[["i"]],[R[34]]]],[11,R[106],E,E,75,[[["self"],[R[96]]],[["option",[R[88]]],[R[88]]]]],[11,"lt",E,E,75,[[["self"],[R[96]]],["bool"]]],[11,"le",E,E,75,[[["self"],[R[96]]],["bool"]]],[11,"gt",E,E,75,[[["self"],[R[96]]],["bool"]]],[11,"ge",E,E,75,[[["self"],[R[96]]],["bool"]]],[11,R[106],E,E,7,[[[R[14]],["self"]],[["option",[R[88]]],[R[88]]]]],[11,R[106],E,E,13,[[["self"],[R[95]]],[["option",[R[88]]],[R[88]]]]],[11,"lt",E,E,13,[[["self"],[R[95]]],["bool"]]],[11,"le",E,E,13,[[["self"],[R[95]]],["bool"]]],[11,"gt",E,E,13,[[["self"],[R[95]]],["bool"]]],[11,"ge",E,E,13,[[["self"],[R[95]]],["bool"]]],[11,R[106],E,E,73,[[["self"],[R[90]]],[["option",[R[88]]],[R[88]]]]],[11,"lt",E,E,73,[[["self"],[R[90]]],["bool"]]],[11,"le",E,E,73,[[["self"],[R[90]]],["bool"]]],[11,"gt",E,E,73,[[["self"],[R[90]]],["bool"]]],[11,"ge",E,E,73,[[["self"],[R[90]]],["bool"]]],[11,R[106],R[64],E,74,[[["self"],[R[94]]],[["option",[R[88]]],[R[88]]]]],[11,"lt",E,E,74,[[["self"],[R[94]]],["bool"]]],[11,"le",E,E,74,[[["self"],[R[94]]],["bool"]]],[11,"gt",E,E,74,[[["self"],[R[94]]],["bool"]]],[11,"ge",E,E,74,[[["self"],[R[94]]],["bool"]]],[11,R[106],R[2],E,77,[[["self"],[R[91]]],[["option",[R[88]]],[R[88]]]]],[11,R[106],E,E,15,[[[R[92]],["self"]],[["option",[R[88]]],[R[88]]]]],[11,R[106],R[64],E,17,[[[R[89]],["self"]],[["option",[R[88]]],[R[88]]]]],[11,R[106],R[2],E,19,[[["self"],[R[34]]],[["option",[R[88]]],[R[88]]]]],[11,"lt",E,E,19,[[["self"],[R[34]]],["bool"]]],[11,"le",E,E,19,[[["self"],[R[34]]],["bool"]]],[11,"gt",E,E,19,[[["self"],[R[34]]],["bool"]]],[11,"ge",E,E,19,[[["self"],[R[34]]],["bool"]]],[11,R[106],E,E,16,[[["self"],[R[97]]],[["option",[R[88]]],[R[88]]]]],[11,"lt",E,E,16,[[["self"],[R[97]]],["bool"]]],[11,"le",E,E,16,[[["self"],[R[97]]],["bool"]]],[11,"gt",E,E,16,[[["self"],[R[97]]],["bool"]]],[11,"ge",E,E,16,[[["self"],[R[97]]],["bool"]]],[11,"from",R[60],E,12,[[[R[34]]],["argminslogkv"]]],[11,R[107],R[2],E,7,[[["__d"]],[[R[14]],[R[8],[R[14]]]]]],[11,R[107],E,E,32,[[["__d"]],[[R[12]],[R[8],[R[12]]]]]],[11,R[107],E,E,15,[[["__d"]],[[R[92]],[R[8],[R[92]]]]]],[11,R[107],E,E,13,[[["__d"]],[[R[8],[R[95]]],[R[95]]]]],[11,R[107],E,E,75,[[["__d"]],[[R[96]],[R[8],[R[96]]]]]],[11,R[107],E,E,19,[[["__d"]],[[R[34]],[R[8],[R[34]]]]]],[11,R[107],R[52],E,70,[[["__d"]],[[R[93]],[R[8],[R[93]]]]]],[11,R[107],R[64],E,74,[[["__d"]],[[R[8],[R[94]]],[R[94]]]]],[11,R[107],R[2],E,77,[[["__d"]],[[R[8],[R[91]]],[R[91]]]]],[11,R[107],E,E,30,[[["__d"]],[[R[13]],[R[8],[R[13]]]]]],[11,R[107],R[64],E,17,[[["__d"]],[[R[8],[R[89]]],[R[89]]]]],[11,R[107],R[2],E,73,[[["__d"]],[[R[8],[R[90]]],[R[90]]]]],[11,R[107],E,E,16,[[["__d"]],[[R[8],[R[97]]],[R[97]]]]],[11,"eq",E,E,19,[[["self"],[R[34]]],["bool"]]],[11,"ne",E,E,19,[[["self"],[R[34]]],["bool"]]],[11,"eq",R[64],E,17,[[[R[89]],["self"]],["bool"]]],[11,"eq",R[2],E,16,[[["self"],[R[97]]],["bool"]]],[11,"ne",E,E,16,[[["self"],[R[97]]],["bool"]]],[11,"eq",E,E,73,[[["self"],[R[90]]],["bool"]]],[11,"ne",E,E,73,[[["self"],[R[90]]],["bool"]]],[11,"eq",R[64],E,74,[[["self"],[R[94]]],["bool"]]],[11,"ne",E,E,74,[[["self"],[R[94]]],["bool"]]],[11,"eq",R[2],E,15,[[[R[92]],["self"]],["bool"]]],[11,"eq",E,E,13,[[["self"],[R[95]]],["bool"]]],[11,"ne",E,E,13,[[["self"],[R[95]]],["bool"]]],[11,"eq",E,E,75,[[["self"],[R[96]]],["bool"]]],[11,"ne",E,E,75,[[["self"],[R[96]]],["bool"]]],[11,"eq",E,E,77,[[["self"],[R[91]]],["bool"]]],[11,"eq",E,E,7,[[[R[14]],["self"]],["bool"]]],[11,"extend",E,E,19,[[["self"],["i"]]]],[11,"fmt",E,E,19,[[[R[101]],["self"]],[[R[8],[R[9]]],[R[9]]]]],[11,"fmt",R[64],E,17,[[[R[101]],["self"]],[[R[8],[R[9]]],[R[9]]]]],[11,"fmt",R[2],E,30,[[[R[101]],["self"]],[[R[8],[R[9]]],[R[9]]]]],[11,"fmt",E,E,13,[[[R[101]],["self"]],[[R[8],[R[9]]],[R[9]]]]],[11,"fmt",E,E,71,[[[R[101]],["self"]],[[R[8],[R[9]]],[R[9]]]]],[11,"fmt",R[64],E,74,[[[R[101]],["self"]],[[R[8],[R[9]]],[R[9]]]]],[11,"fmt",R[2],E,77,[[[R[101]],["self"]],[[R[8],[R[9]]],[R[9]]]]],[11,"fmt",E,E,35,[[[R[101]],["self"]],[[R[8],[R[9]]],[R[9]]]]],[11,"fmt",E,E,7,[[[R[101]],["self"]],[[R[8],[R[9]]],[R[9]]]]],[11,"fmt",E,E,75,[[[R[101]],["self"]],[[R[8],[R[9]]],[R[9]]]]],[11,"fmt",E,E,16,[[[R[101]],["self"]],[[R[8],[R[9]]],[R[9]]]]],[11,"fmt",E,E,73,[[[R[101]],["self"]],[[R[8],[R[9]]],[R[9]]]]],[11,"fmt",E,E,32,[[[R[101]],["self"]],[[R[8],[R[9]]],[R[9]]]]],[11,"name",E,E,35,[[["self"]],[["str"],["option",["str"]]]]],[11,"cause",E,E,35,[[["self"]],[["option",["fail"]],["fail"]]]],[11,R[108],E,E,35,[[["self"]],[[R[108]],["option",[R[108]]]]]],[11,"as_ref",E,E,76,[[["self"]],["fail"]]],[11,"from",E,E,76,[[["f"]],[R[9]]]],[11,"as_fail",E,E,76,[[["self"]],["fail"]]],[11,"fmt",E,E,76,[[[R[101]],["self"]],[[R[8],[R[9]]],[R[9]]]]],[11,"fmt",E,E,76,[[[R[101]],["self"]],[[R[8],[R[9]]],[R[9]]]]],[11,"clone",R[53],E,1,[[["self"]],[R[109]]]],[11,R[100],E,E,1,[[],[R[109]]]],[11,"eval",R[72],E,49,[[["f64"],["self"],[T]],["bool"]]],[11,R[110],E,E,49,[[["self"]],["bool"]]],[11,"eval",E,E,50,[[["f64"],["self"],[T]],["bool"]]],[11,R[110],E,E,50,[[["self"]],["bool"]]],[11,"eval",E,E,51,[[["f64"],["self"],[T]],["bool"]]],[11,R[110],E,E,51,[[["self"]],["bool"]]],[11,"eval",E,E,52,[[["f64"],["self"],[T]],["bool"]]],[11,R[110],E,E,52,[[["self"]],["bool"]]],[11,R[106],R[68],E,41,[[["self"],[R[113]]],[["option",[R[88]]],[R[88]]]]],[11,R[106],E,E,42,[[["self"],[R[114]]],[["option",[R[88]]],[R[88]]]]],[11,R[106],E,E,43,[[[R[115]],["self"]],[["option",[R[88]]],[R[88]]]]],[11,R[106],E,E,44,[[[R[116]],["self"]],[["option",[R[88]]],[R[88]]]]],[11,R[106],R[83],E,64,[[["self"],[R[111]]],[["option",[R[88]]],[R[88]]]]],[11,"lt",E,E,64,[[["self"],[R[111]]],["bool"]]],[11,"le",E,E,64,[[["self"],[R[111]]],["bool"]]],[11,"gt",E,E,64,[[["self"],[R[111]]],["bool"]]],[11,"ge",E,E,64,[[["self"],[R[111]]],["bool"]]],[11,R[106],R[84],E,65,[[["dogleg"],["self"]],[["option",[R[88]]],[R[88]]]]],[11,"lt",E,E,65,[[["dogleg"],["self"]],["bool"]]],[11,"le",E,E,65,[[["dogleg"],["self"]],["bool"]]],[11,"gt",E,E,65,[[["dogleg"],["self"]],["bool"]]],[11,"ge",E,E,65,[[["dogleg"],["self"]],["bool"]]],[11,R[106],R[85],E,66,[[["self"],[R[112]]],[["option",[R[88]]],[R[88]]]]],[11,"lt",E,E,66,[[["self"],[R[112]]],["bool"]]],[11,"le",E,E,66,[[["self"],[R[112]]],["bool"]]],[11,"gt",E,E,66,[[["self"],[R[112]]],["bool"]]],[11,"ge",E,E,66,[[["self"],[R[112]]],["bool"]]],[11,R[100],R[68],E,41,[[],[R[113]]]],[11,R[100],E,E,42,[[],[R[114]]]],[11,R[100],E,E,43,[[],[R[115]]]],[11,R[100],E,E,44,[[],[R[116]]]],[11,R[100],R[72],E,49,[[],[R[119]]]],[11,R[100],E,E,50,[[],[R[120]]]],[11,R[100],E,E,51,[[],[R[121]]]],[11,R[100],E,E,52,[[],[R[122]]]],[11,R[100],R[73],E,53,[[],["self"]]],[11,R[100],R[74],E,54,[[],["self"]]],[11,R[100],R[76],E,56,[[],["newton"]]],[11,R[100],R[82],E,62,[[],["self"]]],[11,R[100],R[83],E,64,[[],[R[111]]]],[11,R[100],R[84],E,65,[[],["dogleg"]]],[11,R[100],R[85],E,66,[[],[R[112]]]],[11,"eq",R[68],E,41,[[["self"],[R[113]]],["bool"]]],[11,"eq",E,E,42,[[["self"],[R[114]]],["bool"]]],[11,"eq",E,E,43,[[[R[115]],["self"]],["bool"]]],[11,"eq",E,E,44,[[[R[116]],["self"]],["bool"]]],[11,"eq",R[83],E,64,[[["self"],[R[111]]],["bool"]]],[11,"ne",E,E,64,[[["self"],[R[111]]],["bool"]]],[11,"eq",R[84],E,65,[[["dogleg"],["self"]],["bool"]]],[11,"ne",E,E,65,[[["dogleg"],["self"]],["bool"]]],[11,"eq",R[85],E,66,[[["self"],[R[112]]],["bool"]]],[11,"ne",E,E,66,[[["self"],[R[112]]],["bool"]]],[11,"clone",R[66],E,39,[[["self"]],[R[117]]]],[11,"clone",R[68],E,41,[[["self"]],[R[113]]]],[11,"clone",E,E,42,[[["self"]],[R[114]]]],[11,"clone",E,E,43,[[["self"]],[R[115]]]],[11,"clone",E,E,44,[[["self"]],[R[116]]]],[11,"clone",R[70],E,46,[[["self"]],[R[118]]]],[11,"clone",R[71],E,47,[[["self"]],["backtrackinglinesearch"]]],[11,"clone",R[72],E,49,[[["self"]],[R[119]]]],[11,"clone",E,E,50,[[["self"]],[R[120]]]],[11,"clone",E,E,51,[[["self"]],[R[121]]]],[11,"clone",E,E,52,[[["self"]],[R[122]]]],[11,"clone",R[73],E,53,[[["self"]],["hagerzhanglinesearch"]]],[11,"clone",R[74],E,54,[[["self"]],["morethuentelinesearch"]]],[11,"clone",R[82],E,62,[[["self"]],[R[123]]]],[11,"clone",R[83],E,64,[[["self"]],[R[111]]]],[11,"clone",R[84],E,65,[[["self"]],["dogleg"]]],[11,"clone",R[85],E,66,[[["self"]],[R[112]]]],[11,"cmp",R[68],E,41,[[["self"],[R[113]]],[R[88]]]],[11,"cmp",E,E,42,[[["self"],[R[114]]],[R[88]]]],[11,"cmp",E,E,43,[[[R[115]],["self"]],[R[88]]]],[11,"cmp",E,E,44,[[[R[116]],["self"]],[R[88]]]],[11,"fmt",E,E,41,[[[R[101]],["self"]],[R[8]]]],[11,"fmt",E,E,42,[[[R[101]],["self"]],[R[8]]]],[11,"fmt",E,E,43,[[[R[101]],["self"]],[R[8]]]],[11,"fmt",E,E,44,[[[R[101]],["self"]],[R[8]]]],[11,"fmt",R[72],E,49,[[[R[101]],["self"]],[R[8]]]],[11,"fmt",E,E,50,[[[R[101]],["self"]],[R[8]]]],[11,"fmt",E,E,51,[[[R[101]],["self"]],[R[8]]]],[11,"fmt",E,E,52,[[[R[101]],["self"]],[R[8]]]],[11,"fmt",R[82],E,62,[[[R[101]],["self"]],[R[8]]]],[11,"fmt",R[83],E,64,[[[R[101]],["self"]],[R[8]]]],[11,"fmt",R[84],E,65,[[[R[101]],["self"]],[R[8]]]],[11,"fmt",R[85],E,66,[[[R[101]],["self"]],[R[8]]]],[11,"hash",R[68],E,41,[[["self"],["__h"]]]],[11,"hash",E,E,42,[[["self"],["__h"]]]],[11,"hash",E,E,43,[[["self"],["__h"]]]],[11,"hash",E,E,44,[[["self"],["__h"]]]],[11,"init",R[66],E,39,[[[R[12]],["self"],[R[13]]],[[R[9]],[R[8],["option",R[9]]],["option",[R[11]]]]]],[11,R[124],E,R[126],39,[[[R[12]],["self"],[R[13]]],[[R[11]],[R[9]],[R[8],[R[11],R[9]]]]]],[11,"init",R[67],E,40,[[[R[12]],["self"],[R[13]]],[[R[9]],[R[8],["option",R[9]]],["option",[R[11]]]]]],[11,R[124],E,E,40,[[[R[12]],["self"],[R[13]]],[[R[11]],[R[9]],[R[8],[R[11],R[9]]]]]],[11,R[124],R[69],E,45,[[[R[12]],["self"],[R[13]]],[[R[11]],[R[9]],[R[8],[R[11],R[9]]]]]],[11,R[124],R[70],E,46,[[[R[12]],["self"],[R[13]]],[[R[11]],[R[9]],[R[8],[R[11],R[9]]]]]],[11,"init",R[71],E,47,[[[R[12]],["self"],[R[13]]],[[R[9]],[R[8],["option",R[9]]],["option",[R[11]]]]]],[11,R[124],E,E,47,[[[R[12]],["self"],[R[13]]],[[R[11]],[R[9]],[R[8],[R[11],R[9]]]]]],[11,R[125],E,E,47,[[["self"],[R[13]]],[R[14]]]],[11,"init",R[73],E,53,[[[R[12]],["self"],[R[13]]],[[R[9]],[R[8],["option",R[9]]],["option",[R[11]]]]]],[11,R[124],E,E,53,[[[R[12]],["self"],[R[13]]],[[R[11]],[R[9]],[R[8],[R[11],R[9]]]]]],[11,R[125],E,E,53,[[["self"],[R[13]]],[R[14]]]],[11,"init",R[74],E,54,[[[R[12]],["self"],[R[13]]],[[R[9]],[R[8],["option",R[9]]],["option",[R[11]]]]]],[11,R[124],E,E,54,[[[R[12]],["self"],[R[13]]],[[R[11]],[R[9]],[R[8],[R[11],R[9]]]]]],[11,R[124],R[75],E,55,[[[R[12]],["self"],[R[13]]],[[R[11]],[R[9]],[R[8],[R[11],R[9]]]]]],[11,R[125],E,E,55,[[["self"],[R[13]]],[R[14]]]],[11,R[124],R[76],E,56,[[[R[12]],["self"],[R[13]]],[[R[11]],[R[9]],[R[8],[R[11],R[9]]]]]],[11,"init",R[77],E,57,[[[R[12]],["self"],[R[13]]],[[R[9]],[R[8],["option",R[9]]],["option",[R[11]]]]]],[11,R[124],E,E,57,[[[R[12]],["self"],[R[13]]],[[R[11]],[R[9]],[R[8],[R[11],R[9]]]]]],[11,R[125],E,E,57,[[["self"],[R[13]]],[R[14]]]],[11,"init",R[78],E,58,[[[R[12]],["self"],[R[13]]],[[R[9]],[R[8],["option",R[9]]],["option",[R[11]]]]]],[11,R[124],E,E,58,[[[R[12]],["self"],[R[13]]],[[R[11]],[R[9]],[R[8],[R[11],R[9]]]]]],[11,R[125],E,E,58,[[["self"],[R[13]]],[R[14]]]],[11,"init",R[79],E,59,[[[R[12]],["self"],[R[13]]],[[R[9]],[R[8],["option",R[9]]],["option",[R[11]]]]]],[11,R[124],E,E,59,[[[R[12]],["self"],[R[13]]],[[R[11]],[R[9]],[R[8],[R[11],R[9]]]]]],[11,R[125],E,E,59,[[["self"],[R[13]]],[R[14]]]],[11,"init",R[80],E,60,[[[R[12]],["self"],[R[13]]],[[R[9]],[R[8],["option",R[9]]],["option",[R[11]]]]]],[11,R[124],E,E,60,[[[R[12]],["self"],[R[13]]],[[R[11]],[R[9]],[R[8],[R[11],R[9]]]]]],[11,R[125],E,E,60,[[["self"],[R[13]]],[R[14]]]],[11,"init",R[81],E,61,[[[R[12]],["self"],[R[13]]],[[R[9]],[R[8],["option",R[9]]],["option",[R[11]]]]]],[11,R[124],E,E,61,[[[R[12]],["self"],[R[13]]],[[R[11]],[R[9]],[R[8],[R[11],R[9]]]]]],[11,R[125],E,E,61,[[["self"],[R[13]]],[R[14]]]],[11,"init",R[82],E,63,[[[R[12]],["self"],[R[13]]],[[R[9]],[R[8],["option",R[9]]],["option",[R[11]]]]]],[11,R[124],E,R[126],63,[[[R[12]],["self"],[R[13]]],[[R[11]],[R[9]],[R[8],[R[11],R[9]]]]]],[11,R[125],E,E,63,[[["self"],[R[13]]],[R[14]]]],[11,R[124],R[83],E,64,[[[R[12]],["self"],[R[13]]],[[R[11]],[R[9]],[R[8],[R[11],R[9]]]]]],[11,R[125],E,E,64,[[["self"],[R[13]]],[R[14]]]],[11,R[124],R[84],E,65,[[[R[12]],["self"],[R[13]]],[[R[11]],[R[9]],[R[8],[R[11],R[9]]]]]],[11,R[125],E,E,65,[[["self"],[R[13]]],[R[14]]]],[11,"init",R[85],E,66,[[[R[12]],["self"],[R[13]]],[[R[9]],[R[8],["option",R[9]]],["option",[R[11]]]]]],[11,R[124],E,E,66,[[[R[12]],["self"],[R[13]]],[[R[11]],[R[9]],[R[8],[R[11],R[9]]]]]],[11,R[125],E,E,66,[[["self"],[R[13]]],[R[14]]]],[11,"init",R[86],E,67,[[[R[12]],["self"],[R[13]]],[[R[9]],[R[8],["option",R[9]]],["option",[R[11]]]]]],[11,R[124],E,E,67,[[[R[12]],["self"],[R[13]]],[[R[11]],[R[9]],[R[8],[R[11],R[9]]]]]],[11,R[125],E,E,67,[[["self"],[R[13]]],[R[14]]]],[11,R[124],R[87],"Perform one iteration of algorithm",69,[[[R[12]],["self"],[R[13]]],[[R[11]],[R[9]],[R[8],[R[11],R[9]]]]]],[11,R[104],R[66],E,39,[[["__s"],["self"]],[R[8]]]],[11,R[104],R[67],E,40,[[["__s"],["self"]],[R[8]]]],[11,R[104],R[68],E,41,[[["__s"],["self"]],[R[8]]]],[11,R[104],E,E,42,[[["__s"],["self"]],[R[8]]]],[11,R[104],E,E,43,[[["__s"],["self"]],[R[8]]]],[11,R[104],E,E,44,[[["__s"],["self"]],[R[8]]]],[11,R[104],R[69],E,45,[[["__s"],["self"]],[R[8]]]],[11,R[104],R[70],E,46,[[["__s"],["self"]],[R[8]]]],[11,R[104],R[71],E,47,[[["__s"],["self"]],[R[8]]]],[11,R[104],R[72],E,49,[[["__s"],["self"]],[R[8]]]],[11,R[104],E,E,50,[[["__s"],["self"]],[R[8]]]],[11,R[104],E,E,51,[[["__s"],["self"]],[R[8]]]],[11,R[104],E,E,52,[[["__s"],["self"]],[R[8]]]],[11,R[104],R[73],E,53,[[["__s"],["self"]],[R[8]]]],[11,R[104],R[74],E,54,[[["__s"],["self"]],[R[8]]]],[11,R[104],R[75],E,55,[[["__s"],["self"]],[R[8]]]],[11,R[104],R[76],E,56,[[["__s"],["self"]],[R[8]]]],[11,R[104],R[77],E,57,[[["__s"],["self"]],[R[8]]]],[11,R[104],R[78],E,58,[[["__s"],["self"]],[R[8]]]],[11,R[104],R[79],E,59,[[["__s"],["self"]],[R[8]]]],[11,R[104],R[80],E,60,[[["__s"],["self"]],[R[8]]]],[11,R[104],R[81],E,61,[[["__s"],["self"]],[R[8]]]],[11,R[104],R[82],E,62,[[["__s"],["self"]],[R[8]]]],[11,R[104],E,E,63,[[["__s"],["self"]],[R[8]]]],[11,R[104],R[83],E,64,[[["__s"],["self"]],[R[8]]]],[11,R[104],R[84],E,65,[[["__s"],["self"]],[R[8]]]],[11,R[104],R[85],E,66,[[["__s"],["self"]],[R[8]]]],[11,R[104],R[86],E,67,[[["__s"],["self"]],[R[8]]]],[11,R[104],R[87],E,69,[[["__s"],["self"]],[R[8]]]],[11,R[104],E,E,68,[[["__s"],["self"]],[R[8]]]],[11,R[107],R[66],E,39,[[["__d"]],[R[8]]]],[11,R[107],R[67],E,40,[[["__d"]],[R[8]]]],[11,R[107],R[68],E,41,[[["__d"]],[R[8]]]],[11,R[107],E,E,42,[[["__d"]],[R[8]]]],[11,R[107],E,E,43,[[["__d"]],[R[8]]]],[11,R[107],E,E,44,[[["__d"]],[R[8]]]],[11,R[107],R[69],E,45,[[["__d"]],[R[8]]]],[11,R[107],R[70],E,46,[[["__d"]],[R[8]]]],[11,R[107],R[71],E,47,[[["__d"]],[R[8]]]],[11,R[107],R[72],E,49,[[["__d"]],[R[8]]]],[11,R[107],E,E,50,[[["__d"]],[R[8]]]],[11,R[107],E,E,51,[[["__d"]],[R[8]]]],[11,R[107],E,E,52,[[["__d"]],[R[8]]]],[11,R[107],R[73],E,53,[[["__d"]],[R[8]]]],[11,R[107],R[74],E,54,[[["__d"]],[R[8]]]],[11,R[107],R[75],E,55,[[["__d"]],[R[8]]]],[11,R[107],R[76],E,56,[[["__d"]],[R[8]]]],[11,R[107],R[77],E,57,[[["__d"]],[R[8]]]],[11,R[107],R[78],E,58,[[["__d"]],[R[8]]]],[11,R[107],R[79],E,59,[[["__d"]],[R[8]]]],[11,R[107],R[80],E,60,[[["__d"]],[R[8]]]],[11,R[107],R[81],E,61,[[["__d"]],[R[8]]]],[11,R[107],R[82],E,62,[[["__d"]],[R[8]]]],[11,R[107],E,E,63,[[["__d"]],[R[8]]]],[11,R[107],R[83],E,64,[[["__d"]],[R[8]]]],[11,R[107],R[84],E,65,[[["__d"]],[R[8]]]],[11,R[107],R[85],E,66,[[["__d"]],[R[8]]]],[11,R[107],R[86],E,67,[[["__d"]],[R[8]]]],[11,R[107],R[87],E,69,[[["__d"]],[R[8]]]],[11,R[107],E,E,68,[[["__d"]],[R[8]]]],[11,R[127],R[71],R[129],47,[[["self"],["p"]]]],[11,R[128],E,R[130],47,[[["self"],["f64"]],[[R[9]],[R[8],[R[9]]]]]],[11,R[127],R[73],R[129],53,[[["self"],["p"]]]],[11,R[128],E,R[130],53,[[["self"],["f64"]],[[R[9]],[R[8],[R[9]]]]]],[11,R[127],R[74],R[129],54,[[["self"],["p"]]]],[11,R[128],E,R[130],54,[[["self"],["f64"]],[[R[9]],[R[8],[R[9]]]]]],[11,R[131],R[83],E,64,[[["self"],["f64"]]]],[11,R[131],R[84],E,65,[[["self"],["f64"]]]],[11,R[131],R[85],E,66,[[["self"],["f64"]]]],[11,"update",R[68],E,41,[[[T],["self"]],["f64"]]],[11,"update",E,E,42,[[[T],["self"]],["f64"]]],[11,"update",E,E,43,[[[T],["self"]],["f64"]]],[11,"update",E,E,44,[[[T],["self"]],["f64"]]],[11,"new",R[52],E,70,[[["o"],["s"]],[R[93]]]],[11,"from_checkpoint",E,E,70,[[["p"]],[[R[8],[R[93],R[9]]],[R[93]],[R[9]]]]],[11,"run",E,E,70,[[],[[R[8],[R[92],R[9]]],[R[9]],[R[92]]]]],[11,"add_observer",E,"Attaches a observer which implements `ArgminLog` to the…",70,[[["obs"],[R[95]]],[R[93]]]],[11,R[48],E,"Set maximum number of iterations",70,[[["u64"]],[R[93]]]],[11,R[132],E,"Set target cost value",70,[[["f64"]],[R[93]]]],[11,"cost",E,"Set cost value",70,[[["f64"]],[R[93]]]],[11,"grad",E,"Set Gradient",70,[[],[R[93]]]],[11,R[46],E,"Set Hessian",70,[[],[R[93]]]],[11,"checkpoint_dir",E,"Set checkpoint directory",70,[[["str"]],[R[93]]]],[11,"checkpoint_name",E,"Set checkpoint name",70,[[["str"]],[R[93]]]],[11,"checkpoint_mode",E,E,70,[[[R[97]]],[R[93]]]],[11,"ctrlc",E,"Turn Ctrl-C handling on or off (default: on)",70,[[["bool"]],[R[93]]]],[11,"new",R[53],"Create a new empty `PerturbationVector`",1,[[],[R[109]]]],[11,"add",E,"Add an index `x_idx` and the corresponding function…",1,[[["vec",["usize"]],["usize"]],[R[109]]]],[11,"new",R[2],R[38],71,[[],[R[11]]]],[11,"param",E,"Set parameter vector",71,[[],[R[11]]]],[11,"cost",E,"Set cost function value",71,[[["f64"]],[R[11]]]],[11,"grad",E,"Set gradient",71,[[],[R[11]]]],[11,R[46],E,"Set hessian",71,[[],[R[11]]]],[11,"kv",E,"Adds an `ArgminKV`",71,[[[R[34]]],[R[11]]]],[11,R[133],E,"Set termination reason",71,[[[R[14]]],[R[11]]]],[11,R[139],E,"Get parameter vector",71,[[["self"]],["option"]]],[11,"get_cost",E,"Get cost function value",71,[[["self"]],[["option",["f64"]],["f64"]]]],[11,"get_grad",E,"Get gradient",71,[[["self"]],["option"]]],[11,R[141],E,"Get hessian",71,[[["self"]],["option"]]],[11,R[140],E,"Get termination reason",71,[[["self"]],[[R[14]],["option",[R[14]]]]]],[11,"get_kv",E,"Return KV",71,[[["self"]],[R[34]]]],[11,R[142],E,"Returns `true` if a solver terminated and `false` otherwise",7,[[],["bool"]]],[11,"text",E,"Returns a texual representation of what happened",7,[[["self"]],["str"]]],[11,"term",R[60],"Log to the terminal in a blocking way",72,[[],[R[134]]]],[11,"term_noblock",E,"Log to the terminal in a non-blocking way (in case of…",72,[[],[R[134]]]],[11,"file",E,"Log JSON to a file in a blocking way",72,[[["str"]],[[R[9]],[R[134]],[R[8],[R[134],R[9]]]]]],[11,"file_noblock",E,"Log JSON to a file in a non-blocking way (in case of…",72,[[["str"]],[[R[9]],[R[134]],[R[8],[R[134],R[9]]]]]],[11,"new",R[2],E,73,[[["str"],[R[97]]],[[R[8],[R[90],R[9]]],[R[90]],[R[9]]]]],[11,"set_dir",E,E,73,[[["str"],["self"]]]],[11,"dir",E,E,73,[[["self"]],[R[65]]]],[11,"set_name",E,E,73,[[["str"],["self"]]]],[11,"name",E,E,73,[[["self"]],[R[65]]]],[11,"set_mode",E,E,73,[[["self"],[R[97]]]]],[11,"store",E,E,73,[[[R[65]],[T],["self"]],[[R[9]],[R[8],[R[9]]]]]],[11,"store_cond",E,E,73,[[[T],["self"],["u64"]],[[R[9]],[R[8],[R[9]]]]]],[11,"new",E,R[38],15,[[["o"],[R[13]]],[R[92]]]],[11,"new",R[64],E,74,[[["str"]],[R[94]]]],[11,R[105],E,E,74,[[[R[89]]],[R[94]]]],[11,"new",R[2],R[38],75,[[],[R[96]]]],[11,"new",E,R[38],19,[[],[R[34]]]],[11,"push",E,"Push a key-value pair to the `kv` vector.",19,[[["self"],[T],["str"]],[R[34]]]],[11,"merge",E,"Merge another `kv` into `self.kv`",19,[[[R[34]]],[R[34]]]],[11,"new",R[24],E,23,[[["e"],["l"],["p"]],[R[21]]]],[11,"from_boxed_compat",R[2],"Creates an `Error` from `Box<std::error::Error>`.",76,[[["box",[R[9]]],[R[9]]],[R[9]]]],[11,"as_fail",E,"Return a reference to the underlying failure that this…",76,[[["self"]],["fail"]]],[11,"name",E,"Returns the name of the underlying fail.",76,[[["self"]],[["str"],["option",["str"]]]]],[11,"cause",E,"Returns a reference to the underlying cause of this…",76,[[["self"]],["fail"]]],[11,R[108],E,"Gets a reference to the `Backtrace` for this `Error`.",76,[[["self"]],[R[108]]]],[11,"context",E,"Provides context for this `Error`.",76,[[["d"]],["context"]]],[11,"compat",E,"Wraps `Error` in a compatibility type.",76,[[],[["compat",[R[9]]],[R[9]]]]],[11,"downcast",E,R[135],76,[[],[[R[9]],[R[8],[R[9]]]]]],[11,"find_root_cause",E,"Returns the \"root cause\" of this error - the last value in…",76,[[["self"]],["fail"]]],[11,"iter_causes",E,"Returns a iterator over the causes of this error with the…",76,[[["self"]],["causes"]]],[11,"iter_chain",E,"Returns a iterator over all fails up the chain from the…",76,[[["self"]],["causes"]]],[11,"downcast_ref",E,R[135],76,[[["self"]],[[T],["option"]]]],[11,"downcast_mut",E,R[135],76,[[["self"]],[["option"],[T]]]],[11,"root_cause",E,"Deprecated alias to `find_root_cause`.",76,[[["self"]],["fail"]]],[11,"causes",E,"Deprecated alias to `iter_causes`.",76,[[["self"]],["causes"]]],[11,"new",E,R[38],77,[[],[R[91]]]],[11,"new",E,"Create new IterState from `param`",30,[[],[R[13]]]],[11,"param",E,"Set parameter vector. This shifts the stored parameter…",30,[[["self"]],[R[13]]]],[11,R[136],E,"Set best paramater vector. This shifts the stored best…",30,[[["self"]],[R[13]]]],[11,"cost",E,"Set the current cost function value. This shifts the…",30,[[["self"],["f64"]],[R[13]]]],[11,R[137],E,"Set the current best cost function value. This shifts the…",30,[[["self"],["f64"]],[R[13]]]],[11,"grad",E,"Set gradient. This shifts the stored gradient to the…",30,[[["self"]],[R[13]]]],[11,R[46],E,"Set Hessian. This shifts the stored Hessian to the…",30,[[["self"]],[R[13]]]],[11,R[132],E,E,30,[[["self"],["f64"]],[R[13]]]],[11,R[48],E,E,30,[[["self"],["u64"]],[R[13]]]],[11,R[138],E,E,30,[[["self"],["u64"]],[R[13]]]],[11,R[133],E,E,30,[[["self"],[R[14]]],[R[13]]]],[11,"time",E,E,30,[[["duration"],["self"]],[R[13]]]],[11,R[139],E,E,30,[[["self"]]]],[11,"get_prev_param",E,E,30,[[["self"]]]],[11,"get_best_param",E,E,30,[[["self"]]]],[11,"get_prev_best_param",E,E,30,[[["self"]]]],[11,"get_cost",E,E,30,[[["self"]],["f64"]]],[11,"get_prev_cost",E,E,30,[[["self"]],["f64"]]],[11,"get_best_cost",E,E,30,[[["self"]],["f64"]]],[11,"get_prev_best_cost",E,E,30,[[["self"]],["f64"]]],[11,"get_target_cost",E,E,30,[[["self"]],["f64"]]],[11,"get_cost_func_count",E,E,30,[[["self"]],["u64"]]],[11,"get_grad_func_count",E,E,30,[[["self"]],["u64"]]],[11,"get_hessian_func_count",E,E,30,[[["self"]],["u64"]]],[11,"get_modify_func_count",E,E,30,[[["self"]],["u64"]]],[11,"get_last_best_iter",E,E,30,[[["self"]],["u64"]]],[11,R[140],E,E,30,[[["self"]],[R[14]]]],[11,"get_time",E,E,30,[[["self"]],["duration"]]],[11,"get_grad",E,E,30,[[["self"]],["option"]]],[11,"get_prev_grad",E,E,30,[[["self"]],["option"]]],[11,R[141],E,E,30,[[["self"]],["option"]]],[11,"get_prev_hessian",E,E,30,[[["self"]],["option"]]],[11,"get_iter",E,E,30,[[["self"]],["u64"]]],[11,"get_max_iters",E,E,30,[[["self"]],["u64"]]],[11,"increment_iter",E,"Increment the number of iterations by one",30,[[["self"]]]],[11,"increment_func_counts",E,"Increment all function evaluation counts by the evaluation…",30,[[["self"],[R[12]]]]],[11,"set_func_counts",E,"Set all function evaluation counts to the evaluation…",30,[[["self"],[R[12]]]]],[11,"increment_cost_func_count",E,"Increment cost function evaluation count by `num`",30,[[["self"],["u64"]]]],[11,"increment_grad_func_count",E,"Increment gradient function evaluation count by `num`",30,[[["self"],["u64"]]]],[11,"increment_hessian_func_count",E,"Increment Hessian function evaluation count by `num`",30,[[["self"],["u64"]]]],[11,"increment_modify_func_count",E,"Increment modify function evaluation count by `num`",30,[[["self"],["u64"]]]],[11,"new_best",E,"Indicate that a new best parameter vector was found",30,[[["self"]]]],[11,"is_best",E,"Returns whether the current parameter vector is also the…",30,[[["self"]],["bool"]]],[11,R[142],E,"Return whether the algorithm has terminated or not",30,[[["self"]],["bool"]]],[11,"new",E,R[38],78,[[],[R[143]]]],[11,"push",E,"Push another `Observe` to the `observer` field",78,[[["obs"],["self"],[R[95]]],[R[143]]]],[11,"new",E,R[38],32,[[["o"]],[R[12]]]],[11,"apply",E,"Calls the `apply` method of `op` and increments…",32,[[["self"]],[[R[8],[R[9]]],[R[9]]]]],[11,R[102],E,"Calls the `gradient` method of `op` and increments…",32,[[["self"]],[[R[8],[R[9]]],[R[9]]]]],[11,R[46],E,"Calls the `hessian` method of `op` and increments…",32,[[["self"]],[[R[9]],[R[8],[R[9]]]]]],[11,"modify",E,"Calls the `modify` method of `op` and increments…",32,[[["self"],["f64"]],[[R[8],[R[9]]],[R[9]]]]],[11,"consume_op",E,"Consumes an operator by increasing the function call…",32,[[["self"],[R[12]]]]],[11,"reset",E,"Reset the cost function counts to zero",32,[[],[R[12]]]],[11,"get_op",E,"Returns the operator `op` by taking ownership of `self`.",32,[[],["o"]]],[11,"clone_op",E,"Returns a clone of the operator `op`.",32,[[["self"]],["o"]]],[11,"new_from_op",E,"Creates a new `OpWrapper<O>` from another `OpWrapper<O>`…",32,[[[R[12]]],[R[12]]]]],"p":[[8,R[144]],[3,R[145]],[8,"ArgminOp"],[8,"Solver"],[8,R[146]],[8,R[147]],[8,R[148]],[4,R[149]],[8,R[150]],[8,R[151]],[8,R[152]],[8,R[153]],[3,R[154]],[4,R[155]],[8,R[156]],[3,R[157]],[4,R[158]],[4,R[159]],[8,R[160]],[3,"ArgminKV"],[8,R[161]],[8,R[162]],[8,R[163]],[3,R[164]],[8,R[165]],[8,R[166]],[8,R[167]],[8,R[168]],[8,R[169]],[8,R[170]],[3,R[171]],[8,R[172]],[3,R[173]],[8,R[174]],[8,"Observe"],[4,R[175]],[8,R[176]],[8,R[177]],[8,R[178]],[3,R[179]],[3,R[180]],[3,R[181]],[3,R[182]],[3,R[183]],[3,R[184]],[3,R[185]],[3,R[186]],[3,R[187]],[8,R[188]],[3,R[189]],[3,R[190]],[3,R[191]],[3,R[192]],[3,R[193]],[3,R[194]],[3,"NewtonCG"],[3,"Newton"],[3,"BFGS"],[3,"DFP"],[3,"LBFGS"],[3,"SR1"],[3,R[195]],[4,R[196]],[3,R[197]],[3,R[198]],[3,"Dogleg"],[3,"Steihaug"],[3,R[199]],[3,"Particle"],[3,R[200]],[3,R[1]],[3,R[201]],[3,R[202]],[3,R[203]],[3,R[204]],[3,R[205]],[3,"Error"],[3,R[206]],[3,"Observer"]]};
initSearch(searchIndex);addSearchOptions(searchIndex);