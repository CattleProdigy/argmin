var N=null,E="",T="t",U="u",searchIndex={};
var R=["argmin","Executor","argmin::prelude","Calculation of the Jacobian J(x) of a vector function `fs`…","Calculation of the product of the Jacobian J(x) of a…","Calculation of the product of the Hessian H(x) of a…","Hessian","result","error","argminiterdata","opwrapper","iterstate","terminationreason","Set the initial step length","(Pointwise) Multiply a `T` with `self`","Add a `T` scaled by an `U` to `self`","operator","Compute the l2-norm (`U`) of `self`","decomposition","arraybase","ownedrepr","Dot/scalar product of `T` and `self`","argmin::prelude::ArgminError","Subtract a `T` from `self`","(Pointwise) Divide a `T` by `self`","Number of gradient evaluations so far","Return zero(s)","Subtract a `T` scaled by an `U` from `self`","cost_func_count","grad_func_count","hessian_func_count","modify_func_count","argminkv","Add a `T` to `self`","argmin::solver::conjugategradient","Constructor","argmin::solver","argmin::solver::linesearch","set alpha limits","argmin::solver::newton","set gamma","argmin::solver::quasinewton","References:","hessian","argmin::solver::trustregion","max_iters","set radius","Rastrigin test function","Ackley test function","argmin::prelude::executor","argmin::prelude::finitediff","to_owned","clone_into","try_from","borrow_mut","try_into","type_id","argmin::prelude::file","borrow","typeid","to_string","argmin::prelude::modcholesky","string","argmin::prelude::slog_logger","argmin::solver::conjugategradient::cg","argmin::solver::conjugategradient::nonlinear_cg","argmin::solver::conjugategradient::beta","argmin::solver::gradientdescent::steepestdescent","argmin::solver::landweber","argmin::solver::linesearch::backtracking","argmin::solver::linesearch::condition","argmin::solver::linesearch::hagerzhang","argmin::solver::linesearch::morethuente","argmin::solver::newton::newton_cg","argmin::solver::newton::newton_method","argmin::solver::quasinewton::bfgs","argmin::solver::quasinewton::dfp","argmin::solver::quasinewton::lbfgs","argmin::solver::quasinewton::sr1","argmin::solver::quasinewton::sr1_trustregion","argmin::solver::simulatedannealing","argmin::solver::trustregion::cauchypoint","argmin::solver::trustregion::dogleg","argmin::solver::trustregion::steihaug","argmin::solver::trustregion::trustregion_method","argmin::solver::particleswarm","ordering","writetofileserializer","argmincheckpoint","minimalnooperator","argminresult","executor","writetofile","observermode","nooperator","checkpointmode","default","observer","formatter","gradient","Do nothing, really.","serialize","serializer","partial_cmp","deserialize","observe_iter","observe_init","backtrace","perturbationvector","requires_cur_grad","cauchypoint","steihaug","fletcherreeves","polakribiere","polakribiereplus","hestenesstiefel","conjugategradient","landweber","armijocondition","wolfecondition","strongwolfecondition","goldsteincondition","satempfunc","next_iter","terminate","Perform one iteration of SA algorithm","set_search_direction","set_init_alpha","Set search direction","Set initial alpha value","set_radius","target_cost","termination_reason","Attempts to downcast this `Error` to a particular `Fail`…","best_param","best_cost","last_best_iter","get_param","get_termination_reason","get_hessian","terminated","argminsloglogger","FiniteDiff","PerturbationVector","ArgminLineSearch","ArgminTrustRegion","ArgminNLCGBetaUpdate","ArgminRandom","WriteToFileSerializer","TerminationReason","ArgminMul","CheckpointMode","ArgminScaledAdd","ArgminTranspose","ArgminResult","ArgminNorm","ModCholeskySE90","GershgorinCircles","ModCholeskySE99","ModCholeskyGMW81","Decomposition","ObserverMode","ArgminDot","ArgminError","ArgminInv","ArgminEye","ArgminSub","ArgminDiv","ArgminZero","IterState","ArgminWeightedDot","ArgminSlogKV","ArgminZeroLike","ArgminMinMax","ArgminScaledSub","OpWrapper","ArgminAdd","ConjugateGradient","NonlinearConjugateGradient","FletcherReeves","PolakRibiere","PolakRibierePlus","HestenesStiefel","SteepestDescent","Landweber","BacktrackingLineSearch","LineSearchCondition","ArmijoCondition","WolfeCondition","StrongWolfeCondition","GoldsteinCondition","HagerZhangLineSearch","MoreThuenteLineSearch","SR1TrustRegion","SATempFunc","SimulatedAnnealing","CauchyPoint","TrustRegion","ParticleSwarm","ArgminIterData","WriteToFile","ArgminCheckpoint","NoOperator","MinimalNoOperator","ArgminSlogLogger"];

searchIndex[R[0]]={"doc":"A pure Rust optimization framework","i":[[0,"prelude",R[0],"Definition of all relevant traits and types # Re-export of…",N,N],[0,"macros",R[2],"Macros # Macros",N,N],[0,R[91],E,R[1],N,N],[3,R[1],R[49],E,N,N],[0,"finitediff",R[2],"Finite Differentiation",N,N],[8,R[142],R[50],E,N,N],[16,"Jacobian",E,E,0,N],[16,R[6],E,E,0,N],[16,"OperatorOutput",E,E,0,N],[10,"forward_diff",E,"Forward difference calculated as",0,[[["fn"],["self"]],["self"]]],[10,"central_diff",E,"Central difference calculated as",0,[[["fn"],["self"]],["self"]]],[10,"forward_jacobian",E,R[3],0,[[["fn"],["self"]]]],[10,"central_jacobian",E,R[3],0,[[["fn"],["self"]]]],[10,"forward_jacobian_vec_prod",E,R[4],0,[[["fn"],["self"]],["self"]]],[10,"central_jacobian_vec_prod",E,R[4],0,[[["fn"],["self"]],["self"]]],[10,"forward_jacobian_pert",E,E,0,[[["fn"],["self"],["vec"]]]],[10,"central_jacobian_pert",E,E,0,[[["fn"],["self"],["vec"]]]],[10,"forward_hessian",E,"Calculation of the Hessian using forward differences",0,[[["fn"],["self"]]]],[10,"central_hessian",E,"Calculation of the Hessian using central differences",0,[[["fn"],["self"]]]],[10,"forward_hessian_vec_prod",E,R[5],0,[[["fn"],["self"]],["self"]]],[10,"central_hessian_vec_prod",E,R[5],0,[[["fn"],["self"]],["self"]]],[10,"forward_hessian_nograd",E,"Calculation of the Hessian using forward differences…",0,[[["fn"],["self"]]]],[10,"forward_hessian_nograd_sparse",E,"Calculation of a sparse Hessian using forward differences…",0,[[["vec"],["fn"],["self"]]]],[3,R[143],E,"Perturbation Vector for the accelerated computation of the…",N,N],[12,"x_idx",E,"x indices",1,N],[12,"r_idx",E,"correspoding function indices",1,N],[6,"PerturbationVectors",E,"A collection of `PerturbationVector`s",N,N],[8,"ArgminOp",R[2],"This trait needs to be implemented for every operator/cost…",N,N],[16,"Param",E,"Type of the parameter vector",2,N],[16,"Output",E,"Output of the operator",2,N],[16,R[6],E,"Type of Hessian",2,N],[11,"apply",E,"Applies the operator/cost function to parameters",2,[[["self"]],[[R[7],[R[8]]],[R[8]]]]],[11,R[99],E,"Computes the gradient at the given parameters",2,[[["self"]],[[R[7],[R[8]]],[R[8]]]]],[11,R[43],E,"Computes the hessian at the given parameters",2,[[["self"]],[[R[7],[R[8]]],[R[8]]]]],[11,"modify",E,"Modifies a parameter vector. Comes with a variable that…",2,[[["f64"],["self"]],[[R[7],[R[8]]],[R[8]]]]],[8,"Solver",E,E,N,N],[18,"NAME",E,E,3,N],[10,R[123],E,"Computes one iteration of the algorithm.",3,[[["self"],[R[10]],[R[11]]],[[R[8]],[R[9]],[R[7],[R[9],R[8]]]]]],[11,"init",E,"Initializes the algorithm",3,[[["self"],[R[10]],[R[11]]],[["option",[R[9]]],[R[8]],[R[7],["option",R[8]]]]]],[11,"terminate_internal",E,"Checks whether basic termination reasons apply.",3,[[["self"],[R[11]]],[R[12]]]],[11,R[124],E,"Checks whether the algorithm must be terminated",3,[[["self"],[R[11]]],[R[12]]]],[3,R[199],E,"The datastructure which is returned by the `next_iter`…",N,N],[8,R[144],E,"Defines a common interface for line search methods.",N,N],[10,R[126],E,"Set the search direction",4,[[["self"],["p"]]]],[10,R[127],E,R[13],4,[[["self"],["f64"]],[[R[8]],[R[7],[R[8]]]]]],[8,R[145],E,"Defines a common interface to methods which calculate…",N,N],[10,R[130],E,R[13],5,[[["self"],["f64"]]]],[8,R[146],E,"Common interface for beta update methods (Nonlinear-CG)",N,N],[10,"update",E,"Update beta Parameter 1: \\nabla f_k Parameter 2: \\nabla…",6,[[[T],["self"]],["f64"]]],[8,R[147],E,E,N,N],[10,"rand_from_range",E,"Get a random element between min and max,",7,[[["self"]],["self"]]],[0,"file",E,"Output parameter vectors to file",N,N],[4,R[148],R[57],E,N,N],[13,"Bincode",E,E,8,N],[13,"JSON",E,E,8,N],[3,R[200],E,E,N,N],[4,R[149],R[2],"Indicates why the optimization algorithm stopped",N,N],[13,"NotTerminated",E,"In case it has not terminated yet",9,N],[13,"MaxItersReached",E,"Maximum number of iterations reached",9,N],[13,"TargetCostReached",E,"Target cost function value reached",9,N],[13,"TargetPrecisionReached",E,"Target precision reached",9,N],[13,"NoChangeInCost",E,"Cost function value did not change",9,N],[13,"AcceptedStallIterExceeded",E,"Acceped stall iter exceeded",9,N],[13,"BestStallIterExceeded",E,"Best stall iter exceeded",9,N],[13,"LineSearchConditionMet",E,"Condition for Line search met",9,N],[13,"Aborted",E,"Aborted",9,N],[8,R[150],E,R[14],N,N],[10,"mul",E,R[14],10,[[[T],["self"]],[U]]],[4,R[151],E,E,N,N],[13,"Never",E,E,11,N],[13,"Every",E,E,11,N],[13,"Always",E,E,11,N],[8,R[152],E,R[15],N,N],[10,"scaled_add",E,R[15],12,[[[U],[T],["self"]],["v"]]],[3,R[201],E,E,N,N],[3,R[202],E,"Fake Operators for testing No-op operator with free choice…",N,N],[8,R[153],E,E,N,N],[10,T,E,E,13,[[],["self"]]],[5,"load_checkpoint",E,E,N,[[["p"]],[[R[8]],[R[7],[R[8]]]]]],[3,R[154],E,"This is returned by the `Executor` after the solver is run…",N,N],[12,R[16],E,R[16],14,N],[12,"state",E,"iteration state",14,N],[8,R[155],E,R[17],N,N],[10,"norm",E,R[17],15,[[["self"]],[U]]],[0,"modcholesky",E,"Modified Cholesky decompositions Modified Cholesky…",N,N],[8,R[156],R[61],"Schnabel & Eskow algorithm (1990)",N,N],[11,"mod_cholesky_se90",E,"Computes the modified Cholesky decomposition with the SE90…",16,[[["self"]],[R[18]]]],[8,R[157],E,"Gershgorin circles",N,N],[10,"gershgorin_circles",E,"Computes the Gershgorin Circles of a matrix",17,[[["self"]],["vec"]]],[8,R[158],E,"Schnabel & Eskow algorithm (1999)",N,N],[11,"mod_cholesky_se99",E,"Computes the modified Cholesky decomposition with the SE99…",18,[[["self"]],[R[18]]]],[8,R[159],E,"Gill, Murray and Wright (1981)",N,N],[11,"mod_cholesky_gmw81",E,"Computes the modified Cholesky decomposition with the…",19,[[["self"]],[R[18]]]],[3,R[160],E,E,N,N],[12,"l",E,E,20,N],[12,"e",E,E,20,N],[12,"p",E,E,20,N],[0,"utils",E,"Utility functions",N,N],[5,"eigenvalues_2x2","argmin::prelude::modcholesky::utils","Computes the Eigenvalues of a 2x2 matrix",N,[[[R[19]]]]],[5,"swap_columns",E,"Swaps columns `idx1` and `idx2` of matrix `mat`",N,[[[R[19]],["usize"]]]],[5,"swap_rows",E,"Swaps rows `idx1` and `idx2` of matrix `mat`",N,[[[R[19]],["usize"]]]],[5,"index_of_largest",E,"Returns the index of the largest element in a 1D array",N,[[[R[19]]],["usize"]]],[5,"index_of_largest_abs",E,"Returns the index of the element with the largest absolute…",N,[[[R[19]]],["usize"]]],[5,"index_to_permutation_mat",E,"Returns the permutation matrix for a vector of permuted…",N,[[],[[R[20],["f64"]],[R[19],[R[20],"dim"]],["dim"]]]],[5,"diag_mat_from_arr",E,"Builds a diagonal matrix from a 1D slice",N,[[],[[R[20]],[R[19],[R[20],"dim"]],["dim"]]]],[5,"random_householder",E,"Returns a random Householder matrix of dimension `dim` and…",N,[[["u8"],["usize"]],[[R[20],["f64"]],[R[19],[R[20],"dim"]],["dim"]]]],[5,"random_diagonal",E,"Returns a random diagonal matrix with Eigenvalues…",N,[[["u8"],["usize"]],[[R[20],["f64"]],[R[19],[R[20],"dim"]],["dim"]]]],[3,"ArgminKV",R[2],"A simple key-value storage",N,N],[12,"kv",E,"The actual key value storage",21,N],[4,R[161],E,"This is used to indicate how often the observer will…",N,N],[13,"Never",E,E,22,N],[13,"Always",E,E,22,N],[13,"Every",E,E,22,N],[13,"NewBest",E,E,22,N],[8,R[162],E,R[21],N,N],[10,"dot",E,R[21],23,[[[T],["self"]],[U]]],[3,R[203],E,E,N,N],[14,"trait_bound",E,"Reuse a list of trait bounds by giving it a name, e.g.…",N,N],[4,R[163],E,E,N,N],[13,"InvalidParameter",E,"Indicates and invalid parameter",24,N],[12,"text",R[22],E,24,N],[13,"NotImplemented",R[2],"Indicates that a function is not implemented",24,N],[12,"text",R[22],E,24,N],[13,"NotInitialized",R[2],"Indicates that a function is not initialized",24,N],[12,"text",R[22],E,24,N],[13,"ConditionViolated",R[2],"Indicates that a condition is violated",24,N],[12,"text",R[22],E,24,N],[13,"CheckpointNotFound",R[2],"Checkpoint was not found",24,N],[12,"text",R[22],E,24,N],[13,"ImpossibleError",R[2],"Indicates an impossible error",24,N],[12,"text",R[22],E,24,N],[3,"Error",R[2],"The `Error` type, which can contain any failure.",N,N],[14,"make_kv",E,"Creates an `ArgminKV` at compile time in order to avoid…",N,N],[8,R[164],E,"Compute the inverse (`T`) of `self`",N,N],[10,"inv",E,E,25,[[["self"]],[[R[8]],[R[7],[R[8]]]]]],[8,R[165],E,E,N,N],[10,"eye",E,E,26,[[["usize"]],["self"]]],[10,"eye_like",E,E,26,[[["self"]],["self"]]],[3,"Observer",E,"Container for observers which acts just like a single…",N,N],[8,R[166],E,R[23],N,N],[10,"sub",E,R[23],27,[[[T],["self"]],[U]]],[8,R[167],E,R[24],N,N],[10,"div",E,R[24],28,[[[T],["self"]],[U]]],[8,R[168],E,"Return param vector of all zeros (for now, this is a hack.…",N,N],[10,"zero",E,R[26],29,[[],["self"]]],[3,R[169],E,E,N,N],[12,"param",E,"Current parameter vector",30,N],[12,"prev_param",E,"Previous parameter vector",30,N],[12,R[134],E,"Current best parameter vector",30,N],[12,"prev_best_param",E,"Previous best parameter vector",30,N],[12,"cost",E,"Current cost function value",30,N],[12,"prev_cost",E,"Previous cost function value",30,N],[12,R[135],E,"Current best cost function value",30,N],[12,"prev_best_cost",E,"Previous best cost function value",30,N],[12,R[131],E,"Target cost function value",30,N],[12,"grad",E,"Current gradient",30,N],[12,"prev_grad",E,"Previous gradient",30,N],[12,R[43],E,"Current Hessian",30,N],[12,"prev_hessian",E,"Previous Hessian",30,N],[12,"iter",E,"Current iteration",30,N],[12,R[136],E,"Iteration number of last best cost",30,N],[12,R[45],E,"Maximum number of iterations",30,N],[12,R[28],E,"Number of cost function evaluations so far",30,N],[12,R[29],E,R[25],30,N],[12,R[30],E,R[25],30,N],[12,R[31],E,"Number of modify evaluations so far",30,N],[12,"time",E,"Time required so far",30,N],[12,R[132],E,"Reason of termination",30,N],[8,R[170],E,"Dot/scalar product of `T` and `self` weighted by W (p^TWv)",N,N],[10,"weighted_dot",E,R[21],31,[[[T],["self"],["v"]],[U]]],[3,R[171],E,"This type is necessary in order to be able to implement…",N,N],[12,"kv",E,E,32,N],[14,"check_param",E,"Release an `T` from an `Option<T>` if it is not `None`. If…",N,N],[8,R[172],E,"Zero for dynamically sized objects",N,N],[10,"zero_like",E,R[26],33,[[["self"]],["self"]]],[0,"slog_logger",E,"Loggers based on the `slog` crate",N,N],[3,R[204],R[63],"A logger based on `slog`",N,N],[8,R[173],R[2],E,N,N],[10,"min",E,"Select piecewise minimum / maximum",34,[[["self"]],["self"]]],[10,"max",E,E,34,[[["self"]],["self"]]],[8,R[174],E,R[27],N,N],[10,"scaled_sub",E,R[27],35,[[[U],[T],["self"]],["v"]]],[3,R[175],E,"This wraps an operator and keeps track of how often the…",N,N],[12,R[28],E,E,36,N],[12,R[29],E,E,36,N],[12,R[30],E,E,36,N],[12,R[31],E,E,36,N],[8,"Observe",E,"Defines the interface every Observer needs to expose",N,N],[11,R[106],E,"Called once at the beginning of the execution of the solver.",37,[[["str"],["self"],[R[32]]],[[R[8]],[R[7],[R[8]]]]]],[11,R[105],E,"Called at every iteration of the solver",37,[[["self"],[R[11]],[R[32]]],[[R[8]],[R[7],[R[8]]]]]],[8,R[176],E,R[33],N,N],[10,"add",E,R[33],38,[[[T],["self"]],[U]]],[0,"solver",R[0],"Solvers",N,N],[0,R[116],R[36],"Conjugate Gradient methods",N,N],[0,"cg",R[34],"Conjugate gradient method # References:",N,N],[3,R[177],R[64],"The conjugate gradient method is a solver for systems of…",N,N],[11,"new",E,R[35],39,[[["p"]],[[R[8]],[R[7],[R[8]]]]]],[11,"p",E,"Return the current search direction (This is needed by…",39,[[["self"]],["p"]]],[11,"p_prev",E,"Return the previous search direction (This is needed by…",39,[[["self"]],["p"]]],[11,"residual",E,"Return the current residual (This is needed by NewtonCG…",39,[[["self"]],["p"]]],[0,"nonlinear_cg",R[34],"Nonlinear conjugate gradient method Important TODO: Find…",N,N],[3,R[178],R[65],"The nonlinear conjugate gradient is a generalization of…",N,N],[11,"new",E,"Constructor (Polak Ribiere Conjugate Gradient (PR-CG))",40,[[["l"],["b"]],[[R[8]],[R[7],[R[8]]]]]],[11,"restart_iters",E,"Specifiy the number of iterations after which a restart…",40,[[["u64"]],["self"]]],[11,"restart_orthogonality",E,"Set the value for the orthogonality measure. Setting this…",40,[[["f64"]],["self"]]],[0,"beta",R[34],"Beta update methods for nonlinear CG # Beta update methods",N,N],[3,R[179],R[66],"Fletcher and Reeves (FR) method TODO: Reference",N,N],[3,R[180],E,"Polak and Ribiere (PR) method TODO: Reference",N,N],[3,R[181],E,"Polak and Ribiere Plus (PR+) method TODO: Reference",N,N],[3,R[182],E,"Hestenes and Stiefel (HS) method TODO: Reference",N,N],[11,"new",E,R[35],41,[[],["self"]]],[11,"new",E,R[35],42,[[],["self"]]],[11,"new",E,R[35],43,[[],["self"]]],[11,"new",E,R[35],44,[[],["self"]]],[0,"gradientdescent",R[36],"Gradient descent methods",N,N],[0,"steepestdescent","argmin::solver::gradientdescent","Steepest Descent method",N,N],[3,R[183],R[67],"Steepest descent iteratively takes steps in the direction…",N,N],[11,"new",E,R[35],45,[[["l"]],["self"]]],[0,R[117],R[36],"Landweber iteration",N,N],[3,R[184],R[68],"The Landweber iteration is a solver for ill-posed linear…",N,N],[11,"new",E,R[35],46,[[["f64"]],["self"]]],[0,"linesearch",R[36],"Line search methods",N,N],[0,"backtracking",R[37],"Backtracking line search algorithm * Backtracking line…",N,N],[3,R[185],R[69],"The Backtracking line search is a simple method to find a…",N,N],[11,"new",E,R[35],47,[[["l"]],["self"]]],[11,"rho",E,"Set rho",47,[[["f64"]],[[R[8]],[R[7],[R[8]]]]]],[0,"condition",R[37],"Acceptance conditions # References:",N,N],[3,R[187],R[70],"Armijo Condition",N,N],[3,R[188],E,"Wolfe Condition",N,N],[3,R[189],E,"Strong Wolfe conditions",N,N],[3,R[190],E,"Goldstein conditions",N,N],[8,R[186],E,"Needs to be implemented by everything that wants to be a…",N,N],[10,"eval",E,"Evaluate the condition",48,[[["f64"],["self"],[T]],["bool"]]],[10,R[109],E,"Indicates whether this condition requires the computation…",48,[[["self"]],["bool"]]],[11,"new",E,R[35],49,[[["f64"]],[[R[8]],[R[7],[R[8]]]]]],[11,"new",E,R[35],50,[[["f64"]],[[R[8]],[R[7],[R[8]]]]]],[11,"new",E,R[35],51,[[["f64"]],[[R[8]],[R[7],[R[8]]]]]],[11,"new",E,R[35],52,[[["f64"]],[[R[8]],[R[7],[R[8]]]]]],[0,"hagerzhang",R[37],"Hager-Zhang line search algorithm * Hager-Zhang line search",N,N],[3,R[191],R[71],"The Hager-Zhang line search is a method to find a step…",N,N],[11,"new",E,R[35],53,[[],["self"]]],[11,"delta",E,"set delta",53,[[["f64"]],[[R[8]],[R[7],[R[8]]]]]],[11,"sigma",E,"set sigma",53,[[["f64"]],[[R[8]],[R[7],[R[8]]]]]],[11,"epsilon",E,"set epsilon",53,[[["f64"]],[[R[8]],[R[7],[R[8]]]]]],[11,"theta",E,"set theta",53,[[["f64"]],[[R[8]],[R[7],[R[8]]]]]],[11,"gamma",E,R[40],53,[[["f64"]],[[R[8]],[R[7],[R[8]]]]]],[11,"eta",E,"set eta",53,[[["f64"]],[[R[8]],[R[7],[R[8]]]]]],[11,"alpha",E,R[38],53,[[["f64"]],[[R[8]],[R[7],[R[8]]]]]],[0,"morethuente",R[37],"More-Thuente line search algorithm * More-Thuente line…",N,N],[3,R[192],R[72],"The More-Thuente line search is a method to find a step…",N,N],[11,"new",E,R[35],54,[[],["self"]]],[11,"c",E,"Set c1 and c2 where 0 < c1 < c2 < 1.",54,[[["f64"]],[[R[8]],[R[7],[R[8]]]]]],[11,"alpha",E,R[38],54,[[["f64"]],[[R[8]],[R[7],[R[8]]]]]],[0,"newton",R[36],"Newton Methods",N,N],[0,"newton_cg",R[39],"Newton-CG method TODO: Stop when search direction is close…",N,N],[3,"NewtonCG",R[73],"The Newton-CG method (also called truncated Newton method)…",N,N],[11,"new",E,R[35],55,[[["l"]],["self"]]],[11,"curvature_threshold",E,"Set curvature threshold",55,[[["f64"]],["self"]]],[0,"newton_method",R[39],"Newton's method # References:",N,N],[3,"Newton",R[74],"Newton's method iteratively finds the stationary points of…",N,N],[11,"new",E,R[35],56,[[],["self"]]],[11,"set_gamma",E,R[40],56,[[["f64"]],[[R[8]],[R[7],[R[8]]]]]],[0,"quasinewton",R[36],"Quasi-Newton methods",N,N],[0,"bfgs",R[41],R[42],N,N],[3,"BFGS",R[75],"BFGS method",N,N],[11,"new",E,R[35],57,[[["l"],["h"]],["self"]]],[0,"dfp",R[41],R[42],N,N],[3,"DFP",R[76],"DFP method",N,N],[11,"new",E,R[35],58,[[["l"],["h"]],["self"]]],[0,"lbfgs",R[41],R[42],N,N],[3,"LBFGS",R[77],"L-BFGS method",N,N],[11,"new",E,R[35],59,[[["l"],["usize"]],["self"]]],[0,"sr1",R[41],R[42],N,N],[3,"SR1",R[78],"SR1 method (broken!)",N,N],[11,"new",E,R[35],60,[[["l"],["h"]],["self"]]],[11,"r",E,"Set r",60,[[["f64"]],[[R[8]],[R[7],[R[8]]]]]],[0,"sr1_trustregion",R[41],R[42],N,N],[3,R[193],R[79],"SR1 Trust Region method",N,N],[11,"new",E,R[35],61,[[["r"]],["self"]]],[11,R[43],E,"provide initial Hessian (if not provided, the algorithm…",61,[[["b"]],["self"]]],[11,"r",E,"Set r",61,[[["f64"]],[[R[8]],[R[7],[R[8]]]]]],[11,"radius",E,R[46],61,[[["f64"]],["self"]]],[11,"eta",E,"Set eta",61,[[["f64"]],[[R[8]],[R[7],[R[8]]]]]],[0,"simulatedannealing",R[36],E,N,N],[3,R[195],R[80],"Simulated Annealing",N,N],[4,R[194],E,"Temperature functions for Simulated Annealing.",N,N],[13,"TemperatureFast",E,"`t_i = t_init / i`",62,N],[13,"Boltzmann",E,"`t_i = t_init / ln(i)`",62,N],[13,"Exponential",E,"`t_i = t_init * x^i`",62,N],[11,"new",E,R[35],63,[[["f64"]],[[R[8]],[R[7],[R[8]]]]]],[11,"temp_func",E,"Set temperature function to one of the options in…",63,[[[R[122]]],["self"]]],[11,"stall_accepted",E,"The optimization stops after there has been no accepted…",63,[[["u64"]],["self"]]],[11,"stall_best",E,"The optimization stops after there has been no new best…",63,[[["u64"]],["self"]]],[11,"reannealing_fixed",E,"Start reannealing after `iter` iterations",63,[[["u64"]],["self"]]],[11,"reannealing_accepted",E,"Start reannealing after no accepted solution has been…",63,[[["u64"]],["self"]]],[11,"reannealing_best",E,"Start reannealing after no new best solution has been…",63,[[["u64"]],["self"]]],[0,"trustregion",R[36],"Argmin Trust region methods",N,N],[5,"reduction_ratio",R[44],"Computes reduction ratio",N,[[["f64"]],["f64"]]],[0,R[110],E,"Cauchy Point # References:",N,N],[3,R[196],R[81],"The Cauchy point is the minimum of the quadratic…",N,N],[11,"new",E,R[35],64,[[],["self"]]],[0,"dogleg",R[44],"Dogleg method # References:",N,N],[3,"Dogleg",R[82],"The Dogleg method computes the intersection of the trust…",N,N],[11,"new",E,R[35],65,[[],["self"]]],[0,R[111],R[44],"Steihaug method # References:",N,N],[3,"Steihaug",R[83],"The Steihaug method is a conjugate gradients based…",N,N],[11,"new",E,R[35],66,[[],["self"]]],[11,"epsilon",E,"Set epsilon",66,[[["f64"]],[[R[8]],[R[7],[R[8]]]]]],[11,R[45],E,"set maximum number of iterations",66,[[["u64"]],["self"]]],[0,"trustregion_method",R[44],"Trust region solver # References:",N,N],[3,R[197],R[84],"The trust region method approximates the cost function…",N,N],[11,"new",E,R[35],67,[[["r"]],["self"]]],[11,"radius",E,R[46],67,[[["f64"]],["self"]]],[11,"max_radius",E,"Set maximum radius",67,[[["f64"]],["self"]]],[11,"eta",E,"Set eta",67,[[["f64"]],[[R[8]],[R[7],[R[8]]]]]],[0,"particleswarm",R[36],R[42],N,N],[3,R[198],R[85],"Particle Swarm Optimization (PSO)",N,N],[3,"Particle",E,"A single particle",N,N],[12,"position",E,"Position of particle",68,N],[12,"cost",E,"Cost of particle",68,N],[8,"Position",E,E,N,N],[11,"new",E,R[35],69,[[["o"],["f64"],["usize"]],[[R[8]],[R[7],[R[8]]]]]],[11,"set_iter_callback",E,"Set callback",69,[[["fnmut"],["self"]]]],[0,"testfunctions",R[0],"Testfunctions # Testfunctions",N,N],[5,"beale","argmin::testfunctions","Beale test function",N,[[],[T]]],[5,"schaffer_n2",E,"Schaffer test function No. 2",N,[[],[T]]],[5,"sphere_derivative",E,"Derivative of sphere test function",N,[[],["vec"]]],[5,"rosenbrock_2d_hessian",E,"Hessian of 2D Rosenbrock function",N,[[[T]],["vec"]]],[5,"levy_n13",E,"Levy test function No. 13",N,[[],[T]]],[5,"rosenbrock",E,"Multidimensional Rosenbrock test function",N,[[[T]],[T]]],[5,"matyas",E,"Matyas test function",N,[[],[T]]],[5,"cross_in_tray",E,"Cross-in-tray test function",N,[[],["f64"]]],[5,"ackley_param",E,R[48],N,[[[T]],[T]]],[5,"sphere",E,"Sphere test function",N,[[],[T]]],[5,"zero",E,"Zero test function",N,[[],["f64"]]],[5,"himmelblau",E,"Himmelblau test function",N,[[],[T]]],[5,"schaffer_n4",E,"Schaffer test function No. 4",N,[[],[T]]],[5,"picheny",E,"Picheny test function",N,[[],[T]]],[5,"rastrigin",E,R[47],N,[[],[T]]],[5,"rastrigin_a",E,R[47],N,[[[T]],[T]]],[5,"zero_derivative",E,"Derivative of zero test function",N,[[],[["vec",["f64"]],["f64"]]]],[5,"bukin_n6",E,"Bukin test function No. 6",N,[[],[T]]],[5,"styblinski_tang",E,"Styblinski-Tang test function",N,[[],[T]]],[5,"threehumpcamel",E,"Three-hump camel test function",N,[[],[T]]],[5,"eggholder",E,"Eggholder test function",N,[[],[T]]],[5,"goldsteinprice",E,"Goldstein-Price test function",N,[[],[T]]],[5,"levy",E,"Levy test function",N,[[],[T]]],[5,"booth",E,"Booth test function",N,[[],[T]]],[5,"holder_table",E,"Holder table test function",N,[[],[T]]],[5,"easom",E,"Easom test function",N,[[],[T]]],[5,"mccorminck",E,"McCorminck test function",N,[[],[T]]],[5,"rosenbrock_2d_derivative",E,"Derivative of 2D Rosenbrock function",N,[[[T]],["vec"]]],[5,"ackley",E,R[48],N,[[],[T]]],[5,"rosenbrock_2d",E,"2D Rosenbrock test function",N,[[[T]],[T]]],[11,"into",R[49],E,70,[[],[U]]],[11,R[51],E,E,70,[[["self"]],[T]]],[11,R[52],E,E,70,[[[T],["self"]]]],[11,"from",E,E,70,[[[T]],[T]]],[11,R[53],E,E,70,[[[U]],[R[7]]]],[11,R[58],E,E,70,[[["self"]],[T]]],[11,R[56],E,E,70,[[["self"]],[R[59]]]],[11,R[54],E,E,70,[[["self"]],[T]]],[11,R[55],E,E,70,[[],[R[7]]]],[11,"into",R[50],E,1,[[],[U]]],[11,R[51],E,E,1,[[["self"]],[T]]],[11,R[52],E,E,1,[[[T],["self"]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[53],E,E,1,[[[U]],[R[7]]]],[11,R[58],E,E,1,[[["self"]],[T]]],[11,R[56],E,E,1,[[["self"]],[R[59]]]],[11,R[54],E,E,1,[[["self"]],[T]]],[11,R[55],E,E,1,[[],[R[7]]]],[11,"into",R[2],E,71,[[],[U]]],[11,R[51],E,E,71,[[["self"]],[T]]],[11,R[52],E,E,71,[[[T],["self"]]]],[11,"from",E,E,71,[[[T]],[T]]],[11,R[53],E,E,71,[[[U]],[R[7]]]],[11,R[58],E,E,71,[[["self"]],[T]]],[11,R[56],E,E,71,[[["self"]],[R[59]]]],[11,R[54],E,E,71,[[["self"]],[T]]],[11,R[55],E,E,71,[[],[R[7]]]],[11,"into",R[57],E,8,[[],[U]]],[11,R[51],E,E,8,[[["self"]],[T]]],[11,R[52],E,E,8,[[[T],["self"]]]],[11,"from",E,E,8,[[[T]],[T]]],[11,R[53],E,E,8,[[[U]],[R[7]]]],[11,R[58],E,E,8,[[["self"]],[T]]],[11,R[56],E,E,8,[[["self"]],[R[59]]]],[11,R[54],E,E,8,[[["self"]],[T]]],[11,R[55],E,E,8,[[],[R[7]]]],[11,"into",E,E,72,[[],[U]]],[11,R[51],E,E,72,[[["self"]],[T]]],[11,R[52],E,E,72,[[[T],["self"]]]],[11,"from",E,E,72,[[[T]],[T]]],[11,R[53],E,E,72,[[[U]],[R[7]]]],[11,R[58],E,E,72,[[["self"]],[T]]],[11,R[56],E,E,72,[[["self"]],[R[59]]]],[11,R[54],E,E,72,[[["self"]],[T]]],[11,R[55],E,E,72,[[],[R[7]]]],[11,"into",R[2],E,9,[[],[U]]],[11,R[51],E,E,9,[[["self"]],[T]]],[11,R[52],E,E,9,[[[T],["self"]]]],[11,"from",E,E,9,[[[T]],[T]]],[11,R[60],E,E,9,[[["self"]],[R[62]]]],[11,R[53],E,E,9,[[[U]],[R[7]]]],[11,R[58],E,E,9,[[["self"]],[T]]],[11,R[56],E,E,9,[[["self"]],[R[59]]]],[11,R[54],E,E,9,[[["self"]],[T]]],[11,R[55],E,E,9,[[],[R[7]]]],[11,"into",E,E,11,[[],[U]]],[11,R[51],E,E,11,[[["self"]],[T]]],[11,R[52],E,E,11,[[[T],["self"]]]],[11,"from",E,E,11,[[[T]],[T]]],[11,R[60],E,E,11,[[["self"]],[R[62]]]],[11,R[53],E,E,11,[[[U]],[R[7]]]],[11,R[58],E,E,11,[[["self"]],[T]]],[11,R[56],E,E,11,[[["self"]],[R[59]]]],[11,R[54],E,E,11,[[["self"]],[T]]],[11,R[55],E,E,11,[[],[R[7]]]],[11,"into",E,E,73,[[],[U]]],[11,R[51],E,E,73,[[["self"]],[T]]],[11,R[52],E,E,73,[[[T],["self"]]]],[11,"from",E,E,73,[[[T]],[T]]],[11,R[53],E,E,73,[[[U]],[R[7]]]],[11,R[58],E,E,73,[[["self"]],[T]]],[11,R[56],E,E,73,[[["self"]],[R[59]]]],[11,R[54],E,E,73,[[["self"]],[T]]],[11,R[55],E,E,73,[[],[R[7]]]],[11,"into",E,E,74,[[],[U]]],[11,R[51],E,E,74,[[["self"]],[T]]],[11,R[52],E,E,74,[[[T],["self"]]]],[11,"from",E,E,74,[[[T]],[T]]],[11,R[60],E,E,74,[[["self"]],[R[62]]]],[11,R[53],E,E,74,[[[U]],[R[7]]]],[11,R[58],E,E,74,[[["self"]],[T]]],[11,R[56],E,E,74,[[["self"]],[R[59]]]],[11,R[54],E,E,74,[[["self"]],[T]]],[11,R[55],E,E,74,[[],[R[7]]]],[11,"into",E,E,14,[[],[U]]],[11,R[51],E,E,14,[[["self"]],[T]]],[11,R[52],E,E,14,[[[T],["self"]]]],[11,"from",E,E,14,[[[T]],[T]]],[11,R[60],E,E,14,[[["self"]],[R[62]]]],[11,R[53],E,E,14,[[[U]],[R[7]]]],[11,R[58],E,E,14,[[["self"]],[T]]],[11,R[56],E,E,14,[[["self"]],[R[59]]]],[11,R[54],E,E,14,[[["self"]],[T]]],[11,R[55],E,E,14,[[],[R[7]]]],[11,"into",R[61],E,20,[[],[U]]],[11,"from",E,E,20,[[[T]],[T]]],[11,R[53],E,E,20,[[[U]],[R[7]]]],[11,R[58],E,E,20,[[["self"]],[T]]],[11,R[56],E,E,20,[[["self"]],[R[59]]]],[11,R[54],E,E,20,[[["self"]],[T]]],[11,R[55],E,E,20,[[],[R[7]]]],[11,"into",R[2],E,21,[[],[U]]],[11,R[51],E,E,21,[[["self"]],[T]]],[11,R[52],E,E,21,[[[T],["self"]]]],[11,"from",E,E,21,[[[T]],[T]]],[11,R[60],E,E,21,[[["self"]],[R[62]]]],[11,R[53],E,E,21,[[[U]],[R[7]]]],[11,R[58],E,E,21,[[["self"]],[T]]],[11,R[56],E,E,21,[[["self"]],[R[59]]]],[11,R[54],E,E,21,[[["self"]],[T]]],[11,R[55],E,E,21,[[],[R[7]]]],[11,"into",E,E,22,[[],[U]]],[11,R[51],E,E,22,[[["self"]],[T]]],[11,R[52],E,E,22,[[[T],["self"]]]],[11,"from",E,E,22,[[[T]],[T]]],[11,R[53],E,E,22,[[[U]],[R[7]]]],[11,R[58],E,E,22,[[["self"]],[T]]],[11,R[56],E,E,22,[[["self"]],[R[59]]]],[11,R[54],E,E,22,[[["self"]],[T]]],[11,R[55],E,E,22,[[],[R[7]]]],[11,"into",E,E,75,[[],[U]]],[11,R[51],E,E,75,[[["self"]],[T]]],[11,R[52],E,E,75,[[[T],["self"]]]],[11,"from",E,E,75,[[[T]],[T]]],[11,R[60],E,E,75,[[["self"]],[R[62]]]],[11,R[53],E,E,75,[[[U]],[R[7]]]],[11,R[58],E,E,75,[[["self"]],[T]]],[11,R[56],E,E,75,[[["self"]],[R[59]]]],[11,R[54],E,E,75,[[["self"]],[T]]],[11,R[55],E,E,75,[[],[R[7]]]],[11,"into",E,E,24,[[],[U]]],[11,"from",E,E,24,[[[T]],[T]]],[11,R[60],E,E,24,[[["self"]],[R[62]]]],[11,R[53],E,E,24,[[[U]],[R[7]]]],[11,R[58],E,E,24,[[["self"]],[T]]],[11,R[56],E,E,24,[[["self"]],[R[59]]]],[11,R[54],E,E,24,[[["self"]],[T]]],[11,R[55],E,E,24,[[],[R[7]]]],[11,"as_fail",E,E,24,[[["self"]],["fail"]]],[11,"into",E,E,76,[[],[U]]],[11,"from",E,E,76,[[[T]],[T]]],[11,R[60],E,E,76,[[["self"]],[R[62]]]],[11,R[53],E,E,76,[[[U]],[R[7]]]],[11,R[58],E,E,76,[[["self"]],[T]]],[11,R[56],E,E,76,[[["self"]],[R[59]]]],[11,R[54],E,E,76,[[["self"]],[T]]],[11,R[55],E,E,76,[[],[R[7]]]],[11,"as_fail",E,E,76,[[["self"]],["fail"]]],[11,"into",E,E,77,[[],[U]]],[11,R[51],E,E,77,[[["self"]],[T]]],[11,R[52],E,E,77,[[[T],["self"]]]],[11,"from",E,E,77,[[[T]],[T]]],[11,R[53],E,E,77,[[[U]],[R[7]]]],[11,R[58],E,E,77,[[["self"]],[T]]],[11,R[56],E,E,77,[[["self"]],[R[59]]]],[11,R[54],E,E,77,[[["self"]],[T]]],[11,R[55],E,E,77,[[],[R[7]]]],[11,"into",E,E,30,[[],[U]]],[11,R[51],E,E,30,[[["self"]],[T]]],[11,R[52],E,E,30,[[[T],["self"]]]],[11,"from",E,E,30,[[[T]],[T]]],[11,R[53],E,E,30,[[[U]],[R[7]]]],[11,R[58],E,E,30,[[["self"]],[T]]],[11,R[56],E,E,30,[[["self"]],[R[59]]]],[11,R[54],E,E,30,[[["self"]],[T]]],[11,R[55],E,E,30,[[],[R[7]]]],[11,"into",E,E,32,[[],[U]]],[11,"from",E,E,32,[[[T]],[T]]],[11,R[53],E,E,32,[[[U]],[R[7]]]],[11,R[58],E,E,32,[[["self"]],[T]]],[11,R[56],E,E,32,[[["self"]],[R[59]]]],[11,R[54],E,E,32,[[["self"]],[T]]],[11,R[55],E,E,32,[[],[R[7]]]],[11,"into",R[63],E,78,[[],[U]]],[11,R[51],E,E,78,[[["self"]],[T]]],[11,R[52],E,E,78,[[[T],["self"]]]],[11,"from",E,E,78,[[[T]],[T]]],[11,R[53],E,E,78,[[[U]],[R[7]]]],[11,R[58],E,E,78,[[["self"]],[T]]],[11,R[56],E,E,78,[[["self"]],[R[59]]]],[11,R[54],E,E,78,[[["self"]],[T]]],[11,R[55],E,E,78,[[],[R[7]]]],[11,"into",R[2],E,36,[[],[U]]],[11,R[51],E,E,36,[[["self"]],[T]]],[11,R[52],E,E,36,[[[T],["self"]]]],[11,"from",E,E,36,[[[T]],[T]]],[11,R[53],E,E,36,[[[U]],[R[7]]]],[11,R[58],E,E,36,[[["self"]],[T]]],[11,R[56],E,E,36,[[["self"]],[R[59]]]],[11,R[54],E,E,36,[[["self"]],[T]]],[11,R[55],E,E,36,[[],[R[7]]]],[11,"into",R[64],E,39,[[],[U]]],[11,R[51],E,E,39,[[["self"]],[T]]],[11,R[52],E,E,39,[[[T],["self"]]]],[11,"from",E,E,39,[[[T]],[T]]],[11,R[53],E,E,39,[[[U]],[R[7]]]],[11,R[58],E,E,39,[[["self"]],[T]]],[11,R[56],E,E,39,[[["self"]],[R[59]]]],[11,R[54],E,E,39,[[["self"]],[T]]],[11,R[55],E,E,39,[[],[R[7]]]],[11,"into",R[65],E,40,[[],[U]]],[11,"from",E,E,40,[[[T]],[T]]],[11,R[53],E,E,40,[[[U]],[R[7]]]],[11,R[58],E,E,40,[[["self"]],[T]]],[11,R[56],E,E,40,[[["self"]],[R[59]]]],[11,R[54],E,E,40,[[["self"]],[T]]],[11,R[55],E,E,40,[[],[R[7]]]],[11,"into",R[66],E,41,[[],[U]]],[11,R[51],E,E,41,[[["self"]],[T]]],[11,R[52],E,E,41,[[[T],["self"]]]],[11,"from",E,E,41,[[[T]],[T]]],[11,R[53],E,E,41,[[[U]],[R[7]]]],[11,R[58],E,E,41,[[["self"]],[T]]],[11,R[56],E,E,41,[[["self"]],[R[59]]]],[11,R[54],E,E,41,[[["self"]],[T]]],[11,R[55],E,E,41,[[],[R[7]]]],[11,"into",E,E,42,[[],[U]]],[11,R[51],E,E,42,[[["self"]],[T]]],[11,R[52],E,E,42,[[[T],["self"]]]],[11,"from",E,E,42,[[[T]],[T]]],[11,R[53],E,E,42,[[[U]],[R[7]]]],[11,R[58],E,E,42,[[["self"]],[T]]],[11,R[56],E,E,42,[[["self"]],[R[59]]]],[11,R[54],E,E,42,[[["self"]],[T]]],[11,R[55],E,E,42,[[],[R[7]]]],[11,"into",E,E,43,[[],[U]]],[11,R[51],E,E,43,[[["self"]],[T]]],[11,R[52],E,E,43,[[[T],["self"]]]],[11,"from",E,E,43,[[[T]],[T]]],[11,R[53],E,E,43,[[[U]],[R[7]]]],[11,R[58],E,E,43,[[["self"]],[T]]],[11,R[56],E,E,43,[[["self"]],[R[59]]]],[11,R[54],E,E,43,[[["self"]],[T]]],[11,R[55],E,E,43,[[],[R[7]]]],[11,"into",E,E,44,[[],[U]]],[11,R[51],E,E,44,[[["self"]],[T]]],[11,R[52],E,E,44,[[[T],["self"]]]],[11,"from",E,E,44,[[[T]],[T]]],[11,R[53],E,E,44,[[[U]],[R[7]]]],[11,R[58],E,E,44,[[["self"]],[T]]],[11,R[56],E,E,44,[[["self"]],[R[59]]]],[11,R[54],E,E,44,[[["self"]],[T]]],[11,R[55],E,E,44,[[],[R[7]]]],[11,"into",R[67],E,45,[[],[U]]],[11,"from",E,E,45,[[[T]],[T]]],[11,R[53],E,E,45,[[[U]],[R[7]]]],[11,R[58],E,E,45,[[["self"]],[T]]],[11,R[56],E,E,45,[[["self"]],[R[59]]]],[11,R[54],E,E,45,[[["self"]],[T]]],[11,R[55],E,E,45,[[],[R[7]]]],[11,"into",R[68],E,46,[[],[U]]],[11,R[51],E,E,46,[[["self"]],[T]]],[11,R[52],E,E,46,[[[T],["self"]]]],[11,"from",E,E,46,[[[T]],[T]]],[11,R[53],E,E,46,[[[U]],[R[7]]]],[11,R[58],E,E,46,[[["self"]],[T]]],[11,R[56],E,E,46,[[["self"]],[R[59]]]],[11,R[54],E,E,46,[[["self"]],[T]]],[11,R[55],E,E,46,[[],[R[7]]]],[11,"into",R[69],E,47,[[],[U]]],[11,R[51],E,E,47,[[["self"]],[T]]],[11,R[52],E,E,47,[[[T],["self"]]]],[11,"from",E,E,47,[[[T]],[T]]],[11,R[53],E,E,47,[[[U]],[R[7]]]],[11,R[58],E,E,47,[[["self"]],[T]]],[11,R[56],E,E,47,[[["self"]],[R[59]]]],[11,R[54],E,E,47,[[["self"]],[T]]],[11,R[55],E,E,47,[[],[R[7]]]],[11,"into",R[70],E,49,[[],[U]]],[11,R[51],E,E,49,[[["self"]],[T]]],[11,R[52],E,E,49,[[[T],["self"]]]],[11,"from",E,E,49,[[[T]],[T]]],[11,R[53],E,E,49,[[[U]],[R[7]]]],[11,R[58],E,E,49,[[["self"]],[T]]],[11,R[56],E,E,49,[[["self"]],[R[59]]]],[11,R[54],E,E,49,[[["self"]],[T]]],[11,R[55],E,E,49,[[],[R[7]]]],[11,"into",E,E,50,[[],[U]]],[11,R[51],E,E,50,[[["self"]],[T]]],[11,R[52],E,E,50,[[[T],["self"]]]],[11,"from",E,E,50,[[[T]],[T]]],[11,R[53],E,E,50,[[[U]],[R[7]]]],[11,R[58],E,E,50,[[["self"]],[T]]],[11,R[56],E,E,50,[[["self"]],[R[59]]]],[11,R[54],E,E,50,[[["self"]],[T]]],[11,R[55],E,E,50,[[],[R[7]]]],[11,"into",E,E,51,[[],[U]]],[11,R[51],E,E,51,[[["self"]],[T]]],[11,R[52],E,E,51,[[[T],["self"]]]],[11,"from",E,E,51,[[[T]],[T]]],[11,R[53],E,E,51,[[[U]],[R[7]]]],[11,R[58],E,E,51,[[["self"]],[T]]],[11,R[56],E,E,51,[[["self"]],[R[59]]]],[11,R[54],E,E,51,[[["self"]],[T]]],[11,R[55],E,E,51,[[],[R[7]]]],[11,"into",E,E,52,[[],[U]]],[11,R[51],E,E,52,[[["self"]],[T]]],[11,R[52],E,E,52,[[[T],["self"]]]],[11,"from",E,E,52,[[[T]],[T]]],[11,R[53],E,E,52,[[[U]],[R[7]]]],[11,R[58],E,E,52,[[["self"]],[T]]],[11,R[56],E,E,52,[[["self"]],[R[59]]]],[11,R[54],E,E,52,[[["self"]],[T]]],[11,R[55],E,E,52,[[],[R[7]]]],[11,"into",R[71],E,53,[[],[U]]],[11,R[51],E,E,53,[[["self"]],[T]]],[11,R[52],E,E,53,[[[T],["self"]]]],[11,"from",E,E,53,[[[T]],[T]]],[11,R[53],E,E,53,[[[U]],[R[7]]]],[11,R[58],E,E,53,[[["self"]],[T]]],[11,R[56],E,E,53,[[["self"]],[R[59]]]],[11,R[54],E,E,53,[[["self"]],[T]]],[11,R[55],E,E,53,[[],[R[7]]]],[11,"into",R[72],E,54,[[],[U]]],[11,R[51],E,E,54,[[["self"]],[T]]],[11,R[52],E,E,54,[[[T],["self"]]]],[11,"from",E,E,54,[[[T]],[T]]],[11,R[53],E,E,54,[[[U]],[R[7]]]],[11,R[58],E,E,54,[[["self"]],[T]]],[11,R[56],E,E,54,[[["self"]],[R[59]]]],[11,R[54],E,E,54,[[["self"]],[T]]],[11,R[55],E,E,54,[[],[R[7]]]],[11,"into",R[73],E,55,[[],[U]]],[11,"from",E,E,55,[[[T]],[T]]],[11,R[53],E,E,55,[[[U]],[R[7]]]],[11,R[58],E,E,55,[[["self"]],[T]]],[11,R[56],E,E,55,[[["self"]],[R[59]]]],[11,R[54],E,E,55,[[["self"]],[T]]],[11,R[55],E,E,55,[[],[R[7]]]],[11,"into",R[74],E,56,[[],[U]]],[11,"from",E,E,56,[[[T]],[T]]],[11,R[53],E,E,56,[[[U]],[R[7]]]],[11,R[58],E,E,56,[[["self"]],[T]]],[11,R[56],E,E,56,[[["self"]],[R[59]]]],[11,R[54],E,E,56,[[["self"]],[T]]],[11,R[55],E,E,56,[[],[R[7]]]],[11,"into",R[75],E,57,[[],[U]]],[11,"from",E,E,57,[[[T]],[T]]],[11,R[53],E,E,57,[[[U]],[R[7]]]],[11,R[58],E,E,57,[[["self"]],[T]]],[11,R[56],E,E,57,[[["self"]],[R[59]]]],[11,R[54],E,E,57,[[["self"]],[T]]],[11,R[55],E,E,57,[[],[R[7]]]],[11,"into",R[76],E,58,[[],[U]]],[11,"from",E,E,58,[[[T]],[T]]],[11,R[53],E,E,58,[[[U]],[R[7]]]],[11,R[58],E,E,58,[[["self"]],[T]]],[11,R[56],E,E,58,[[["self"]],[R[59]]]],[11,R[54],E,E,58,[[["self"]],[T]]],[11,R[55],E,E,58,[[],[R[7]]]],[11,"into",R[77],E,59,[[],[U]]],[11,"from",E,E,59,[[[T]],[T]]],[11,R[53],E,E,59,[[[U]],[R[7]]]],[11,R[58],E,E,59,[[["self"]],[T]]],[11,R[56],E,E,59,[[["self"]],[R[59]]]],[11,R[54],E,E,59,[[["self"]],[T]]],[11,R[55],E,E,59,[[],[R[7]]]],[11,"into",R[78],E,60,[[],[U]]],[11,"from",E,E,60,[[[T]],[T]]],[11,R[53],E,E,60,[[[U]],[R[7]]]],[11,R[58],E,E,60,[[["self"]],[T]]],[11,R[56],E,E,60,[[["self"]],[R[59]]]],[11,R[54],E,E,60,[[["self"]],[T]]],[11,R[55],E,E,60,[[],[R[7]]]],[11,"into",R[79],E,61,[[],[U]]],[11,"from",E,E,61,[[[T]],[T]]],[11,R[53],E,E,61,[[[U]],[R[7]]]],[11,R[58],E,E,61,[[["self"]],[T]]],[11,R[56],E,E,61,[[["self"]],[R[59]]]],[11,R[54],E,E,61,[[["self"]],[T]]],[11,R[55],E,E,61,[[],[R[7]]]],[11,"into",R[80],E,63,[[],[U]]],[11,"from",E,E,63,[[[T]],[T]]],[11,R[53],E,E,63,[[[U]],[R[7]]]],[11,R[58],E,E,63,[[["self"]],[T]]],[11,R[56],E,E,63,[[["self"]],[R[59]]]],[11,R[54],E,E,63,[[["self"]],[T]]],[11,R[55],E,E,63,[[],[R[7]]]],[11,"into",E,E,62,[[],[U]]],[11,R[51],E,E,62,[[["self"]],[T]]],[11,R[52],E,E,62,[[[T],["self"]]]],[11,"from",E,E,62,[[[T]],[T]]],[11,R[53],E,E,62,[[[U]],[R[7]]]],[11,R[58],E,E,62,[[["self"]],[T]]],[11,R[56],E,E,62,[[["self"]],[R[59]]]],[11,R[54],E,E,62,[[["self"]],[T]]],[11,R[55],E,E,62,[[],[R[7]]]],[11,"into",R[81],E,64,[[],[U]]],[11,R[51],E,E,64,[[["self"]],[T]]],[11,R[52],E,E,64,[[[T],["self"]]]],[11,"from",E,E,64,[[[T]],[T]]],[11,R[53],E,E,64,[[[U]],[R[7]]]],[11,R[58],E,E,64,[[["self"]],[T]]],[11,R[56],E,E,64,[[["self"]],[R[59]]]],[11,R[54],E,E,64,[[["self"]],[T]]],[11,R[55],E,E,64,[[],[R[7]]]],[11,"into",R[82],E,65,[[],[U]]],[11,R[51],E,E,65,[[["self"]],[T]]],[11,R[52],E,E,65,[[[T],["self"]]]],[11,"from",E,E,65,[[[T]],[T]]],[11,R[53],E,E,65,[[[U]],[R[7]]]],[11,R[58],E,E,65,[[["self"]],[T]]],[11,R[56],E,E,65,[[["self"]],[R[59]]]],[11,R[54],E,E,65,[[["self"]],[T]]],[11,R[55],E,E,65,[[],[R[7]]]],[11,"into",R[83],E,66,[[],[U]]],[11,R[51],E,E,66,[[["self"]],[T]]],[11,R[52],E,E,66,[[[T],["self"]]]],[11,"from",E,E,66,[[[T]],[T]]],[11,R[53],E,E,66,[[[U]],[R[7]]]],[11,R[58],E,E,66,[[["self"]],[T]]],[11,R[56],E,E,66,[[["self"]],[R[59]]]],[11,R[54],E,E,66,[[["self"]],[T]]],[11,R[55],E,E,66,[[],[R[7]]]],[11,"into",R[84],E,67,[[],[U]]],[11,"from",E,E,67,[[[T]],[T]]],[11,R[53],E,E,67,[[[U]],[R[7]]]],[11,R[58],E,E,67,[[["self"]],[T]]],[11,R[56],E,E,67,[[["self"]],[R[59]]]],[11,R[54],E,E,67,[[["self"]],[T]]],[11,R[55],E,E,67,[[],[R[7]]]],[11,"into",R[85],E,69,[[],[U]]],[11,"from",E,E,69,[[[T]],[T]]],[11,R[53],E,E,69,[[[U]],[R[7]]]],[11,R[58],E,E,69,[[["self"]],[T]]],[11,R[56],E,E,69,[[["self"]],[R[59]]]],[11,R[54],E,E,69,[[["self"]],[T]]],[11,R[55],E,E,69,[[],[R[7]]]],[11,"into",E,E,68,[[],[U]]],[11,"from",E,E,68,[[[T]],[T]]],[11,R[53],E,E,68,[[[U]],[R[7]]]],[11,R[58],E,E,68,[[["self"]],[T]]],[11,R[56],E,E,68,[[["self"]],[R[59]]]],[11,R[54],E,E,68,[[["self"]],[T]]],[11,R[55],E,E,68,[[],[R[7]]]],[11,"cmp",R[2],E,75,[[["self"],[R[89]]],[R[86]]]],[11,"cmp",E,E,11,[[["self"],[R[95]]],[R[86]]]],[11,"cmp",E,E,73,[[["self"],[R[88]]],[R[86]]]],[11,"cmp",E,E,14,[[[R[90]],["self"]],[R[86]]]],[11,"cmp",R[57],E,72,[[["self"],[R[92]]],[R[86]]]],[11,"cmp",R[2],E,9,[[["self"],[R[12]]],[R[86]]]],[11,"cmp",E,E,74,[[[R[94]],["self"]],[R[86]]]],[11,"cmp",E,E,22,[[[R[93]],["self"]],[R[86]]]],[11,"cmp",R[57],E,8,[[[R[87]],["self"]],[R[86]]]],[11,"cmp",R[2],E,21,[[["self"],[R[32]]],[R[86]]]],[11,"clone",E,E,30,[[["self"]],[R[11]]]],[11,"clone",R[57],E,8,[[["self"]],[R[87]]]],[11,"clone",R[2],E,73,[[["self"]],[R[88]]]],[11,"clone",E,E,71,[[["self"]],[R[9]]]],[11,"clone",R[63],E,78,[[["self"]],[R[141]]]],[11,"clone",R[2],E,75,[[["self"]],[R[89]]]],[11,"clone",E,E,36,[[["self"]],[R[10]]]],[11,"clone",E,E,14,[[["self"]],[R[90]]]],[11,"clone",R[49],E,70,[[["self"]],[R[91]]]],[11,"clone",R[57],E,72,[[["self"]],[R[92]]]],[11,"clone",R[2],E,22,[[["self"]],[R[93]]]],[11,"clone",E,E,21,[[["self"]],[R[32]]]],[11,"clone",E,E,77,[[["self"]],[R[97]]]],[11,"clone",E,E,9,[[["self"]],[R[12]]]],[11,"clone",E,E,74,[[["self"]],[R[94]]]],[11,"clone",E,E,11,[[["self"]],[R[95]]]],[11,R[96],R[57],E,8,[[],[R[87]]]],[11,R[96],R[2],E,73,[[],[R[88]]]],[11,R[96],E,E,77,[[],[R[97]]]],[11,R[96],E,E,21,[[],[R[32]]]],[11,R[96],E,E,30,[[],[R[11]]]],[11,R[96],E,E,71,[[],[R[9]]]],[11,R[96],E,E,11,[[],[R[95]]]],[11,R[96],E,E,74,[[],[R[94]]]],[11,R[96],E,"The default is `Always`",22,[[],[R[93]]]],[11,R[96],E,E,75,[[],[R[89]]]],[11,R[96],E,E,9,[[],[R[12]]]],[11,"fmt",E,E,14,[[[R[98]],["self"]],[[R[7],[R[8]]],[R[8]]]]],[11,"fmt",E,E,74,[[[R[98]],["self"]],[[R[7],[R[8]]],[R[8]]]]],[11,"fmt",E,E,9,[[[R[98]],["self"]],[[R[7],[R[8]]],[R[8]]]]],[11,"fmt",E,E,24,[[[R[98]],["self"]],[[R[7],[R[8]]],[R[8]]]]],[11,"fmt",E,E,11,[[[R[98]],["self"]],[[R[7],[R[8]]],[R[8]]]]],[11,"fmt",E,E,21,[[[R[98]],["self"]],[[R[7],[R[8]]],[R[8]]]]],[11,"fmt",E,E,75,[[[R[98]],["self"]],[[R[7],[R[8]]],[R[8]]]]],[11,"apply",E,E,36,[[["self"]],[[R[8]],[R[7],[R[8]]]]]],[11,R[99],E,E,36,[[["self"]],[[R[7],[R[8]]],[R[8]]]]],[11,R[43],E,E,36,[[["self"]],[[R[7],[R[8]]],[R[8]]]]],[11,"modify",E,E,36,[[["f64"],["self"]],[[R[7],[R[8]]],[R[8]]]]],[11,"apply",E,R[100],75,[[["self"]],[[R[7],[R[8]]],[R[8]]]]],[11,R[99],E,R[100],75,[[["self"]],[[R[7],[R[8]]],[R[8]]]]],[11,R[43],E,R[100],75,[[["self"]],[[R[8]],[R[7],[R[8]]]]]],[11,"modify",E,R[100],75,[[["f64"],["self"]],[[R[7],[R[8]]],[R[8]]]]],[11,"apply",E,R[100],74,[[["self"]],[[R[7],[R[8]]],[R[8]]]]],[11,R[99],E,R[100],74,[[["self"]],[[R[7],[R[8]]],[R[8]]]]],[11,R[43],E,R[100],74,[[["self"]],[[R[7],[R[8]]],[R[8]]]]],[11,"modify",E,R[100],74,[[["f64"],["self"]],[[R[7],[R[8]]],[R[8]]]]],[11,"hash",E,E,9,[[["self"],["__h"]]]],[11,"hash",E,E,21,[[["self"],["__h"]]]],[11,"hash",E,E,74,[[["__htuh"],["self"]]]],[11,"hash",E,E,11,[[["self"],["__h"]]]],[11,"hash",E,E,75,[[["self"],["__h"]]]],[11,"hash",E,E,73,[[["self"],["__h"]]]],[11,R[101],E,E,74,[[["__s"],["self"]],[R[7]]]],[11,R[101],E,E,22,[[["__s"],["self"]],[R[7]]]],[11,R[101],E,E,14,[[["__s"],["self"]],[R[7]]]],[11,R[101],E,E,9,[[["__s"],["self"]],[R[7]]]],[11,R[101],E,E,11,[[["__s"],["self"]],[R[7]]]],[11,R[101],E,E,21,[[["__s"],["self"]],[R[7]]]],[11,R[101],E,E,75,[[["__s"],["self"]],[R[7]]]],[11,R[101],E,E,73,[[["__s"],["self"]],[R[7]]]],[11,R[101],R[57],E,8,[[["__s"],["self"]],[R[7]]]],[11,R[101],E,E,72,[[["__s"],["self"]],[R[7]]]],[11,R[101],R[49],E,70,[[["__s"],["self"]],[R[7]]]],[11,R[101],R[2],E,36,[[["__s"],["self"]],[R[7]]]],[11,R[101],E,E,71,[[["__s"],["self"]],[R[7]]]],[11,R[101],E,E,30,[[["__s"],["self"]],[R[7]]]],[11,R[101],E,E,32,[[["record"],["self"],[R[102]]],[[R[7],[R[8]]],[R[8]]]]],[11,R[101],E,E,30,[[["record"],["self"],[R[102]]],[[R[7],[R[8]]],[R[8]]]]],[11,"from_iter",E,E,21,[[["i"]],[R[32]]]],[11,R[103],E,E,74,[[[R[94]],["self"]],[["option",[R[86]]],[R[86]]]]],[11,"lt",E,E,74,[[[R[94]],["self"]],["bool"]]],[11,"le",E,E,74,[[[R[94]],["self"]],["bool"]]],[11,"gt",E,E,74,[[[R[94]],["self"]],["bool"]]],[11,"ge",E,E,74,[[[R[94]],["self"]],["bool"]]],[11,R[103],E,E,9,[[["self"],[R[12]]],[["option",[R[86]]],[R[86]]]]],[11,R[103],E,E,22,[[[R[93]],["self"]],[["option",[R[86]]],[R[86]]]]],[11,"lt",E,E,22,[[[R[93]],["self"]],["bool"]]],[11,"le",E,E,22,[[[R[93]],["self"]],["bool"]]],[11,"gt",E,E,22,[[[R[93]],["self"]],["bool"]]],[11,"ge",E,E,22,[[[R[93]],["self"]],["bool"]]],[11,R[103],E,E,73,[[["self"],[R[88]]],[["option",[R[86]]],[R[86]]]]],[11,"lt",E,E,73,[[["self"],[R[88]]],["bool"]]],[11,"le",E,E,73,[[["self"],[R[88]]],["bool"]]],[11,"gt",E,E,73,[[["self"],[R[88]]],["bool"]]],[11,"ge",E,E,73,[[["self"],[R[88]]],["bool"]]],[11,R[103],R[57],E,72,[[["self"],[R[92]]],[["option",[R[86]]],[R[86]]]]],[11,"lt",E,E,72,[[["self"],[R[92]]],["bool"]]],[11,"le",E,E,72,[[["self"],[R[92]]],["bool"]]],[11,"gt",E,E,72,[[["self"],[R[92]]],["bool"]]],[11,"ge",E,E,72,[[["self"],[R[92]]],["bool"]]],[11,R[103],R[2],E,75,[[["self"],[R[89]]],[["option",[R[86]]],[R[86]]]]],[11,R[103],E,E,14,[[[R[90]],["self"]],[["option",[R[86]]],[R[86]]]]],[11,R[103],R[57],E,8,[[[R[87]],["self"]],[["option",[R[86]]],[R[86]]]]],[11,R[103],R[2],E,21,[[["self"],[R[32]]],[["option",[R[86]]],[R[86]]]]],[11,"lt",E,E,21,[[["self"],[R[32]]],["bool"]]],[11,"le",E,E,21,[[["self"],[R[32]]],["bool"]]],[11,"gt",E,E,21,[[["self"],[R[32]]],["bool"]]],[11,"ge",E,E,21,[[["self"],[R[32]]],["bool"]]],[11,R[103],E,E,11,[[["self"],[R[95]]],[["option",[R[86]]],[R[86]]]]],[11,"lt",E,E,11,[[["self"],[R[95]]],["bool"]]],[11,"le",E,E,11,[[["self"],[R[95]]],["bool"]]],[11,"gt",E,E,11,[[["self"],[R[95]]],["bool"]]],[11,"ge",E,E,11,[[["self"],[R[95]]],["bool"]]],[11,"from",E,E,32,[[[R[32]]],["argminslogkv"]]],[11,R[104],E,E,9,[[["__d"]],[[R[12]],[R[7],[R[12]]]]]],[11,R[104],E,E,36,[[["__d"]],[[R[10]],[R[7],[R[10]]]]]],[11,R[104],E,E,14,[[["__d"]],[[R[7],[R[90]]],[R[90]]]]],[11,R[104],E,E,22,[[["__d"]],[[R[93]],[R[7],[R[93]]]]]],[11,R[104],E,E,74,[[["__d"]],[[R[94]],[R[7],[R[94]]]]]],[11,R[104],E,E,21,[[["__d"]],[[R[32]],[R[7],[R[32]]]]]],[11,R[104],R[49],E,70,[[["__d"]],[[R[91]],[R[7],[R[91]]]]]],[11,R[104],R[57],E,72,[[["__d"]],[[R[7],[R[92]]],[R[92]]]]],[11,R[104],R[2],E,75,[[["__d"]],[[R[89]],[R[7],[R[89]]]]]],[11,R[104],E,E,30,[[["__d"]],[[R[7],[R[11]]],[R[11]]]]],[11,R[104],R[57],E,8,[[["__d"]],[[R[87]],[R[7],[R[87]]]]]],[11,R[104],R[2],E,73,[[["__d"]],[[R[7],[R[88]]],[R[88]]]]],[11,R[104],E,E,11,[[["__d"]],[[R[7],[R[95]]],[R[95]]]]],[11,"eq",E,E,21,[[["self"],[R[32]]],["bool"]]],[11,"ne",E,E,21,[[["self"],[R[32]]],["bool"]]],[11,"eq",R[57],E,8,[[[R[87]],["self"]],["bool"]]],[11,"eq",R[2],E,11,[[["self"],[R[95]]],["bool"]]],[11,"ne",E,E,11,[[["self"],[R[95]]],["bool"]]],[11,"eq",E,E,73,[[["self"],[R[88]]],["bool"]]],[11,"ne",E,E,73,[[["self"],[R[88]]],["bool"]]],[11,"eq",R[57],E,72,[[["self"],[R[92]]],["bool"]]],[11,"ne",E,E,72,[[["self"],[R[92]]],["bool"]]],[11,"eq",R[2],E,14,[[[R[90]],["self"]],["bool"]]],[11,"eq",E,E,22,[[[R[93]],["self"]],["bool"]]],[11,"ne",E,E,22,[[[R[93]],["self"]],["bool"]]],[11,"eq",E,E,74,[[[R[94]],["self"]],["bool"]]],[11,"ne",E,E,74,[[[R[94]],["self"]],["bool"]]],[11,"eq",E,E,75,[[["self"],[R[89]]],["bool"]]],[11,"eq",E,E,9,[[["self"],[R[12]]],["bool"]]],[11,"extend",E,E,21,[[["self"],["i"]]]],[11,R[105],R[57],E,72,[[["self"],[R[11]],[R[32]]],[[R[8]],[R[7],[R[8]]]]]],[11,R[106],R[63],"Log general info",78,[[["str"],["self"],[R[32]]],[[R[8]],[R[7],[R[8]]]]]],[11,R[105],E,"This should be used to log iteration data only (because…",78,[[["self"],[R[11]],[R[32]]],[[R[8]],[R[7],[R[8]]]]]],[11,R[106],R[2],"Initial observation This is called after the…",77,[[["str"],["self"],[R[32]]],[[R[8]],[R[7],[R[8]]]]]],[11,R[105],E,"This is called after every iteration and gets the current…",77,[[["self"],[R[11]],[R[32]]],[[R[8]],[R[7],[R[8]]]]]],[11,"fmt",E,E,21,[[[R[98]],["self"]],[[R[7],[R[8]]],[R[8]]]]],[11,"fmt",R[57],E,8,[[[R[98]],["self"]],[[R[7],[R[8]]],[R[8]]]]],[11,"fmt",R[2],E,30,[[[R[98]],["self"]],[[R[7],[R[8]]],[R[8]]]]],[11,"fmt",E,E,22,[[[R[98]],["self"]],[[R[7],[R[8]]],[R[8]]]]],[11,"fmt",E,E,71,[[[R[98]],["self"]],[[R[7],[R[8]]],[R[8]]]]],[11,"fmt",R[57],E,72,[[[R[98]],["self"]],[[R[7],[R[8]]],[R[8]]]]],[11,"fmt",R[2],E,75,[[[R[98]],["self"]],[[R[7],[R[8]]],[R[8]]]]],[11,"fmt",E,E,24,[[[R[98]],["self"]],[[R[7],[R[8]]],[R[8]]]]],[11,"fmt",E,E,9,[[[R[98]],["self"]],[[R[7],[R[8]]],[R[8]]]]],[11,"fmt",E,E,74,[[[R[98]],["self"]],[[R[7],[R[8]]],[R[8]]]]],[11,"fmt",E,E,11,[[[R[98]],["self"]],[[R[7],[R[8]]],[R[8]]]]],[11,"fmt",E,E,73,[[[R[98]],["self"]],[[R[7],[R[8]]],[R[8]]]]],[11,"fmt",E,E,36,[[[R[98]],["self"]],[[R[7],[R[8]]],[R[8]]]]],[11,"name",E,E,24,[[["self"]],[["str"],["option",["str"]]]]],[11,"cause",E,E,24,[[["self"]],[["option",["fail"]],["fail"]]]],[11,R[107],E,E,24,[[["self"]],[[R[107]],["option",[R[107]]]]]],[11,"as_ref",E,E,76,[[["self"]],["fail"]]],[11,"from",E,E,76,[[["f"]],[R[8]]]],[11,"as_fail",E,E,76,[[["self"]],["fail"]]],[11,"fmt",E,E,76,[[[R[98]],["self"]],[[R[7],[R[8]]],[R[8]]]]],[11,"fmt",E,E,76,[[[R[98]],["self"]],[[R[7],[R[8]]],[R[8]]]]],[11,"clone",R[50],E,1,[[["self"]],[R[108]]]],[11,R[96],E,E,1,[[],[R[108]]]],[11,"eval",R[70],E,49,[[["f64"],["self"],[T]],["bool"]]],[11,R[109],E,E,49,[[["self"]],["bool"]]],[11,"eval",E,E,50,[[["f64"],["self"],[T]],["bool"]]],[11,R[109],E,E,50,[[["self"]],["bool"]]],[11,"eval",E,E,51,[[["f64"],["self"],[T]],["bool"]]],[11,R[109],E,E,51,[[["self"]],["bool"]]],[11,"eval",E,E,52,[[["f64"],["self"],[T]],["bool"]]],[11,R[109],E,E,52,[[["self"]],["bool"]]],[11,R[103],R[66],E,41,[[["self"],[R[112]]],[["option",[R[86]]],[R[86]]]]],[11,R[103],E,E,42,[[["self"],[R[113]]],[["option",[R[86]]],[R[86]]]]],[11,R[103],E,E,43,[[[R[114]],["self"]],[["option",[R[86]]],[R[86]]]]],[11,R[103],E,E,44,[[[R[115]],["self"]],[["option",[R[86]]],[R[86]]]]],[11,R[103],R[81],E,64,[[[R[110]],["self"]],[["option",[R[86]]],[R[86]]]]],[11,"lt",E,E,64,[[[R[110]],["self"]],["bool"]]],[11,"le",E,E,64,[[[R[110]],["self"]],["bool"]]],[11,"gt",E,E,64,[[[R[110]],["self"]],["bool"]]],[11,"ge",E,E,64,[[[R[110]],["self"]],["bool"]]],[11,R[103],R[82],E,65,[[["self"],["dogleg"]],[["option",[R[86]]],[R[86]]]]],[11,"lt",E,E,65,[[["self"],["dogleg"]],["bool"]]],[11,"le",E,E,65,[[["self"],["dogleg"]],["bool"]]],[11,"gt",E,E,65,[[["self"],["dogleg"]],["bool"]]],[11,"ge",E,E,65,[[["self"],["dogleg"]],["bool"]]],[11,R[103],R[83],E,66,[[[R[111]],["self"]],[["option",[R[86]]],[R[86]]]]],[11,"lt",E,E,66,[[[R[111]],["self"]],["bool"]]],[11,"le",E,E,66,[[[R[111]],["self"]],["bool"]]],[11,"gt",E,E,66,[[[R[111]],["self"]],["bool"]]],[11,"ge",E,E,66,[[[R[111]],["self"]],["bool"]]],[11,R[96],R[66],E,41,[[],[R[112]]]],[11,R[96],E,E,42,[[],[R[113]]]],[11,R[96],E,E,43,[[],[R[114]]]],[11,R[96],E,E,44,[[],[R[115]]]],[11,R[96],R[70],E,49,[[],[R[118]]]],[11,R[96],E,E,50,[[],[R[119]]]],[11,R[96],E,E,51,[[],[R[120]]]],[11,R[96],E,E,52,[[],[R[121]]]],[11,R[96],R[71],E,53,[[],["self"]]],[11,R[96],R[72],E,54,[[],["self"]]],[11,R[96],R[74],E,56,[[],["newton"]]],[11,R[96],R[80],E,62,[[],["self"]]],[11,R[96],R[81],E,64,[[],[R[110]]]],[11,R[96],R[82],E,65,[[],["dogleg"]]],[11,R[96],R[83],E,66,[[],[R[111]]]],[11,"eq",R[66],E,41,[[["self"],[R[112]]],["bool"]]],[11,"eq",E,E,42,[[["self"],[R[113]]],["bool"]]],[11,"eq",E,E,43,[[[R[114]],["self"]],["bool"]]],[11,"eq",E,E,44,[[[R[115]],["self"]],["bool"]]],[11,"eq",R[81],E,64,[[[R[110]],["self"]],["bool"]]],[11,"ne",E,E,64,[[[R[110]],["self"]],["bool"]]],[11,"eq",R[82],E,65,[[["self"],["dogleg"]],["bool"]]],[11,"ne",E,E,65,[[["self"],["dogleg"]],["bool"]]],[11,"eq",R[83],E,66,[[[R[111]],["self"]],["bool"]]],[11,"ne",E,E,66,[[[R[111]],["self"]],["bool"]]],[11,"clone",R[64],E,39,[[["self"]],[R[116]]]],[11,"clone",R[66],E,41,[[["self"]],[R[112]]]],[11,"clone",E,E,42,[[["self"]],[R[113]]]],[11,"clone",E,E,43,[[["self"]],[R[114]]]],[11,"clone",E,E,44,[[["self"]],[R[115]]]],[11,"clone",R[68],E,46,[[["self"]],[R[117]]]],[11,"clone",R[69],E,47,[[["self"]],["backtrackinglinesearch"]]],[11,"clone",R[70],E,49,[[["self"]],[R[118]]]],[11,"clone",E,E,50,[[["self"]],[R[119]]]],[11,"clone",E,E,51,[[["self"]],[R[120]]]],[11,"clone",E,E,52,[[["self"]],[R[121]]]],[11,"clone",R[71],E,53,[[["self"]],["hagerzhanglinesearch"]]],[11,"clone",R[72],E,54,[[["self"]],["morethuentelinesearch"]]],[11,"clone",R[80],E,62,[[["self"]],[R[122]]]],[11,"clone",R[81],E,64,[[["self"]],[R[110]]]],[11,"clone",R[82],E,65,[[["self"]],["dogleg"]]],[11,"clone",R[83],E,66,[[["self"]],[R[111]]]],[11,"cmp",R[66],E,41,[[["self"],[R[112]]],[R[86]]]],[11,"cmp",E,E,42,[[["self"],[R[113]]],[R[86]]]],[11,"cmp",E,E,43,[[[R[114]],["self"]],[R[86]]]],[11,"cmp",E,E,44,[[[R[115]],["self"]],[R[86]]]],[11,"fmt",E,E,41,[[[R[98]],["self"]],[R[7]]]],[11,"fmt",E,E,42,[[[R[98]],["self"]],[R[7]]]],[11,"fmt",E,E,43,[[[R[98]],["self"]],[R[7]]]],[11,"fmt",E,E,44,[[[R[98]],["self"]],[R[7]]]],[11,"fmt",R[70],E,49,[[[R[98]],["self"]],[R[7]]]],[11,"fmt",E,E,50,[[[R[98]],["self"]],[R[7]]]],[11,"fmt",E,E,51,[[[R[98]],["self"]],[R[7]]]],[11,"fmt",E,E,52,[[[R[98]],["self"]],[R[7]]]],[11,"fmt",R[80],E,62,[[[R[98]],["self"]],[R[7]]]],[11,"fmt",R[81],E,64,[[[R[98]],["self"]],[R[7]]]],[11,"fmt",R[82],E,65,[[[R[98]],["self"]],[R[7]]]],[11,"fmt",R[83],E,66,[[[R[98]],["self"]],[R[7]]]],[11,"hash",R[66],E,41,[[["self"],["__h"]]]],[11,"hash",E,E,42,[[["self"],["__h"]]]],[11,"hash",E,E,43,[[["self"],["__h"]]]],[11,"hash",E,E,44,[[["self"],["__h"]]]],[11,R[104],R[64],E,39,[[["__d"]],[R[7]]]],[11,R[104],R[65],E,40,[[["__d"]],[R[7]]]],[11,R[104],R[66],E,41,[[["__d"]],[R[7]]]],[11,R[104],E,E,42,[[["__d"]],[R[7]]]],[11,R[104],E,E,43,[[["__d"]],[R[7]]]],[11,R[104],E,E,44,[[["__d"]],[R[7]]]],[11,R[104],R[67],E,45,[[["__d"]],[R[7]]]],[11,R[104],R[68],E,46,[[["__d"]],[R[7]]]],[11,R[104],R[69],E,47,[[["__d"]],[R[7]]]],[11,R[104],R[70],E,49,[[["__d"]],[R[7]]]],[11,R[104],E,E,50,[[["__d"]],[R[7]]]],[11,R[104],E,E,51,[[["__d"]],[R[7]]]],[11,R[104],E,E,52,[[["__d"]],[R[7]]]],[11,R[104],R[71],E,53,[[["__d"]],[R[7]]]],[11,R[104],R[72],E,54,[[["__d"]],[R[7]]]],[11,R[104],R[73],E,55,[[["__d"]],[R[7]]]],[11,R[104],R[74],E,56,[[["__d"]],[R[7]]]],[11,R[104],R[75],E,57,[[["__d"]],[R[7]]]],[11,R[104],R[76],E,58,[[["__d"]],[R[7]]]],[11,R[104],R[77],E,59,[[["__d"]],[R[7]]]],[11,R[104],R[78],E,60,[[["__d"]],[R[7]]]],[11,R[104],R[79],E,61,[[["__d"]],[R[7]]]],[11,R[104],R[80],E,62,[[["__d"]],[R[7]]]],[11,R[104],E,E,63,[[["__d"]],[R[7]]]],[11,R[104],R[81],E,64,[[["__d"]],[R[7]]]],[11,R[104],R[82],E,65,[[["__d"]],[R[7]]]],[11,R[104],R[83],E,66,[[["__d"]],[R[7]]]],[11,R[104],R[84],E,67,[[["__d"]],[R[7]]]],[11,R[104],R[85],E,69,[[["__d"]],[R[7]]]],[11,R[104],E,E,68,[[["__d"]],[R[7]]]],[11,R[101],R[64],E,39,[[["__s"],["self"]],[R[7]]]],[11,R[101],R[65],E,40,[[["__s"],["self"]],[R[7]]]],[11,R[101],R[66],E,41,[[["__s"],["self"]],[R[7]]]],[11,R[101],E,E,42,[[["__s"],["self"]],[R[7]]]],[11,R[101],E,E,43,[[["__s"],["self"]],[R[7]]]],[11,R[101],E,E,44,[[["__s"],["self"]],[R[7]]]],[11,R[101],R[67],E,45,[[["__s"],["self"]],[R[7]]]],[11,R[101],R[68],E,46,[[["__s"],["self"]],[R[7]]]],[11,R[101],R[69],E,47,[[["__s"],["self"]],[R[7]]]],[11,R[101],R[70],E,49,[[["__s"],["self"]],[R[7]]]],[11,R[101],E,E,50,[[["__s"],["self"]],[R[7]]]],[11,R[101],E,E,51,[[["__s"],["self"]],[R[7]]]],[11,R[101],E,E,52,[[["__s"],["self"]],[R[7]]]],[11,R[101],R[71],E,53,[[["__s"],["self"]],[R[7]]]],[11,R[101],R[72],E,54,[[["__s"],["self"]],[R[7]]]],[11,R[101],R[73],E,55,[[["__s"],["self"]],[R[7]]]],[11,R[101],R[74],E,56,[[["__s"],["self"]],[R[7]]]],[11,R[101],R[75],E,57,[[["__s"],["self"]],[R[7]]]],[11,R[101],R[76],E,58,[[["__s"],["self"]],[R[7]]]],[11,R[101],R[77],E,59,[[["__s"],["self"]],[R[7]]]],[11,R[101],R[78],E,60,[[["__s"],["self"]],[R[7]]]],[11,R[101],R[79],E,61,[[["__s"],["self"]],[R[7]]]],[11,R[101],R[80],E,62,[[["__s"],["self"]],[R[7]]]],[11,R[101],E,E,63,[[["__s"],["self"]],[R[7]]]],[11,R[101],R[81],E,64,[[["__s"],["self"]],[R[7]]]],[11,R[101],R[82],E,65,[[["__s"],["self"]],[R[7]]]],[11,R[101],R[83],E,66,[[["__s"],["self"]],[R[7]]]],[11,R[101],R[84],E,67,[[["__s"],["self"]],[R[7]]]],[11,R[101],R[85],E,69,[[["__s"],["self"]],[R[7]]]],[11,R[101],E,E,68,[[["__s"],["self"]],[R[7]]]],[11,"init",R[64],E,39,[[["self"],[R[10]],[R[11]]],[[R[8]],["option",[R[9]]],[R[7],["option",R[8]]]]]],[11,R[123],E,R[125],39,[[["self"],[R[10]],[R[11]]],[[R[8]],[R[9]],[R[7],[R[9],R[8]]]]]],[11,"init",R[65],E,40,[[["self"],[R[10]],[R[11]]],[[R[8]],["option",[R[9]]],[R[7],["option",R[8]]]]]],[11,R[123],E,E,40,[[["self"],[R[10]],[R[11]]],[[R[8]],[R[9]],[R[7],[R[9],R[8]]]]]],[11,R[123],R[67],E,45,[[["self"],[R[10]],[R[11]]],[[R[8]],[R[9]],[R[7],[R[9],R[8]]]]]],[11,R[123],R[68],E,46,[[["self"],[R[10]],[R[11]]],[[R[8]],[R[9]],[R[7],[R[9],R[8]]]]]],[11,"init",R[69],E,47,[[["self"],[R[10]],[R[11]]],[[R[8]],["option",[R[9]]],[R[7],["option",R[8]]]]]],[11,R[123],E,E,47,[[["self"],[R[10]],[R[11]]],[[R[8]],[R[9]],[R[7],[R[9],R[8]]]]]],[11,R[124],E,E,47,[[["self"],[R[11]]],[R[12]]]],[11,"init",R[71],E,53,[[["self"],[R[10]],[R[11]]],[[R[8]],["option",[R[9]]],[R[7],["option",R[8]]]]]],[11,R[123],E,E,53,[[["self"],[R[10]],[R[11]]],[[R[8]],[R[9]],[R[7],[R[9],R[8]]]]]],[11,R[124],E,E,53,[[["self"],[R[11]]],[R[12]]]],[11,"init",R[72],E,54,[[["self"],[R[10]],[R[11]]],[[R[8]],["option",[R[9]]],[R[7],["option",R[8]]]]]],[11,R[123],E,E,54,[[["self"],[R[10]],[R[11]]],[[R[8]],[R[9]],[R[7],[R[9],R[8]]]]]],[11,R[123],R[73],E,55,[[["self"],[R[10]],[R[11]]],[[R[8]],[R[9]],[R[7],[R[9],R[8]]]]]],[11,R[124],E,E,55,[[["self"],[R[11]]],[R[12]]]],[11,R[123],R[74],E,56,[[["self"],[R[10]],[R[11]]],[[R[8]],[R[9]],[R[7],[R[9],R[8]]]]]],[11,"init",R[75],E,57,[[["self"],[R[10]],[R[11]]],[[R[8]],["option",[R[9]]],[R[7],["option",R[8]]]]]],[11,R[123],E,E,57,[[["self"],[R[10]],[R[11]]],[[R[8]],[R[9]],[R[7],[R[9],R[8]]]]]],[11,R[124],E,E,57,[[["self"],[R[11]]],[R[12]]]],[11,"init",R[76],E,58,[[["self"],[R[10]],[R[11]]],[[R[8]],["option",[R[9]]],[R[7],["option",R[8]]]]]],[11,R[123],E,E,58,[[["self"],[R[10]],[R[11]]],[[R[8]],[R[9]],[R[7],[R[9],R[8]]]]]],[11,R[124],E,E,58,[[["self"],[R[11]]],[R[12]]]],[11,"init",R[77],E,59,[[["self"],[R[10]],[R[11]]],[[R[8]],["option",[R[9]]],[R[7],["option",R[8]]]]]],[11,R[123],E,E,59,[[["self"],[R[10]],[R[11]]],[[R[8]],[R[9]],[R[7],[R[9],R[8]]]]]],[11,R[124],E,E,59,[[["self"],[R[11]]],[R[12]]]],[11,"init",R[78],E,60,[[["self"],[R[10]],[R[11]]],[[R[8]],["option",[R[9]]],[R[7],["option",R[8]]]]]],[11,R[123],E,E,60,[[["self"],[R[10]],[R[11]]],[[R[8]],[R[9]],[R[7],[R[9],R[8]]]]]],[11,R[124],E,E,60,[[["self"],[R[11]]],[R[12]]]],[11,"init",R[79],E,61,[[["self"],[R[10]],[R[11]]],[[R[8]],["option",[R[9]]],[R[7],["option",R[8]]]]]],[11,R[123],E,E,61,[[["self"],[R[10]],[R[11]]],[[R[8]],[R[9]],[R[7],[R[9],R[8]]]]]],[11,R[124],E,E,61,[[["self"],[R[11]]],[R[12]]]],[11,"init",R[80],E,63,[[["self"],[R[10]],[R[11]]],[[R[8]],["option",[R[9]]],[R[7],["option",R[8]]]]]],[11,R[123],E,R[125],63,[[["self"],[R[10]],[R[11]]],[[R[8]],[R[9]],[R[7],[R[9],R[8]]]]]],[11,R[124],E,E,63,[[["self"],[R[11]]],[R[12]]]],[11,R[123],R[81],E,64,[[["self"],[R[10]],[R[11]]],[[R[8]],[R[9]],[R[7],[R[9],R[8]]]]]],[11,R[124],E,E,64,[[["self"],[R[11]]],[R[12]]]],[11,R[123],R[82],E,65,[[["self"],[R[10]],[R[11]]],[[R[8]],[R[9]],[R[7],[R[9],R[8]]]]]],[11,R[124],E,E,65,[[["self"],[R[11]]],[R[12]]]],[11,"init",R[83],E,66,[[["self"],[R[10]],[R[11]]],[[R[8]],["option",[R[9]]],[R[7],["option",R[8]]]]]],[11,R[123],E,E,66,[[["self"],[R[10]],[R[11]]],[[R[8]],[R[9]],[R[7],[R[9],R[8]]]]]],[11,R[124],E,E,66,[[["self"],[R[11]]],[R[12]]]],[11,"init",R[84],E,67,[[["self"],[R[10]],[R[11]]],[[R[8]],["option",[R[9]]],[R[7],["option",R[8]]]]]],[11,R[123],E,E,67,[[["self"],[R[10]],[R[11]]],[[R[8]],[R[9]],[R[7],[R[9],R[8]]]]]],[11,R[124],E,E,67,[[["self"],[R[11]]],[R[12]]]],[11,R[123],R[85],"Perform one iteration of algorithm",69,[[["self"],[R[10]],[R[11]]],[[R[8]],[R[9]],[R[7],[R[9],R[8]]]]]],[11,R[126],R[69],R[128],47,[[["self"],["p"]]]],[11,R[127],E,R[129],47,[[["self"],["f64"]],[[R[8]],[R[7],[R[8]]]]]],[11,R[126],R[71],R[128],53,[[["self"],["p"]]]],[11,R[127],E,R[129],53,[[["self"],["f64"]],[[R[8]],[R[7],[R[8]]]]]],[11,R[126],R[72],R[128],54,[[["self"],["p"]]]],[11,R[127],E,R[129],54,[[["self"],["f64"]],[[R[8]],[R[7],[R[8]]]]]],[11,R[130],R[81],E,64,[[["self"],["f64"]]]],[11,R[130],R[82],E,65,[[["self"],["f64"]]]],[11,R[130],R[83],E,66,[[["self"],["f64"]]]],[11,"update",R[66],E,41,[[[T],["self"]],["f64"]]],[11,"update",E,E,42,[[[T],["self"]],["f64"]]],[11,"update",E,E,43,[[[T],["self"]],["f64"]]],[11,"update",E,E,44,[[[T],["self"]],["f64"]]],[11,"new",R[49],E,70,[[["o"],["s"]],[R[91]]]],[11,"from_checkpoint",E,E,70,[[["p"]],[[R[8]],[R[91]],[R[7],[R[91],R[8]]]]]],[11,"run",E,E,70,[[],[[R[7],[R[90],R[8]]],[R[8]],[R[90]]]]],[11,"add_observer",E,"Attaches a observer which implements `ArgminLog` to the…",70,[[[R[93]],["obs"]],[R[91]]]],[11,R[45],E,"Set maximum number of iterations",70,[[["u64"]],[R[91]]]],[11,R[131],E,"Set target cost value",70,[[["f64"]],[R[91]]]],[11,"cost",E,"Set cost value",70,[[["f64"]],[R[91]]]],[11,"grad",E,"Set Gradient",70,[[],[R[91]]]],[11,R[43],E,"Set Hessian",70,[[],[R[91]]]],[11,"checkpoint_dir",E,"Set checkpoint directory",70,[[["str"]],[R[91]]]],[11,"checkpoint_name",E,"Set checkpoint name",70,[[["str"]],[R[91]]]],[11,"checkpoint_mode",E,E,70,[[[R[95]]],[R[91]]]],[11,"ctrlc",E,"Turn Ctrl-C handling on or off (default: on)",70,[[["bool"]],[R[91]]]],[11,"new",R[50],"Create a new empty `PerturbationVector`",1,[[],[R[108]]]],[11,"add",E,"Add an index `x_idx` and the corresponding function…",1,[[["vec",["usize"]],["usize"]],[R[108]]]],[11,"new",R[2],R[35],71,[[],[R[9]]]],[11,"param",E,"Set parameter vector",71,[[],[R[9]]]],[11,"cost",E,"Set cost function value",71,[[["f64"]],[R[9]]]],[11,"grad",E,"Set gradient",71,[[],[R[9]]]],[11,R[43],E,"Set hessian",71,[[],[R[9]]]],[11,"kv",E,"Adds an `ArgminKV`",71,[[[R[32]]],[R[9]]]],[11,R[132],E,"Set termination reason",71,[[[R[12]]],[R[9]]]],[11,R[137],E,"Get parameter vector",71,[[["self"]],["option"]]],[11,"get_cost",E,"Get cost function value",71,[[["self"]],[["option",["f64"]],["f64"]]]],[11,"get_grad",E,"Get gradient",71,[[["self"]],["option"]]],[11,R[139],E,"Get hessian",71,[[["self"]],["option"]]],[11,R[138],E,"Get termination reason",71,[[["self"]],[[R[12]],["option",[R[12]]]]]],[11,"get_kv",E,"Return KV",71,[[["self"]],[R[32]]]],[11,"new",R[57],E,72,[[["str"]],[R[92]]]],[11,R[102],E,E,72,[[[R[87]]],[R[92]]]],[11,R[140],R[2],"Returns `true` if a solver terminated and `false` otherwise",9,[[],["bool"]]],[11,"text",E,"Returns a texual representation of what happened",9,[[["self"]],["str"]]],[11,"new",E,E,73,[[["str"],[R[95]]],[[R[7],[R[88],R[8]]],[R[88]],[R[8]]]]],[11,"set_dir",E,E,73,[[["str"],["self"]]]],[11,"dir",E,E,73,[[["self"]],[R[62]]]],[11,"set_name",E,E,73,[[["str"],["self"]]]],[11,"name",E,E,73,[[["self"]],[R[62]]]],[11,"set_mode",E,E,73,[[["self"],[R[95]]]]],[11,"store",E,E,73,[[[R[62]],[T],["self"]],[[R[8]],[R[7],[R[8]]]]]],[11,"store_cond",E,E,73,[[[T],["self"],["u64"]],[[R[8]],[R[7],[R[8]]]]]],[11,"new",E,R[35],74,[[],[R[94]]]],[11,"new",E,R[35],14,[[["o"],[R[11]]],[R[90]]]],[11,"new",R[61],E,20,[[["e"],["l"],["p"]],[R[18]]]],[11,"new",R[2],R[35],21,[[],[R[32]]]],[11,"push",E,"Push a key-value pair to the `kv` vector.",21,[[["self"],[T],["str"]],[R[32]]]],[11,"merge",E,"Merge another `kv` into `self.kv`",21,[[[R[32]]],[R[32]]]],[11,"new",E,R[35],75,[[],[R[89]]]],[11,"from_boxed_compat",E,"Creates an `Error` from `Box<std::error::Error>`.",76,[[["box",[R[8]]],[R[8]]],[R[8]]]],[11,"as_fail",E,"Return a reference to the underlying failure that this…",76,[[["self"]],["fail"]]],[11,"name",E,"Returns the name of the underlying fail.",76,[[["self"]],[["str"],["option",["str"]]]]],[11,"cause",E,"Returns a reference to the underlying cause of this…",76,[[["self"]],["fail"]]],[11,R[107],E,"Gets a reference to the `Backtrace` for this `Error`.",76,[[["self"]],[R[107]]]],[11,"context",E,"Provides context for this `Error`.",76,[[["d"]],["context"]]],[11,"compat",E,"Wraps `Error` in a compatibility type.",76,[[],[["compat",[R[8]]],[R[8]]]]],[11,"downcast",E,R[133],76,[[],[[R[8]],[R[7],[R[8]]]]]],[11,"find_root_cause",E,"Returns the \"root cause\" of this error - the last value in…",76,[[["self"]],["fail"]]],[11,"iter_causes",E,"Returns a iterator over the causes of this error with the…",76,[[["self"]],["causes"]]],[11,"iter_chain",E,"Returns a iterator over all fails up the chain from the…",76,[[["self"]],["causes"]]],[11,"downcast_ref",E,R[133],76,[[["self"]],[[T],["option"]]]],[11,"downcast_mut",E,R[133],76,[[["self"]],[["option"],[T]]]],[11,"root_cause",E,"Deprecated alias to `find_root_cause`.",76,[[["self"]],["fail"]]],[11,"causes",E,"Deprecated alias to `iter_causes`.",76,[[["self"]],["causes"]]],[11,"new",E,R[35],77,[[],[R[97]]]],[11,"push",E,"Push another `Observe` to the `observer` field",77,[[[R[93]],["obs"],["self"]],[R[97]]]],[11,"new",E,"Create new IterState from `param`",30,[[],[R[11]]]],[11,"param",E,"Set parameter vector. This shifts the stored parameter…",30,[[["self"]],[R[11]]]],[11,R[134],E,"Set best paramater vector. This shifts the stored best…",30,[[["self"]],[R[11]]]],[11,"cost",E,"Set the current cost function value. This shifts the…",30,[[["self"],["f64"]],[R[11]]]],[11,R[135],E,"Set the current best cost function value. This shifts the…",30,[[["self"],["f64"]],[R[11]]]],[11,"grad",E,"Set gradient. This shifts the stored gradient to the…",30,[[["self"]],[R[11]]]],[11,R[43],E,"Set Hessian. This shifts the stored Hessian to the…",30,[[["self"]],[R[11]]]],[11,R[131],E,E,30,[[["self"],["f64"]],[R[11]]]],[11,R[45],E,E,30,[[["self"],["u64"]],[R[11]]]],[11,R[136],E,E,30,[[["self"],["u64"]],[R[11]]]],[11,R[132],E,E,30,[[["self"],[R[12]]],[R[11]]]],[11,"time",E,E,30,[[["duration"],["self"]],[R[11]]]],[11,R[137],E,E,30,[[["self"]]]],[11,"get_prev_param",E,E,30,[[["self"]]]],[11,"get_best_param",E,E,30,[[["self"]]]],[11,"get_prev_best_param",E,E,30,[[["self"]]]],[11,"get_cost",E,E,30,[[["self"]],["f64"]]],[11,"get_prev_cost",E,E,30,[[["self"]],["f64"]]],[11,"get_best_cost",E,E,30,[[["self"]],["f64"]]],[11,"get_prev_best_cost",E,E,30,[[["self"]],["f64"]]],[11,"get_target_cost",E,E,30,[[["self"]],["f64"]]],[11,"get_cost_func_count",E,E,30,[[["self"]],["u64"]]],[11,"get_grad_func_count",E,E,30,[[["self"]],["u64"]]],[11,"get_hessian_func_count",E,E,30,[[["self"]],["u64"]]],[11,"get_modify_func_count",E,E,30,[[["self"]],["u64"]]],[11,"get_last_best_iter",E,E,30,[[["self"]],["u64"]]],[11,R[138],E,E,30,[[["self"]],[R[12]]]],[11,"get_time",E,E,30,[[["self"]],["duration"]]],[11,"get_grad",E,E,30,[[["self"]],["option"]]],[11,"get_prev_grad",E,E,30,[[["self"]],["option"]]],[11,R[139],E,E,30,[[["self"]],["option"]]],[11,"get_prev_hessian",E,E,30,[[["self"]],["option"]]],[11,"get_iter",E,E,30,[[["self"]],["u64"]]],[11,"get_max_iters",E,E,30,[[["self"]],["u64"]]],[11,"increment_iter",E,"Increment the number of iterations by one",30,[[["self"]]]],[11,"increment_func_counts",E,"Increment all function evaluation counts by the evaluation…",30,[[["self"],[R[10]]]]],[11,"set_func_counts",E,"Set all function evaluation counts to the evaluation…",30,[[["self"],[R[10]]]]],[11,"increment_cost_func_count",E,"Increment cost function evaluation count by `num`",30,[[["self"],["u64"]]]],[11,"increment_grad_func_count",E,"Increment gradient function evaluation count by `num`",30,[[["self"],["u64"]]]],[11,"increment_hessian_func_count",E,"Increment Hessian function evaluation count by `num`",30,[[["self"],["u64"]]]],[11,"increment_modify_func_count",E,"Increment modify function evaluation count by `num`",30,[[["self"],["u64"]]]],[11,"new_best",E,"Indicate that a new best parameter vector was found",30,[[["self"]]]],[11,"is_best",E,"Returns whether the current parameter vector is also the…",30,[[["self"]],["bool"]]],[11,R[140],E,"Return whether the algorithm has terminated or not",30,[[["self"]],["bool"]]],[11,"term",R[63],"Log to the terminal in a blocking way",78,[[],[R[141]]]],[11,"term_noblock",E,"Log to the terminal in a non-blocking way (in case of…",78,[[],[R[141]]]],[11,"file",E,"Log JSON to a file in a blocking way",78,[[["str"]],[[R[141]],[R[8]],[R[7],[R[141],R[8]]]]]],[11,"file_noblock",E,"Log JSON to a file in a non-blocking way (in case of…",78,[[["str"]],[[R[141]],[R[8]],[R[7],[R[141],R[8]]]]]],[11,"new",R[2],R[35],36,[[["o"]],[R[10]]]],[11,"apply",E,"Calls the `apply` method of `op` and increments…",36,[[["self"]],[[R[7],[R[8]]],[R[8]]]]],[11,R[99],E,"Calls the `gradient` method of `op` and increments…",36,[[["self"]],[[R[8]],[R[7],[R[8]]]]]],[11,R[43],E,"Calls the `hessian` method of `op` and increments…",36,[[["self"]],[[R[7],[R[8]]],[R[8]]]]],[11,"modify",E,"Calls the `modify` method of `op` and increments…",36,[[["self"],["f64"]],[[R[8]],[R[7],[R[8]]]]]],[11,"consume_op",E,"Consumes an operator by increasing the function call…",36,[[["self"],[R[10]]]]],[11,"reset",E,"Reset the cost function counts to zero",36,[[],[R[10]]]],[11,"get_op",E,"Returns the operator `op` by taking ownership of `self`.",36,[[],["o"]]],[11,"clone_op",E,"Returns a clone of the operator `op`.",36,[[["self"]],["o"]]],[11,"new_from_op",E,"Creates a new `OpWrapper<O>` from another `OpWrapper<O>`…",36,[[[R[10]]],[R[10]]]]],"p":[[8,R[142]],[3,R[143]],[8,"ArgminOp"],[8,"Solver"],[8,R[144]],[8,R[145]],[8,R[146]],[8,R[147]],[4,R[148]],[4,R[149]],[8,R[150]],[4,R[151]],[8,R[152]],[8,R[153]],[3,R[154]],[8,R[155]],[8,R[156]],[8,R[157]],[8,R[158]],[8,R[159]],[3,R[160]],[3,"ArgminKV"],[4,R[161]],[8,R[162]],[4,R[163]],[8,R[164]],[8,R[165]],[8,R[166]],[8,R[167]],[8,R[168]],[3,R[169]],[8,R[170]],[3,R[171]],[8,R[172]],[8,R[173]],[8,R[174]],[3,R[175]],[8,"Observe"],[8,R[176]],[3,R[177]],[3,R[178]],[3,R[179]],[3,R[180]],[3,R[181]],[3,R[182]],[3,R[183]],[3,R[184]],[3,R[185]],[8,R[186]],[3,R[187]],[3,R[188]],[3,R[189]],[3,R[190]],[3,R[191]],[3,R[192]],[3,"NewtonCG"],[3,"Newton"],[3,"BFGS"],[3,"DFP"],[3,"LBFGS"],[3,"SR1"],[3,R[193]],[4,R[194]],[3,R[195]],[3,R[196]],[3,"Dogleg"],[3,"Steihaug"],[3,R[197]],[3,"Particle"],[3,R[198]],[3,R[1]],[3,R[199]],[3,R[200]],[3,R[201]],[3,R[202]],[3,R[203]],[3,"Error"],[3,"Observer"],[3,R[204]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);