var N=null,E="",T="t",U="u",searchIndex={};
var R=["Executor","argmin::prelude","Calculation of the Jacobian J(x) of a vector function `fs`…","Calculation of the product of the Jacobian J(x) of a…","Calculation of the product of the Hessian H(x) of a…","Hessian","Jacobian","result","error","Computes the Hessian at the given parameters","argminiterdata","iterstate","opwrapper","terminationreason","Set the initial step length","arraybase","ownedrepr","argmin::prelude::modcholesky","decomposition","Dot/scalar product of `T` and `self`","Add a `T` to `self`","Subtract a `T` scaled by an `U` from `self`","(Pointwise) Multiply a `T` with `self`","jacobian","cost_func_count","grad_func_count","hessian_func_count","jacobian_func_count","modify_func_count","Add a `T` scaled by an `U` to `self`","argmin::prelude::ArgminError","Compute the l2-norm (`U`) of `self`","Return zero(s)","Subtract a `T` from `self`","operator","(Pointwise) Divide a `T` by `self`","argminkv","Brent's method","argmin::solver","argmin::solver::conjugategradient","Constructor","argmin::solver::gaussnewton","argmin::solver::linesearch","set gamma","set alpha limits","set sigma","Newton Methods","argmin::solver::newton","References:","argmin::solver::quasinewton","hessian","argmin::solver::trustregion","max_iters","set radius","Rastrigin test function","Ackley test function","argmin::prelude::executor","to_owned","argmin::prelude::finitediff","clone_into","try_from","try_into","borrow_mut","type_id","borrow","typeid","to_string","argmin::prelude::visualizer","argmin::prelude::file","string","argmin::solver::brent","as_fail","argmin::solver::conjugategradient::cg","argmin::solver::conjugategradient::nonlinear_cg","argmin::solver::conjugategradient::beta","argmin::solver::gaussnewton::gaussnewton_linesearch","argmin::solver::gaussnewton::gaussnewton_method","argmin::solver::gradientdescent::steepestdescent","argmin::solver::landweber","argmin::solver::linesearch::backtracking","argmin::solver::linesearch::condition","argmin::solver::linesearch::hagerzhang","argmin::solver::linesearch::morethuente","argmin::solver::neldermead","argmin::solver::newton::newton_cg","argmin::solver::newton::newton_method","argmin::solver::particleswarm","argmin::solver::quasinewton::bfgs","argmin::solver::quasinewton::dfp","argmin::solver::quasinewton::lbfgs","argmin::solver::quasinewton::sr1","argmin::solver::quasinewton::sr1_trustregion","argmin::solver::simulatedannealing","argmin::solver::trustregion::cauchypoint","argmin::solver::trustregion::dogleg","argmin::solver::trustregion::steihaug","argmin::solver::trustregion::trustregion_method","formatter","deserialize","writetofile","writetofileserializer","argminresult","executor","observermode","argmincheckpoint","minimalnooperator","nooperator","checkpointmode","Do nothing, really.","gradient","serialize","serializer","backtrace","partial_cmp","ordering","default","observe_init","observe_iter","perturbationvector","requires_cur_grad","gaussnewton","neldermead","cauchypoint","conjugategradient","fletcherreeves","polakribiere","polakribiereplus","hestenesstiefel","steepestdescent","landweber","armijocondition","wolfecondition","strongwolfecondition","goldsteincondition","satempfunc","simulatedannealing","steihaug","trustregion","next_iter","terminate","set_search_direction","set_init_alpha","Set search direction","Set initial alpha value","set_radius","target_cost","Set Hessian","Set Jacobian","population","termination_reason","Attempts to downcast this `Error` to a particular `Fail`…","visualizer3d","best_param","best_cost","last_best_iter","get_param","get_termination_reason","duration","get_hessian","get_jacobian","get_population","argminsloglogger","observer","terminated","PerturbationVector","FiniteDiff","ArgminLineSearch","ArgminTrustRegion","ArgminNLCGBetaUpdate","ArgminEye","OpWrapper","ArgminTranspose","ModCholeskyGMW81","ModCholeskySE99","Decomposition","GershgorinCircles","ModCholeskySE90","ArgminRandom","ArgminMinMax","ArgminDot","ArgminAdd","ArgminScaledSub","ArgminMul","IterState","WriteToFileSerializer","ObserverMode","ArgminZero","ArgminSlogKV","ArgminScaledAdd","ArgminError","ArgminWeightedDot","ArgminNorm","TerminationReason","ArgminZeroLike","ArgminConj","ArgminSub","ArgminResult","ArgminDiv","ArgminInv","CheckpointMode","ConjugateGradient","NonlinearConjugateGradient","FletcherReeves","PolakRibiere","PolakRibierePlus","HestenesStiefel","GaussNewtonLS","GaussNewton","SteepestDescent","Landweber","BacktrackingLineSearch","LineSearchCondition","ArmijoCondition","WolfeCondition","StrongWolfeCondition","GoldsteinCondition","HagerZhangLineSearch","MoreThuenteLineSearch","NelderMead","ParticleSwarm","SR1TrustRegion","SATempFunc","SimulatedAnnealing","CauchyPoint","TrustRegion","ArgminIterData","MinimalNoOperator","ArgminCheckpoint","Visualizer3d","ArgminSlogLogger","WriteToFile","NoOperator","BrentError"];

searchIndex["argmin"]={"doc":"A pure Rust optimization framework","i":[[0,"prelude","argmin","Definition of all relevant traits and types # Re-export of…",N,N],[0,"macros",R[1],"Macros # Macros",N,N],[0,R[102],E,R[0],N,N],[3,R[0],R[56],E,N,N],[0,"finitediff",R[1],"Finite Differentiation",N,N],[3,R[164],R[58],"Perturbation Vector for the accelerated computation of the…",N,N],[12,"x_idx",E,"x indices",0,N],[12,"r_idx",E,"correspoding function indices",0,N],[8,R[165],E,E,N,N],[16,R[6],E,E,1,N],[16,R[5],E,E,1,N],[16,"OperatorOutput",E,E,1,N],[10,"forward_diff",E,"Forward difference calculated as",1,[[["self"],["fn"]],["self"]]],[10,"central_diff",E,"Central difference calculated as",1,[[["self"],["fn"]],["self"]]],[10,"forward_jacobian",E,R[2],1,[[["self"],["fn"]]]],[10,"central_jacobian",E,R[2],1,[[["self"],["fn"]]]],[10,"forward_jacobian_vec_prod",E,R[3],1,[[["self"],["fn"]],["self"]]],[10,"central_jacobian_vec_prod",E,R[3],1,[[["self"],["fn"]],["self"]]],[10,"forward_jacobian_pert",E,E,1,[[["self"],["fn"],["vec"]]]],[10,"central_jacobian_pert",E,E,1,[[["self"],["fn"],["vec"]]]],[10,"forward_hessian",E,"Calculation of the Hessian using forward differences",1,[[["self"],["fn"]]]],[10,"central_hessian",E,"Calculation of the Hessian using central differences",1,[[["self"],["fn"]]]],[10,"forward_hessian_vec_prod",E,R[4],1,[[["self"],["fn"]],["self"]]],[10,"central_hessian_vec_prod",E,R[4],1,[[["self"],["fn"]],["self"]]],[10,"forward_hessian_nograd",E,"Calculation of the Hessian using forward differences…",1,[[["self"],["fn"]]]],[10,"forward_hessian_nograd_sparse",E,"Calculation of a sparse Hessian using forward differences…",1,[[["self"],["fn"],["vec"]]]],[6,"PerturbationVectors",E,"A collection of `PerturbationVector`s",N,N],[8,"ArgminOp",R[1],"This trait needs to be implemented for every operator/cost…",N,N],[16,"Param",E,"Type of the parameter vector",2,N],[16,"Output",E,"Output of the operator",2,N],[16,R[5],E,"Type of Hessian",2,N],[16,R[6],E,"Type of Jacobian",2,N],[11,"apply",E,"Applies the operator/cost function to parameters",2,[[["self"]],[[R[8]],[R[7],[R[8]]]]]],[11,R[109],E,"Computes the gradient at the given parameters",2,[[["self"]],[[R[8]],[R[7],[R[8]]]]]],[11,R[50],E,R[9],2,[[["self"]],[[R[8]],[R[7],[R[8]]]]]],[11,R[23],E,R[9],2,[[["self"]],[[R[7],[R[8]]],[R[8]]]]],[11,"modify",E,"Modifies a parameter vector. Comes with a variable that…",2,[[["self"],["f64"]],[[R[8]],[R[7],[R[8]]]]]],[8,"Solver",E,E,N,N],[18,"NAME",E,E,3,N],[10,R[138],E,"Computes one iteration of the algorithm.",3,[[["self"],[R[11]],[R[12]]],[[R[7],[R[10],R[8]]],[R[10]],[R[8]]]]],[11,"init",E,"Initializes the algorithm",3,[[["self"],[R[11]],[R[12]]],[[R[7],["option",R[8]]],["option",[R[10]]],[R[8]]]]],[11,"terminate_internal",E,"Checks whether basic termination reasons apply.",3,[[["self"],[R[11]]],[R[13]]]],[11,R[139],E,"Checks whether the algorithm must be terminated",3,[[["self"],[R[11]]],[R[13]]]],[3,R[225],E,"The datastructure which is returned by the `next_iter`…",N,N],[8,R[166],E,"Defines a common interface for line search methods.",N,N],[10,R[140],E,"Set the search direction",4,[[["self"],["p"]]]],[10,R[141],E,R[14],4,[[["self"],["f64"]],[[R[7],[R[8]]],[R[8]]]]],[8,R[167],E,"Defines a common interface to methods which calculate…",N,N],[10,R[144],E,R[14],5,[[["self"],["f64"]]]],[8,R[168],E,"Common interface for beta update methods (Nonlinear-CG)",N,N],[10,"update",E,"Update beta Parameter 1: \\nabla f_k Parameter 2: \\nabla…",6,[[["self"],[T]],["f64"]]],[3,"ArgminKV",E,"A simple key-value storage",N,N],[12,"kv",E,"The actual key value storage",7,N],[3,"Surface",E,"Helper class for visualized surface",N,N],[3,R[226],E,E,N,N],[3,"Error",E,"The `Error` type, which can contain any failure.",N,N],[3,R[227],E,E,N,N],[8,R[169],E,E,N,N],[10,"eye",E,E,8,[[["usize"]],["self"]]],[10,"eye_like",E,E,8,[[["self"]],["self"]]],[3,R[170],E,"This wraps an operator and keeps track of how often the…",N,N],[12,R[24],E,E,9,N],[12,R[25],E,E,9,N],[12,R[26],E,E,9,N],[12,R[27],E,E,9,N],[12,R[28],E,E,9,N],[8,R[171],E,E,N,N],[10,T,E,E,10,[[],["self"]]],[0,"modcholesky",E,"Modified Cholesky decompositions Modified Cholesky…",N,N],[8,R[172],R[17],"Gill, Murray and Wright (1981)",N,N],[11,"mod_cholesky_gmw81",E,"Computes the modified Cholesky decomposition with the…",11,[[["self"]],[R[18]]]],[0,"utils",E,"Utility functions",N,N],[5,"eigenvalues_2x2","argmin::prelude::modcholesky::utils","Computes the Eigenvalues of a 2x2 matrix",N,[[[R[15]]]]],[5,"swap_columns",E,"Swaps columns `idx1` and `idx2` of matrix `mat`",N,[[[R[15]],["usize"]]]],[5,"swap_rows",E,"Swaps rows `idx1` and `idx2` of matrix `mat`",N,[[[R[15]],["usize"]]]],[5,"index_of_largest",E,"Returns the index of the largest element in a 1D array",N,[[[R[15]]],["usize"]]],[5,"index_of_largest_abs",E,"Returns the index of the element with the largest absolute…",N,[[[R[15]]],["usize"]]],[5,"index_to_permutation_mat",E,"Returns the permutation matrix for a vector of permuted…",N,[[],[["dim"],[R[16],["f64"]],[R[15],[R[16],"dim"]]]]],[5,"diag_mat_from_arr",E,"Builds a diagonal matrix from a 1D slice",N,[[],[["dim"],[R[15],[R[16],"dim"]],[R[16]]]]],[5,"random_householder",E,"Returns a random Householder matrix of dimension `dim` and…",N,[[["usize"],["u8"]],[["dim"],[R[16],["f64"]],[R[15],[R[16],"dim"]]]]],[5,"random_diagonal",E,"Returns a random diagonal matrix with Eigenvalues…",N,[[["u8"],["usize"]],[["dim"],[R[16],["f64"]],[R[15],[R[16],"dim"]]]]],[8,R[173],R[17],"Schnabel & Eskow algorithm (1999)",N,N],[11,"mod_cholesky_se99",E,"Computes the modified Cholesky decomposition with the SE99…",12,[[["self"]],[R[18]]]],[3,R[174],E,E,N,N],[12,"l",E,E,13,N],[12,"e",E,E,13,N],[12,"p",E,E,13,N],[8,R[175],E,"Gershgorin circles",N,N],[10,"gershgorin_circles",E,"Computes the Gershgorin Circles of a matrix",14,[[["self"]],["vec"]]],[8,R[176],E,"Schnabel & Eskow algorithm (1990)",N,N],[11,"mod_cholesky_se90",E,"Computes the modified Cholesky decomposition with the SE90…",15,[[["self"]],[R[18]]]],[8,R[177],R[1],E,N,N],[10,"rand_from_range",E,"Get a random element between min and max,",16,[[["self"]],["self"]]],[8,R[178],E,E,N,N],[10,"min",E,"Select piecewise minimum / maximum",17,[[["self"]],["self"]]],[10,"max",E,E,17,[[["self"]],["self"]]],[8,R[179],E,R[19],N,N],[10,"dot",E,R[19],18,[[["self"],[T]],[U]]],[14,"trait_bound",E,"Reuse a list of trait bounds by giving it a name, e.g.…",N,N],[8,R[180],E,R[20],N,N],[10,"add",E,R[20],19,[[["self"],[T]],[U]]],[8,R[181],E,R[21],N,N],[10,"scaled_sub",E,R[21],20,[[["self"],[U],[T]],["v"]]],[8,R[182],E,R[22],N,N],[10,"mul",E,R[22],21,[[["self"],[T]],[U]]],[0,"visualizer",E,"Observer which visualizes the progress of the solver",N,N],[3,R[228],R[67],"Visualize iterations of a solver for cost functions of…",N,N],[3,R[183],R[1],E,N,N],[12,"param",E,"Current parameter vector",22,N],[12,"prev_param",E,"Previous parameter vector",22,N],[12,R[152],E,"Current best parameter vector",22,N],[12,"prev_best_param",E,"Previous best parameter vector",22,N],[12,"cost",E,"Current cost function value",22,N],[12,"prev_cost",E,"Previous cost function value",22,N],[12,R[153],E,"Current best cost function value",22,N],[12,"prev_best_cost",E,"Previous best cost function value",22,N],[12,R[145],E,"Target cost function value",22,N],[12,"grad",E,"Current gradient",22,N],[12,"prev_grad",E,"Previous gradient",22,N],[12,R[50],E,"Current Hessian",22,N],[12,"prev_hessian",E,"Previous Hessian",22,N],[12,R[23],E,"Current Jacobian",22,N],[12,"prev_jacobian",E,"Previous Jacobian",22,N],[12,R[148],E,"All members for population-based algorithms as (param,…",22,N],[12,"iter",E,"Current iteration",22,N],[12,R[154],E,"Iteration number of last best cost",22,N],[12,R[52],E,"Maximum number of iterations",22,N],[12,R[24],E,"Number of cost function evaluations so far",22,N],[12,R[25],E,"Number of gradient evaluations so far",22,N],[12,R[26],E,"Number of Hessian evaluations so far",22,N],[12,R[27],E,"Number of Jacobian evaluations so far",22,N],[12,R[28],E,"Number of modify evaluations so far",22,N],[12,"time",E,"Time required so far",22,N],[12,R[149],E,"Reason of termination",22,N],[4,R[184],E,E,N,N],[13,"Bincode",E,E,23,N],[13,"JSON",E,E,23,N],[4,R[185],E,"This is used to indicate how often the observer will…",N,N],[13,"Never",E,E,24,N],[13,"Always",E,E,24,N],[13,"Every",E,E,24,N],[13,"NewBest",E,E,24,N],[8,R[186],E,"Return param vector of all zeros (for now, this is a hack.…",N,N],[10,"zero",E,R[32],25,[[],["self"]]],[3,R[229],E,"A logger based on `slog`",N,N],[3,R[187],E,"This type is necessary in order to be able to implement…",N,N],[12,"kv",E,E,26,N],[8,R[188],E,R[29],N,N],[10,"scaled_add",E,R[29],27,[[["self"],[U],[T]],["v"]]],[4,R[189],E,E,N,N],[13,"InvalidParameter",E,"Indicates and invalid parameter",28,N],[12,"text",R[30],E,28,N],[13,"NotImplemented",R[1],"Indicates that a function is not implemented",28,N],[12,"text",R[30],E,28,N],[13,"NotInitialized",R[1],"Indicates that a function is not initialized",28,N],[12,"text",R[30],E,28,N],[13,"ConditionViolated",R[1],"Indicates that a condition is violated",28,N],[12,"text",R[30],E,28,N],[13,"CheckpointNotFound",R[1],"Checkpoint was not found",28,N],[12,"text",R[30],E,28,N],[13,"ImpossibleError",R[1],"Indicates an impossible error",28,N],[12,"text",R[30],E,28,N],[14,"check_param",R[1],"Release an `T` from an `Option<T>` if it is not `None`. If…",N,N],[8,R[190],E,"Dot/scalar product of `T` and `self` weighted by W (p^TWv)",N,N],[10,"weighted_dot",E,R[19],29,[[["self"],[T],["v"]],[U]]],[3,"Observer",E,"Container for observers which acts just like a single…",N,N],[8,R[191],E,R[31],N,N],[10,"norm",E,R[31],30,[[["self"]],[U]]],[0,"file",E,"Output parameter vectors to file",N,N],[3,R[230],R[68],E,N,N],[0,"slog_logger",R[1],"Loggers based on the `slog` crate",N,N],[14,"make_kv",E,"Creates an `ArgminKV` at compile time in order to avoid…",N,N],[4,R[192],E,"Indicates why the optimization algorithm stopped",N,N],[13,"NotTerminated",E,"In case it has not terminated yet",31,N],[13,"MaxItersReached",E,"Maximum number of iterations reached",31,N],[13,"TargetCostReached",E,"Target cost function value reached",31,N],[13,"TargetPrecisionReached",E,"Target precision reached",31,N],[13,"NoChangeInCost",E,"Cost function value did not change",31,N],[13,"AcceptedStallIterExceeded",E,"Acceped stall iter exceeded",31,N],[13,"BestStallIterExceeded",E,"Best stall iter exceeded",31,N],[13,"LineSearchConditionMet",E,"Condition for Line search met",31,N],[13,"TargetToleranceReached",E,"Target tolerance reached",31,N],[13,"Aborted",E,"Aborted",31,N],[3,R[231],E,"Fake Operators for testing No-op operator with free choice…",N,N],[8,R[193],E,"Zero for dynamically sized objects",N,N],[10,"zero_like",E,R[32],32,[[["self"]],["self"]]],[8,R[194],E,"Return the conjugate",N,N],[10,"conj",E,"Return conjugate",33,[[["self"]],["self"]]],[8,R[195],E,R[33],N,N],[10,"sub",E,R[33],34,[[["self"],[T]],[U]]],[3,R[196],E,"This is returned by the `Executor` after the solver is run…",N,N],[12,R[34],E,R[34],35,N],[12,"state",E,"iteration state",35,N],[8,R[197],E,R[35],N,N],[10,"div",E,R[35],36,[[["self"],[T]],[U]]],[8,"Observe",E,"Defines the interface every Observer needs to expose",N,N],[11,R[116],E,"Called once at the beginning of the execution of the solver.",37,[[["self"],["str"],[R[36]]],[[R[7],[R[8]]],[R[8]]]]],[11,R[117],E,"Called at every iteration of the solver",37,[[["self"],[R[11]],[R[36]]],[[R[7],[R[8]]],[R[8]]]]],[8,R[198],E,"Compute the inverse (`T`) of `self`",N,N],[10,"inv",E,E,38,[[["self"]],[[R[7],[R[8]]],[R[8]]]]],[5,"load_checkpoint",E,E,N,[[["p"]],[[R[7],[R[8]]],[R[8]]]]],[4,R[199],E,E,N,N],[13,"Never",E,E,39,N],[13,"Every",E,E,39,N],[13,"Always",E,E,39,N],[0,"solver","argmin","Solvers",N,N],[0,"brent",R[38],R[37],N,N],[3,R[232],R[70],"Error to be thrown if Brent is initialized with improper…",N,N],[3,"Brent",E,R[37],N,N],[11,"new",E,"Constructor The values `min` and `max` must bracketing the…",40,[[["f64"]],["brent"]]],[0,R[123],R[38],"Conjugate Gradient methods",N,N],[0,"cg",R[39],"Conjugate gradient method # References:",N,N],[3,R[200],R[72],"The conjugate gradient method is a solver for systems of…",N,N],[11,"new",E,R[40],41,[[["p"]],[[R[7],[R[8]]],[R[8]]]]],[11,"p",E,"Return the current search direction (This is needed by…",41,[[["self"]],["p"]]],[11,"p_prev",E,"Return the previous search direction (This is needed by…",41,[[["self"]],["p"]]],[11,"residual",E,"Return the current residual (This is needed by NewtonCG…",41,[[["self"]],["p"]]],[0,"nonlinear_cg",R[39],"Nonlinear conjugate gradient method Important TODO: Find…",N,N],[3,R[201],R[73],"The nonlinear conjugate gradient is a generalization of…",N,N],[11,"new",E,"Constructor (Polak Ribiere Conjugate Gradient (PR-CG))",42,[[["b"],["l"]],[[R[7],[R[8]]],[R[8]]]]],[11,"restart_iters",E,"Specifiy the number of iterations after which a restart…",42,[[["u64"]],["self"]]],[11,"restart_orthogonality",E,"Set the value for the orthogonality measure. Setting this…",42,[[["f64"]],["self"]]],[0,"beta",R[39],"Beta update methods for nonlinear CG # Beta update methods",N,N],[3,R[202],R[74],"Fletcher and Reeves (FR) method TODO: Reference",N,N],[3,R[203],E,"Polak and Ribiere (PR) method TODO: Reference",N,N],[3,R[204],E,"Polak and Ribiere Plus (PR+) method TODO: Reference",N,N],[3,R[205],E,"Hestenes and Stiefel (HS) method TODO: Reference",N,N],[11,"new",E,R[40],43,[[],["self"]]],[11,"new",E,R[40],44,[[],["self"]]],[11,"new",E,R[40],45,[[],["self"]]],[11,"new",E,R[40],46,[[],["self"]]],[0,R[120],R[38],R[46],N,N],[0,"gaussnewton_linesearch",R[41],"Gauss-Newton method with linesearch # References:",N,N],[3,R[206],R[75],"Gauss-Newton method with linesearch",N,N],[11,"new",E,R[40],47,[[["l"]],["self"]]],[0,"gaussnewton_method",R[41],"Gauss-Newton method # References:",N,N],[3,R[207],R[76],"Gauss-Newton method",N,N],[11,"new",E,R[40],48,[[],["self"]]],[11,"gamma",E,R[43],48,[[["f64"]],[[R[7],[R[8]]],[R[8]]]]],[0,"gradientdescent",R[38],"Gradient descent methods",N,N],[0,R[128],"argmin::solver::gradientdescent","Steepest Descent method",N,N],[3,R[208],R[77],"Steepest descent iteratively takes steps in the direction…",N,N],[11,"new",E,R[40],49,[[["l"]],["self"]]],[0,R[129],R[38],"Landweber iteration",N,N],[3,R[209],R[78],"The Landweber iteration is a solver for ill-posed linear…",N,N],[11,"new",E,R[40],50,[[["f64"]],["self"]]],[0,"linesearch",R[38],"Line search methods",N,N],[0,"backtracking",R[42],"Backtracking line search algorithm * Backtracking line…",N,N],[3,R[210],R[79],"The Backtracking line search is a simple method to find a…",N,N],[11,"new",E,R[40],51,[[["l"]],["self"]]],[11,"rho",E,"Set rho",51,[[["f64"]],[[R[7],[R[8]]],[R[8]]]]],[0,"condition",R[42],"Acceptance conditions # References:",N,N],[3,R[212],R[80],"Armijo Condition",N,N],[3,R[213],E,"Wolfe Condition",N,N],[3,R[214],E,"Strong Wolfe conditions",N,N],[3,R[215],E,"Goldstein conditions",N,N],[8,R[211],E,"Needs to be implemented by everything that wants to be a…",N,N],[10,"eval",E,"Evaluate the condition",52,[[["self"],["f64"],[T]],["bool"]]],[10,R[119],E,"Indicates whether this condition requires the computation…",52,[[["self"]],["bool"]]],[11,"new",E,R[40],53,[[["f64"]],[[R[7],[R[8]]],[R[8]]]]],[11,"new",E,R[40],54,[[["f64"]],[[R[7],[R[8]]],[R[8]]]]],[11,"new",E,R[40],55,[[["f64"]],[[R[7],[R[8]]],[R[8]]]]],[11,"new",E,R[40],56,[[["f64"]],[[R[7],[R[8]]],[R[8]]]]],[0,"hagerzhang",R[42],"Hager-Zhang line search algorithm * Hager-Zhang line search",N,N],[3,R[216],R[81],"The Hager-Zhang line search is a method to find a step…",N,N],[11,"new",E,R[40],57,[[],["self"]]],[11,"delta",E,"set delta",57,[[["f64"]],[[R[7],[R[8]]],[R[8]]]]],[11,"sigma",E,R[45],57,[[["f64"]],[[R[7],[R[8]]],[R[8]]]]],[11,"epsilon",E,"set epsilon",57,[[["f64"]],[[R[7],[R[8]]],[R[8]]]]],[11,"theta",E,"set theta",57,[[["f64"]],[[R[7],[R[8]]],[R[8]]]]],[11,"gamma",E,R[43],57,[[["f64"]],[[R[7],[R[8]]],[R[8]]]]],[11,"eta",E,"set eta",57,[[["f64"]],[[R[7],[R[8]]],[R[8]]]]],[11,"alpha",E,R[44],57,[[["f64"]],[[R[7],[R[8]]],[R[8]]]]],[0,"morethuente",R[42],"More-Thuente line search algorithm * More-Thuente line…",N,N],[3,R[217],R[82],"The More-Thuente line search is a method to find a step…",N,N],[11,"new",E,R[40],58,[[],["self"]]],[11,"c",E,"Set c1 and c2 where 0 < c1 < c2 < 1.",58,[[["f64"]],[[R[7],[R[8]]],[R[8]]]]],[11,"alpha",E,R[44],58,[[["f64"]],[[R[7],[R[8]]],[R[8]]]]],[0,R[121],R[38],R[48],N,N],[3,R[218],R[83],"Nelder-Mead method",N,N],[11,"new",E,R[40],59,[[],["self"]]],[11,"with_initial_params",E,"Add initial parameters",59,[[["vec"]],["self"]]],[11,"sd_tolerance",E,"Set Sample standard deviation tolerance",59,[[["f64"]],["self"]]],[11,"alpha",E,"set alpha",59,[[["f64"]],[[R[7],[R[8]]],[R[8]]]]],[11,"gamma",E,R[43],59,[[["f64"]],[[R[7],[R[8]]],[R[8]]]]],[11,"rho",E,"set rho",59,[[["f64"]],[[R[7],[R[8]]],[R[8]]]]],[11,"sigma",E,R[45],59,[[["f64"]],[[R[7],[R[8]]],[R[8]]]]],[0,"newton",R[38],R[46],N,N],[0,"newton_cg",R[47],"Newton-CG method TODO: Stop when search direction is close…",N,N],[3,"NewtonCG",R[84],"The Newton-CG method (also called truncated Newton method)…",N,N],[11,"new",E,R[40],60,[[["l"]],["self"]]],[11,"curvature_threshold",E,"Set curvature threshold",60,[[["f64"]],["self"]]],[0,"newton_method",R[47],"Newton's method # References:",N,N],[3,"Newton",R[85],"Newton's method iteratively finds the stationary points of…",N,N],[11,"new",E,R[40],61,[[],["self"]]],[11,"set_gamma",E,R[43],61,[[["f64"]],[[R[7],[R[8]]],[R[8]]]]],[0,"particleswarm",R[38],R[48],N,N],[3,R[219],R[86],"Particle Swarm Optimization (PSO)",N,N],[3,"Particle",E,"A single particle",N,N],[12,"position",E,"Position of particle",62,N],[12,"cost",E,"Cost of particle",62,N],[8,"Position",E,E,N,N],[11,"new",E,R[40],63,[[["usize"],["f64"]],[[R[7],[R[8]]],[R[8]]]]],[0,"quasinewton",R[38],"Quasi-Newton methods",N,N],[0,"bfgs",R[49],R[48],N,N],[3,"BFGS",R[87],"BFGS method",N,N],[11,"new",E,R[40],64,[[["l"],["h"]],["self"]]],[0,"dfp",R[49],R[48],N,N],[3,"DFP",R[88],"DFP method",N,N],[11,"new",E,R[40],65,[[["l"],["h"]],["self"]]],[0,"lbfgs",R[49],R[48],N,N],[3,"LBFGS",R[89],"L-BFGS method",N,N],[11,"new",E,R[40],66,[[["usize"],["l"]],["self"]]],[0,"sr1",R[49],R[48],N,N],[3,"SR1",R[90],"SR1 method (broken!)",N,N],[11,"new",E,R[40],67,[[["l"],["h"]],["self"]]],[11,"r",E,"Set r",67,[[["f64"]],[[R[7],[R[8]]],[R[8]]]]],[0,"sr1_trustregion",R[49],R[48],N,N],[3,R[220],R[91],"SR1 Trust Region method",N,N],[11,"new",E,R[40],68,[[["r"]],["self"]]],[11,R[50],E,"provide initial Hessian (if not provided, the algorithm…",68,[[["b"]],["self"]]],[11,"r",E,"Set r",68,[[["f64"]],[[R[7],[R[8]]],[R[8]]]]],[11,"radius",E,R[53],68,[[["f64"]],["self"]]],[11,"eta",E,"Set eta",68,[[["f64"]],[[R[7],[R[8]]],[R[8]]]]],[0,R[135],R[38],E,N,N],[3,R[222],R[92],"Simulated Annealing",N,N],[4,R[221],E,"Temperature functions for Simulated Annealing.",N,N],[13,"TemperatureFast",E,"`t_i = t_init / i`",69,N],[13,"Boltzmann",E,"`t_i = t_init / ln(i)`",69,N],[13,"Exponential",E,"`t_i = t_init * x^i`",69,N],[11,"new",E,R[40],70,[[["f64"]],[[R[7],[R[8]]],[R[8]]]]],[11,"temp_func",E,"Set temperature function to one of the options in…",70,[[[R[134]]],["self"]]],[11,"stall_accepted",E,"The optimization stops after there has been no accepted…",70,[[["u64"]],["self"]]],[11,"stall_best",E,"The optimization stops after there has been no new best…",70,[[["u64"]],["self"]]],[11,"reannealing_fixed",E,"Start reannealing after `iter` iterations",70,[[["u64"]],["self"]]],[11,"reannealing_accepted",E,"Start reannealing after no accepted solution has been…",70,[[["u64"]],["self"]]],[11,"reannealing_best",E,"Start reannealing after no new best solution has been…",70,[[["u64"]],["self"]]],[0,R[137],R[38],"Argmin Trust region methods",N,N],[5,"reduction_ratio",R[51],"Computes reduction ratio",N,[[["f64"]],["f64"]]],[0,R[122],E,"Cauchy Point # References:",N,N],[3,R[223],R[93],"The Cauchy point is the minimum of the quadratic…",N,N],[11,"new",E,R[40],71,[[],["self"]]],[0,"dogleg",R[51],"Dogleg method # References:",N,N],[3,"Dogleg",R[94],"The Dogleg method computes the intersection of the trust…",N,N],[11,"new",E,R[40],72,[[],["self"]]],[0,R[136],R[51],"Steihaug method # References:",N,N],[3,"Steihaug",R[95],"The Steihaug method is a conjugate gradients based…",N,N],[11,"new",E,R[40],73,[[],["self"]]],[11,"epsilon",E,"Set epsilon",73,[[["f64"]],[[R[7],[R[8]]],[R[8]]]]],[11,R[52],E,"set maximum number of iterations",73,[[["u64"]],["self"]]],[0,"trustregion_method",R[51],"Trust region solver # References:",N,N],[3,R[224],R[96],"The trust region method approximates the cost function…",N,N],[11,"new",E,R[40],74,[[["r"]],["self"]]],[11,"radius",E,R[53],74,[[["f64"]],["self"]]],[11,"max_radius",E,"Set maximum radius",74,[[["f64"]],["self"]]],[11,"eta",E,"Set eta",74,[[["f64"]],[[R[7],[R[8]]],[R[8]]]]],[0,"testfunctions","argmin","Testfunctions # Testfunctions",N,N],[5,"cross_in_tray","argmin::testfunctions","Cross-in-tray test function",N,[[],["f64"]]],[5,"goldsteinprice",E,"Goldstein-Price test function",N,[[],[T]]],[5,"levy",E,"Levy test function",N,[[],[T]]],[5,"rosenbrock_2d_hessian",E,"Hessian of 2D Rosenbrock function",N,[[[T]],["vec"]]],[5,"mccorminck",E,"McCorminck test function",N,[[],[T]]],[5,"sphere",E,"Sphere test function",N,[[],[T]]],[5,"rastrigin_a",E,R[54],N,[[[T]],[T]]],[5,"styblinski_tang",E,"Styblinski-Tang test function",N,[[],[T]]],[5,"rastrigin",E,R[54],N,[[],[T]]],[5,"rosenbrock_2d_derivative",E,"Derivative of 2D Rosenbrock function",N,[[[T]],["vec"]]],[5,"levy_n13",E,"Levy test function No. 13",N,[[],[T]]],[5,"ackley",E,R[55],N,[[],[T]]],[5,"threehumpcamel",E,"Three-hump camel test function",N,[[],[T]]],[5,"holder_table",E,"Holder table test function",N,[[],[T]]],[5,"schaffer_n4",E,"Schaffer test function No. 4",N,[[],[T]]],[5,"zero",E,"Zero test function",N,[[],["f64"]]],[5,"booth",E,"Booth test function",N,[[],[T]]],[5,"easom",E,"Easom test function",N,[[],[T]]],[5,"eggholder",E,"Eggholder test function",N,[[],[T]]],[5,"bukin_n6",E,"Bukin test function No. 6",N,[[],[T]]],[5,"zero_derivative",E,"Derivative of zero test function",N,[[],[["f64"],["vec",["f64"]]]]],[5,"himmelblau",E,"Himmelblau test function",N,[[],[T]]],[5,"matyas",E,"Matyas test function",N,[[],[T]]],[5,"sphere_derivative",E,"Derivative of sphere test function",N,[[],["vec"]]],[5,"ackley_param",E,R[55],N,[[[T]],[T]]],[5,"schaffer_n2",E,"Schaffer test function No. 2",N,[[],[T]]],[5,"picheny",E,"Picheny test function",N,[[],[T]]],[5,"beale",E,"Beale test function",N,[[],[T]]],[5,"rosenbrock_2d",E,"2D Rosenbrock test function",N,[[[T]],[T]]],[5,"rosenbrock",E,"Multidimensional Rosenbrock test function",N,[[[T]],[T]]],[11,R[57],R[56],E,75,[[["self"]],[T]]],[11,R[59],E,E,75,[[["self"],[T]]]],[11,"into",E,E,75,[[],[U]]],[11,"from",E,E,75,[[[T]],[T]]],[11,R[60],E,E,75,[[[U]],[R[7]]]],[11,R[61],E,E,75,[[],[R[7]]]],[11,R[62],E,E,75,[[["self"]],[T]]],[11,R[64],E,E,75,[[["self"]],[T]]],[11,R[63],E,E,75,[[["self"]],[R[65]]]],[11,"vzip",E,E,75,[[],["v"]]],[11,R[57],R[58],E,0,[[["self"]],[T]]],[11,R[59],E,E,0,[[["self"],[T]]]],[11,"into",E,E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[60],E,E,0,[[[U]],[R[7]]]],[11,R[61],E,E,0,[[],[R[7]]]],[11,R[62],E,E,0,[[["self"]],[T]]],[11,R[64],E,E,0,[[["self"]],[T]]],[11,R[63],E,E,0,[[["self"]],[R[65]]]],[11,"vzip",E,E,0,[[],["v"]]],[11,R[57],R[1],E,76,[[["self"]],[T]]],[11,R[59],E,E,76,[[["self"],[T]]]],[11,"into",E,E,76,[[],[U]]],[11,"from",E,E,76,[[[T]],[T]]],[11,R[60],E,E,76,[[[U]],[R[7]]]],[11,R[61],E,E,76,[[],[R[7]]]],[11,R[62],E,E,76,[[["self"]],[T]]],[11,R[64],E,E,76,[[["self"]],[T]]],[11,R[63],E,E,76,[[["self"]],[R[65]]]],[11,"vzip",E,E,76,[[],["v"]]],[11,R[57],E,E,7,[[["self"]],[T]]],[11,R[59],E,E,7,[[["self"],[T]]]],[11,"into",E,E,7,[[],[U]]],[11,"from",E,E,7,[[[T]],[T]]],[11,R[66],E,E,7,[[["self"]],[R[69]]]],[11,R[60],E,E,7,[[[U]],[R[7]]]],[11,R[61],E,E,7,[[],[R[7]]]],[11,R[62],E,E,7,[[["self"]],[T]]],[11,R[64],E,E,7,[[["self"]],[T]]],[11,R[63],E,E,7,[[["self"]],[R[65]]]],[11,"vzip",E,E,7,[[],["v"]]],[11,"into",E,E,77,[[],[U]]],[11,"from",E,E,77,[[[T]],[T]]],[11,R[60],E,E,77,[[[U]],[R[7]]]],[11,R[61],E,E,77,[[],[R[7]]]],[11,R[62],E,E,77,[[["self"]],[T]]],[11,R[64],E,E,77,[[["self"]],[T]]],[11,R[63],E,E,77,[[["self"]],[R[65]]]],[11,"vzip",E,E,77,[[],["v"]]],[11,R[57],E,E,78,[[["self"]],[T]]],[11,R[59],E,E,78,[[["self"],[T]]]],[11,"into",E,E,78,[[],[U]]],[11,"from",E,E,78,[[[T]],[T]]],[11,R[66],E,E,78,[[["self"]],[R[69]]]],[11,R[60],E,E,78,[[[U]],[R[7]]]],[11,R[61],E,E,78,[[],[R[7]]]],[11,R[62],E,E,78,[[["self"]],[T]]],[11,R[64],E,E,78,[[["self"]],[T]]],[11,R[63],E,E,78,[[["self"]],[R[65]]]],[11,"vzip",E,E,78,[[],["v"]]],[11,"into",E,E,79,[[],[U]]],[11,"from",E,E,79,[[[T]],[T]]],[11,R[66],E,E,79,[[["self"]],[R[69]]]],[11,R[60],E,E,79,[[[U]],[R[7]]]],[11,R[61],E,E,79,[[],[R[7]]]],[11,R[62],E,E,79,[[["self"]],[T]]],[11,R[64],E,E,79,[[["self"]],[T]]],[11,R[63],E,E,79,[[["self"]],[R[65]]]],[11,"vzip",E,E,79,[[],["v"]]],[11,R[71],E,E,79,[[["self"]],["fail"]]],[11,R[57],E,E,80,[[["self"]],[T]]],[11,R[59],E,E,80,[[["self"],[T]]]],[11,"into",E,E,80,[[],[U]]],[11,"from",E,E,80,[[[T]],[T]]],[11,R[60],E,E,80,[[[U]],[R[7]]]],[11,R[61],E,E,80,[[],[R[7]]]],[11,R[62],E,E,80,[[["self"]],[T]]],[11,R[64],E,E,80,[[["self"]],[T]]],[11,R[63],E,E,80,[[["self"]],[R[65]]]],[11,"vzip",E,E,80,[[],["v"]]],[11,R[57],E,E,9,[[["self"]],[T]]],[11,R[59],E,E,9,[[["self"],[T]]]],[11,"into",E,E,9,[[],[U]]],[11,"from",E,E,9,[[[T]],[T]]],[11,R[60],E,E,9,[[[U]],[R[7]]]],[11,R[61],E,E,9,[[],[R[7]]]],[11,R[62],E,E,9,[[["self"]],[T]]],[11,R[64],E,E,9,[[["self"]],[T]]],[11,R[63],E,E,9,[[["self"]],[R[65]]]],[11,"vzip",E,E,9,[[],["v"]]],[11,"into",R[17],E,13,[[],[U]]],[11,"from",E,E,13,[[[T]],[T]]],[11,R[60],E,E,13,[[[U]],[R[7]]]],[11,R[61],E,E,13,[[],[R[7]]]],[11,R[62],E,E,13,[[["self"]],[T]]],[11,R[64],E,E,13,[[["self"]],[T]]],[11,R[63],E,E,13,[[["self"]],[R[65]]]],[11,"vzip",E,E,13,[[],["v"]]],[11,"into",R[67],E,81,[[],[U]]],[11,"from",E,E,81,[[[T]],[T]]],[11,R[60],E,E,81,[[[U]],[R[7]]]],[11,R[61],E,E,81,[[],[R[7]]]],[11,R[62],E,E,81,[[["self"]],[T]]],[11,R[64],E,E,81,[[["self"]],[T]]],[11,R[63],E,E,81,[[["self"]],[R[65]]]],[11,"vzip",E,E,81,[[],["v"]]],[11,R[57],R[1],E,22,[[["self"]],[T]]],[11,R[59],E,E,22,[[["self"],[T]]]],[11,"into",E,E,22,[[],[U]]],[11,"from",E,E,22,[[[T]],[T]]],[11,R[60],E,E,22,[[[U]],[R[7]]]],[11,R[61],E,E,22,[[],[R[7]]]],[11,R[62],E,E,22,[[["self"]],[T]]],[11,R[64],E,E,22,[[["self"]],[T]]],[11,R[63],E,E,22,[[["self"]],[R[65]]]],[11,"vzip",E,E,22,[[],["v"]]],[11,R[57],E,E,23,[[["self"]],[T]]],[11,R[59],E,E,23,[[["self"],[T]]]],[11,"into",E,E,23,[[],[U]]],[11,"from",E,E,23,[[[T]],[T]]],[11,R[60],E,E,23,[[[U]],[R[7]]]],[11,R[61],E,E,23,[[],[R[7]]]],[11,R[62],E,E,23,[[["self"]],[T]]],[11,R[64],E,E,23,[[["self"]],[T]]],[11,R[63],E,E,23,[[["self"]],[R[65]]]],[11,"vzip",E,E,23,[[],["v"]]],[11,R[57],E,E,24,[[["self"]],[T]]],[11,R[59],E,E,24,[[["self"],[T]]]],[11,"into",E,E,24,[[],[U]]],[11,"from",E,E,24,[[[T]],[T]]],[11,R[60],E,E,24,[[[U]],[R[7]]]],[11,R[61],E,E,24,[[],[R[7]]]],[11,R[62],E,E,24,[[["self"]],[T]]],[11,R[64],E,E,24,[[["self"]],[T]]],[11,R[63],E,E,24,[[["self"]],[R[65]]]],[11,"vzip",E,E,24,[[],["v"]]],[11,R[57],E,E,82,[[["self"]],[T]]],[11,R[59],E,E,82,[[["self"],[T]]]],[11,"into",E,E,82,[[],[U]]],[11,"from",E,E,82,[[[T]],[T]]],[11,R[60],E,E,82,[[[U]],[R[7]]]],[11,R[61],E,E,82,[[],[R[7]]]],[11,R[62],E,E,82,[[["self"]],[T]]],[11,R[64],E,E,82,[[["self"]],[T]]],[11,R[63],E,E,82,[[["self"]],[R[65]]]],[11,"vzip",E,E,82,[[],["v"]]],[11,"into",E,E,26,[[],[U]]],[11,"from",E,E,26,[[[T]],[T]]],[11,R[60],E,E,26,[[[U]],[R[7]]]],[11,R[61],E,E,26,[[],[R[7]]]],[11,R[62],E,E,26,[[["self"]],[T]]],[11,R[64],E,E,26,[[["self"]],[T]]],[11,R[63],E,E,26,[[["self"]],[R[65]]]],[11,"vzip",E,E,26,[[],["v"]]],[11,"into",E,E,28,[[],[U]]],[11,"from",E,E,28,[[[T]],[T]]],[11,R[66],E,E,28,[[["self"]],[R[69]]]],[11,R[60],E,E,28,[[[U]],[R[7]]]],[11,R[61],E,E,28,[[],[R[7]]]],[11,R[62],E,E,28,[[["self"]],[T]]],[11,R[64],E,E,28,[[["self"]],[T]]],[11,R[63],E,E,28,[[["self"]],[R[65]]]],[11,"vzip",E,E,28,[[],["v"]]],[11,R[71],E,E,28,[[["self"]],["fail"]]],[11,R[57],E,E,83,[[["self"]],[T]]],[11,R[59],E,E,83,[[["self"],[T]]]],[11,"into",E,E,83,[[],[U]]],[11,"from",E,E,83,[[[T]],[T]]],[11,R[60],E,E,83,[[[U]],[R[7]]]],[11,R[61],E,E,83,[[],[R[7]]]],[11,R[62],E,E,83,[[["self"]],[T]]],[11,R[64],E,E,83,[[["self"]],[T]]],[11,R[63],E,E,83,[[["self"]],[R[65]]]],[11,"vzip",E,E,83,[[],["v"]]],[11,R[57],R[68],E,84,[[["self"]],[T]]],[11,R[59],E,E,84,[[["self"],[T]]]],[11,"into",E,E,84,[[],[U]]],[11,"from",E,E,84,[[[T]],[T]]],[11,R[60],E,E,84,[[[U]],[R[7]]]],[11,R[61],E,E,84,[[],[R[7]]]],[11,R[62],E,E,84,[[["self"]],[T]]],[11,R[64],E,E,84,[[["self"]],[T]]],[11,R[63],E,E,84,[[["self"]],[R[65]]]],[11,"vzip",E,E,84,[[],["v"]]],[11,R[57],R[1],E,31,[[["self"]],[T]]],[11,R[59],E,E,31,[[["self"],[T]]]],[11,"into",E,E,31,[[],[U]]],[11,"from",E,E,31,[[[T]],[T]]],[11,R[66],E,E,31,[[["self"]],[R[69]]]],[11,R[60],E,E,31,[[[U]],[R[7]]]],[11,R[61],E,E,31,[[],[R[7]]]],[11,R[62],E,E,31,[[["self"]],[T]]],[11,R[64],E,E,31,[[["self"]],[T]]],[11,R[63],E,E,31,[[["self"]],[R[65]]]],[11,"vzip",E,E,31,[[],["v"]]],[11,R[57],E,E,85,[[["self"]],[T]]],[11,R[59],E,E,85,[[["self"],[T]]]],[11,"into",E,E,85,[[],[U]]],[11,"from",E,E,85,[[[T]],[T]]],[11,R[66],E,E,85,[[["self"]],[R[69]]]],[11,R[60],E,E,85,[[[U]],[R[7]]]],[11,R[61],E,E,85,[[],[R[7]]]],[11,R[62],E,E,85,[[["self"]],[T]]],[11,R[64],E,E,85,[[["self"]],[T]]],[11,R[63],E,E,85,[[["self"]],[R[65]]]],[11,"vzip",E,E,85,[[],["v"]]],[11,R[57],E,E,35,[[["self"]],[T]]],[11,R[59],E,E,35,[[["self"],[T]]]],[11,"into",E,E,35,[[],[U]]],[11,"from",E,E,35,[[[T]],[T]]],[11,R[66],E,E,35,[[["self"]],[R[69]]]],[11,R[60],E,E,35,[[[U]],[R[7]]]],[11,R[61],E,E,35,[[],[R[7]]]],[11,R[62],E,E,35,[[["self"]],[T]]],[11,R[64],E,E,35,[[["self"]],[T]]],[11,R[63],E,E,35,[[["self"]],[R[65]]]],[11,"vzip",E,E,35,[[],["v"]]],[11,R[57],E,E,39,[[["self"]],[T]]],[11,R[59],E,E,39,[[["self"],[T]]]],[11,"into",E,E,39,[[],[U]]],[11,"from",E,E,39,[[[T]],[T]]],[11,R[66],E,E,39,[[["self"]],[R[69]]]],[11,R[60],E,E,39,[[[U]],[R[7]]]],[11,R[61],E,E,39,[[],[R[7]]]],[11,R[62],E,E,39,[[["self"]],[T]]],[11,R[64],E,E,39,[[["self"]],[T]]],[11,R[63],E,E,39,[[["self"]],[R[65]]]],[11,"vzip",E,E,39,[[],["v"]]],[11,"into",R[70],E,86,[[],[U]]],[11,"from",E,E,86,[[[T]],[T]]],[11,R[66],E,E,86,[[["self"]],[R[69]]]],[11,R[60],E,E,86,[[[U]],[R[7]]]],[11,R[61],E,E,86,[[],[R[7]]]],[11,R[62],E,E,86,[[["self"]],[T]]],[11,R[64],E,E,86,[[["self"]],[T]]],[11,R[63],E,E,86,[[["self"]],[R[65]]]],[11,"vzip",E,E,86,[[],["v"]]],[11,R[71],E,E,86,[[["self"]],["fail"]]],[11,R[57],E,E,40,[[["self"]],[T]]],[11,R[59],E,E,40,[[["self"],[T]]]],[11,"into",E,E,40,[[],[U]]],[11,"from",E,E,40,[[[T]],[T]]],[11,R[60],E,E,40,[[[U]],[R[7]]]],[11,R[61],E,E,40,[[],[R[7]]]],[11,R[62],E,E,40,[[["self"]],[T]]],[11,R[64],E,E,40,[[["self"]],[T]]],[11,R[63],E,E,40,[[["self"]],[R[65]]]],[11,"vzip",E,E,40,[[],["v"]]],[11,R[57],R[72],E,41,[[["self"]],[T]]],[11,R[59],E,E,41,[[["self"],[T]]]],[11,"into",E,E,41,[[],[U]]],[11,"from",E,E,41,[[[T]],[T]]],[11,R[60],E,E,41,[[[U]],[R[7]]]],[11,R[61],E,E,41,[[],[R[7]]]],[11,R[62],E,E,41,[[["self"]],[T]]],[11,R[64],E,E,41,[[["self"]],[T]]],[11,R[63],E,E,41,[[["self"]],[R[65]]]],[11,"vzip",E,E,41,[[],["v"]]],[11,R[57],R[73],E,42,[[["self"]],[T]]],[11,R[59],E,E,42,[[["self"],[T]]]],[11,"into",E,E,42,[[],[U]]],[11,"from",E,E,42,[[[T]],[T]]],[11,R[60],E,E,42,[[[U]],[R[7]]]],[11,R[61],E,E,42,[[],[R[7]]]],[11,R[62],E,E,42,[[["self"]],[T]]],[11,R[64],E,E,42,[[["self"]],[T]]],[11,R[63],E,E,42,[[["self"]],[R[65]]]],[11,"vzip",E,E,42,[[],["v"]]],[11,R[57],R[74],E,43,[[["self"]],[T]]],[11,R[59],E,E,43,[[["self"],[T]]]],[11,"into",E,E,43,[[],[U]]],[11,"from",E,E,43,[[[T]],[T]]],[11,R[60],E,E,43,[[[U]],[R[7]]]],[11,R[61],E,E,43,[[],[R[7]]]],[11,R[62],E,E,43,[[["self"]],[T]]],[11,R[64],E,E,43,[[["self"]],[T]]],[11,R[63],E,E,43,[[["self"]],[R[65]]]],[11,"vzip",E,E,43,[[],["v"]]],[11,R[57],E,E,44,[[["self"]],[T]]],[11,R[59],E,E,44,[[["self"],[T]]]],[11,"into",E,E,44,[[],[U]]],[11,"from",E,E,44,[[[T]],[T]]],[11,R[60],E,E,44,[[[U]],[R[7]]]],[11,R[61],E,E,44,[[],[R[7]]]],[11,R[62],E,E,44,[[["self"]],[T]]],[11,R[64],E,E,44,[[["self"]],[T]]],[11,R[63],E,E,44,[[["self"]],[R[65]]]],[11,"vzip",E,E,44,[[],["v"]]],[11,R[57],E,E,45,[[["self"]],[T]]],[11,R[59],E,E,45,[[["self"],[T]]]],[11,"into",E,E,45,[[],[U]]],[11,"from",E,E,45,[[[T]],[T]]],[11,R[60],E,E,45,[[[U]],[R[7]]]],[11,R[61],E,E,45,[[],[R[7]]]],[11,R[62],E,E,45,[[["self"]],[T]]],[11,R[64],E,E,45,[[["self"]],[T]]],[11,R[63],E,E,45,[[["self"]],[R[65]]]],[11,"vzip",E,E,45,[[],["v"]]],[11,R[57],E,E,46,[[["self"]],[T]]],[11,R[59],E,E,46,[[["self"],[T]]]],[11,"into",E,E,46,[[],[U]]],[11,"from",E,E,46,[[[T]],[T]]],[11,R[60],E,E,46,[[[U]],[R[7]]]],[11,R[61],E,E,46,[[],[R[7]]]],[11,R[62],E,E,46,[[["self"]],[T]]],[11,R[64],E,E,46,[[["self"]],[T]]],[11,R[63],E,E,46,[[["self"]],[R[65]]]],[11,"vzip",E,E,46,[[],["v"]]],[11,R[57],R[75],E,47,[[["self"]],[T]]],[11,R[59],E,E,47,[[["self"],[T]]]],[11,"into",E,E,47,[[],[U]]],[11,"from",E,E,47,[[[T]],[T]]],[11,R[60],E,E,47,[[[U]],[R[7]]]],[11,R[61],E,E,47,[[],[R[7]]]],[11,R[62],E,E,47,[[["self"]],[T]]],[11,R[64],E,E,47,[[["self"]],[T]]],[11,R[63],E,E,47,[[["self"]],[R[65]]]],[11,"vzip",E,E,47,[[],["v"]]],[11,R[57],R[76],E,48,[[["self"]],[T]]],[11,R[59],E,E,48,[[["self"],[T]]]],[11,"into",E,E,48,[[],[U]]],[11,"from",E,E,48,[[[T]],[T]]],[11,R[60],E,E,48,[[[U]],[R[7]]]],[11,R[61],E,E,48,[[],[R[7]]]],[11,R[62],E,E,48,[[["self"]],[T]]],[11,R[64],E,E,48,[[["self"]],[T]]],[11,R[63],E,E,48,[[["self"]],[R[65]]]],[11,"vzip",E,E,48,[[],["v"]]],[11,R[57],R[77],E,49,[[["self"]],[T]]],[11,R[59],E,E,49,[[["self"],[T]]]],[11,"into",E,E,49,[[],[U]]],[11,"from",E,E,49,[[[T]],[T]]],[11,R[60],E,E,49,[[[U]],[R[7]]]],[11,R[61],E,E,49,[[],[R[7]]]],[11,R[62],E,E,49,[[["self"]],[T]]],[11,R[64],E,E,49,[[["self"]],[T]]],[11,R[63],E,E,49,[[["self"]],[R[65]]]],[11,"vzip",E,E,49,[[],["v"]]],[11,R[57],R[78],E,50,[[["self"]],[T]]],[11,R[59],E,E,50,[[["self"],[T]]]],[11,"into",E,E,50,[[],[U]]],[11,"from",E,E,50,[[[T]],[T]]],[11,R[60],E,E,50,[[[U]],[R[7]]]],[11,R[61],E,E,50,[[],[R[7]]]],[11,R[62],E,E,50,[[["self"]],[T]]],[11,R[64],E,E,50,[[["self"]],[T]]],[11,R[63],E,E,50,[[["self"]],[R[65]]]],[11,"vzip",E,E,50,[[],["v"]]],[11,R[57],R[79],E,51,[[["self"]],[T]]],[11,R[59],E,E,51,[[["self"],[T]]]],[11,"into",E,E,51,[[],[U]]],[11,"from",E,E,51,[[[T]],[T]]],[11,R[60],E,E,51,[[[U]],[R[7]]]],[11,R[61],E,E,51,[[],[R[7]]]],[11,R[62],E,E,51,[[["self"]],[T]]],[11,R[64],E,E,51,[[["self"]],[T]]],[11,R[63],E,E,51,[[["self"]],[R[65]]]],[11,"vzip",E,E,51,[[],["v"]]],[11,R[57],R[80],E,53,[[["self"]],[T]]],[11,R[59],E,E,53,[[["self"],[T]]]],[11,"into",E,E,53,[[],[U]]],[11,"from",E,E,53,[[[T]],[T]]],[11,R[60],E,E,53,[[[U]],[R[7]]]],[11,R[61],E,E,53,[[],[R[7]]]],[11,R[62],E,E,53,[[["self"]],[T]]],[11,R[64],E,E,53,[[["self"]],[T]]],[11,R[63],E,E,53,[[["self"]],[R[65]]]],[11,"vzip",E,E,53,[[],["v"]]],[11,R[57],E,E,54,[[["self"]],[T]]],[11,R[59],E,E,54,[[["self"],[T]]]],[11,"into",E,E,54,[[],[U]]],[11,"from",E,E,54,[[[T]],[T]]],[11,R[60],E,E,54,[[[U]],[R[7]]]],[11,R[61],E,E,54,[[],[R[7]]]],[11,R[62],E,E,54,[[["self"]],[T]]],[11,R[64],E,E,54,[[["self"]],[T]]],[11,R[63],E,E,54,[[["self"]],[R[65]]]],[11,"vzip",E,E,54,[[],["v"]]],[11,R[57],E,E,55,[[["self"]],[T]]],[11,R[59],E,E,55,[[["self"],[T]]]],[11,"into",E,E,55,[[],[U]]],[11,"from",E,E,55,[[[T]],[T]]],[11,R[60],E,E,55,[[[U]],[R[7]]]],[11,R[61],E,E,55,[[],[R[7]]]],[11,R[62],E,E,55,[[["self"]],[T]]],[11,R[64],E,E,55,[[["self"]],[T]]],[11,R[63],E,E,55,[[["self"]],[R[65]]]],[11,"vzip",E,E,55,[[],["v"]]],[11,R[57],E,E,56,[[["self"]],[T]]],[11,R[59],E,E,56,[[["self"],[T]]]],[11,"into",E,E,56,[[],[U]]],[11,"from",E,E,56,[[[T]],[T]]],[11,R[60],E,E,56,[[[U]],[R[7]]]],[11,R[61],E,E,56,[[],[R[7]]]],[11,R[62],E,E,56,[[["self"]],[T]]],[11,R[64],E,E,56,[[["self"]],[T]]],[11,R[63],E,E,56,[[["self"]],[R[65]]]],[11,"vzip",E,E,56,[[],["v"]]],[11,R[57],R[81],E,57,[[["self"]],[T]]],[11,R[59],E,E,57,[[["self"],[T]]]],[11,"into",E,E,57,[[],[U]]],[11,"from",E,E,57,[[[T]],[T]]],[11,R[60],E,E,57,[[[U]],[R[7]]]],[11,R[61],E,E,57,[[],[R[7]]]],[11,R[62],E,E,57,[[["self"]],[T]]],[11,R[64],E,E,57,[[["self"]],[T]]],[11,R[63],E,E,57,[[["self"]],[R[65]]]],[11,"vzip",E,E,57,[[],["v"]]],[11,R[57],R[82],E,58,[[["self"]],[T]]],[11,R[59],E,E,58,[[["self"],[T]]]],[11,"into",E,E,58,[[],[U]]],[11,"from",E,E,58,[[[T]],[T]]],[11,R[60],E,E,58,[[[U]],[R[7]]]],[11,R[61],E,E,58,[[],[R[7]]]],[11,R[62],E,E,58,[[["self"]],[T]]],[11,R[64],E,E,58,[[["self"]],[T]]],[11,R[63],E,E,58,[[["self"]],[R[65]]]],[11,"vzip",E,E,58,[[],["v"]]],[11,R[57],R[83],E,59,[[["self"]],[T]]],[11,R[59],E,E,59,[[["self"],[T]]]],[11,"into",E,E,59,[[],[U]]],[11,"from",E,E,59,[[[T]],[T]]],[11,R[60],E,E,59,[[[U]],[R[7]]]],[11,R[61],E,E,59,[[],[R[7]]]],[11,R[62],E,E,59,[[["self"]],[T]]],[11,R[64],E,E,59,[[["self"]],[T]]],[11,R[63],E,E,59,[[["self"]],[R[65]]]],[11,"vzip",E,E,59,[[],["v"]]],[11,R[57],R[84],E,60,[[["self"]],[T]]],[11,R[59],E,E,60,[[["self"],[T]]]],[11,"into",E,E,60,[[],[U]]],[11,"from",E,E,60,[[[T]],[T]]],[11,R[60],E,E,60,[[[U]],[R[7]]]],[11,R[61],E,E,60,[[],[R[7]]]],[11,R[62],E,E,60,[[["self"]],[T]]],[11,R[64],E,E,60,[[["self"]],[T]]],[11,R[63],E,E,60,[[["self"]],[R[65]]]],[11,"vzip",E,E,60,[[],["v"]]],[11,R[57],R[85],E,61,[[["self"]],[T]]],[11,R[59],E,E,61,[[["self"],[T]]]],[11,"into",E,E,61,[[],[U]]],[11,"from",E,E,61,[[[T]],[T]]],[11,R[60],E,E,61,[[[U]],[R[7]]]],[11,R[61],E,E,61,[[],[R[7]]]],[11,R[62],E,E,61,[[["self"]],[T]]],[11,R[64],E,E,61,[[["self"]],[T]]],[11,R[63],E,E,61,[[["self"]],[R[65]]]],[11,"vzip",E,E,61,[[],["v"]]],[11,"into",R[86],E,63,[[],[U]]],[11,"from",E,E,63,[[[T]],[T]]],[11,R[60],E,E,63,[[[U]],[R[7]]]],[11,R[61],E,E,63,[[],[R[7]]]],[11,R[62],E,E,63,[[["self"]],[T]]],[11,R[64],E,E,63,[[["self"]],[T]]],[11,R[63],E,E,63,[[["self"]],[R[65]]]],[11,"vzip",E,E,63,[[],["v"]]],[11,R[57],E,E,62,[[["self"]],[T]]],[11,R[59],E,E,62,[[["self"],[T]]]],[11,"into",E,E,62,[[],[U]]],[11,"from",E,E,62,[[[T]],[T]]],[11,R[60],E,E,62,[[[U]],[R[7]]]],[11,R[61],E,E,62,[[],[R[7]]]],[11,R[62],E,E,62,[[["self"]],[T]]],[11,R[64],E,E,62,[[["self"]],[T]]],[11,R[63],E,E,62,[[["self"]],[R[65]]]],[11,"vzip",E,E,62,[[],["v"]]],[11,R[57],R[87],E,64,[[["self"]],[T]]],[11,R[59],E,E,64,[[["self"],[T]]]],[11,"into",E,E,64,[[],[U]]],[11,"from",E,E,64,[[[T]],[T]]],[11,R[60],E,E,64,[[[U]],[R[7]]]],[11,R[61],E,E,64,[[],[R[7]]]],[11,R[62],E,E,64,[[["self"]],[T]]],[11,R[64],E,E,64,[[["self"]],[T]]],[11,R[63],E,E,64,[[["self"]],[R[65]]]],[11,"vzip",E,E,64,[[],["v"]]],[11,R[57],R[88],E,65,[[["self"]],[T]]],[11,R[59],E,E,65,[[["self"],[T]]]],[11,"into",E,E,65,[[],[U]]],[11,"from",E,E,65,[[[T]],[T]]],[11,R[60],E,E,65,[[[U]],[R[7]]]],[11,R[61],E,E,65,[[],[R[7]]]],[11,R[62],E,E,65,[[["self"]],[T]]],[11,R[64],E,E,65,[[["self"]],[T]]],[11,R[63],E,E,65,[[["self"]],[R[65]]]],[11,"vzip",E,E,65,[[],["v"]]],[11,R[57],R[89],E,66,[[["self"]],[T]]],[11,R[59],E,E,66,[[["self"],[T]]]],[11,"into",E,E,66,[[],[U]]],[11,"from",E,E,66,[[[T]],[T]]],[11,R[60],E,E,66,[[[U]],[R[7]]]],[11,R[61],E,E,66,[[],[R[7]]]],[11,R[62],E,E,66,[[["self"]],[T]]],[11,R[64],E,E,66,[[["self"]],[T]]],[11,R[63],E,E,66,[[["self"]],[R[65]]]],[11,"vzip",E,E,66,[[],["v"]]],[11,R[57],R[90],E,67,[[["self"]],[T]]],[11,R[59],E,E,67,[[["self"],[T]]]],[11,"into",E,E,67,[[],[U]]],[11,"from",E,E,67,[[[T]],[T]]],[11,R[60],E,E,67,[[[U]],[R[7]]]],[11,R[61],E,E,67,[[],[R[7]]]],[11,R[62],E,E,67,[[["self"]],[T]]],[11,R[64],E,E,67,[[["self"]],[T]]],[11,R[63],E,E,67,[[["self"]],[R[65]]]],[11,"vzip",E,E,67,[[],["v"]]],[11,R[57],R[91],E,68,[[["self"]],[T]]],[11,R[59],E,E,68,[[["self"],[T]]]],[11,"into",E,E,68,[[],[U]]],[11,"from",E,E,68,[[[T]],[T]]],[11,R[60],E,E,68,[[[U]],[R[7]]]],[11,R[61],E,E,68,[[],[R[7]]]],[11,R[62],E,E,68,[[["self"]],[T]]],[11,R[64],E,E,68,[[["self"]],[T]]],[11,R[63],E,E,68,[[["self"]],[R[65]]]],[11,"vzip",E,E,68,[[],["v"]]],[11,R[57],R[92],E,70,[[["self"]],[T]]],[11,R[59],E,E,70,[[["self"],[T]]]],[11,"into",E,E,70,[[],[U]]],[11,"from",E,E,70,[[[T]],[T]]],[11,R[60],E,E,70,[[[U]],[R[7]]]],[11,R[61],E,E,70,[[],[R[7]]]],[11,R[62],E,E,70,[[["self"]],[T]]],[11,R[64],E,E,70,[[["self"]],[T]]],[11,R[63],E,E,70,[[["self"]],[R[65]]]],[11,"vzip",E,E,70,[[],["v"]]],[11,R[57],E,E,69,[[["self"]],[T]]],[11,R[59],E,E,69,[[["self"],[T]]]],[11,"into",E,E,69,[[],[U]]],[11,"from",E,E,69,[[[T]],[T]]],[11,R[60],E,E,69,[[[U]],[R[7]]]],[11,R[61],E,E,69,[[],[R[7]]]],[11,R[62],E,E,69,[[["self"]],[T]]],[11,R[64],E,E,69,[[["self"]],[T]]],[11,R[63],E,E,69,[[["self"]],[R[65]]]],[11,"vzip",E,E,69,[[],["v"]]],[11,R[57],R[93],E,71,[[["self"]],[T]]],[11,R[59],E,E,71,[[["self"],[T]]]],[11,"into",E,E,71,[[],[U]]],[11,"from",E,E,71,[[[T]],[T]]],[11,R[60],E,E,71,[[[U]],[R[7]]]],[11,R[61],E,E,71,[[],[R[7]]]],[11,R[62],E,E,71,[[["self"]],[T]]],[11,R[64],E,E,71,[[["self"]],[T]]],[11,R[63],E,E,71,[[["self"]],[R[65]]]],[11,"vzip",E,E,71,[[],["v"]]],[11,R[57],R[94],E,72,[[["self"]],[T]]],[11,R[59],E,E,72,[[["self"],[T]]]],[11,"into",E,E,72,[[],[U]]],[11,"from",E,E,72,[[[T]],[T]]],[11,R[60],E,E,72,[[[U]],[R[7]]]],[11,R[61],E,E,72,[[],[R[7]]]],[11,R[62],E,E,72,[[["self"]],[T]]],[11,R[64],E,E,72,[[["self"]],[T]]],[11,R[63],E,E,72,[[["self"]],[R[65]]]],[11,"vzip",E,E,72,[[],["v"]]],[11,R[57],R[95],E,73,[[["self"]],[T]]],[11,R[59],E,E,73,[[["self"],[T]]]],[11,"into",E,E,73,[[],[U]]],[11,"from",E,E,73,[[[T]],[T]]],[11,R[60],E,E,73,[[[U]],[R[7]]]],[11,R[61],E,E,73,[[],[R[7]]]],[11,R[62],E,E,73,[[["self"]],[T]]],[11,R[64],E,E,73,[[["self"]],[T]]],[11,R[63],E,E,73,[[["self"]],[R[65]]]],[11,"vzip",E,E,73,[[],["v"]]],[11,R[57],R[96],E,74,[[["self"]],[T]]],[11,R[59],E,E,74,[[["self"],[T]]]],[11,"into",E,E,74,[[],[U]]],[11,"from",E,E,74,[[[T]],[T]]],[11,R[60],E,E,74,[[[U]],[R[7]]]],[11,R[61],E,E,74,[[],[R[7]]]],[11,R[62],E,E,74,[[["self"]],[T]]],[11,R[64],E,E,74,[[["self"]],[T]]],[11,R[63],E,E,74,[[["self"]],[R[65]]]],[11,"vzip",E,E,74,[[],["v"]]],[11,"extend",R[1],E,7,[[["self"],["i"]]]],[11,"fmt",E,E,31,[[["self"],[R[97]]],[[R[7],[R[8]]],[R[8]]]]],[11,"fmt",E,E,85,[[["self"],[R[97]]],[[R[7],[R[8]]],[R[8]]]]],[11,"fmt",E,E,39,[[["self"],[R[97]]],[[R[7],[R[8]]],[R[8]]]]],[11,"fmt",E,E,78,[[["self"],[R[97]]],[[R[7],[R[8]]],[R[8]]]]],[11,"fmt",E,E,7,[[["self"],[R[97]]],[[R[7],[R[8]]],[R[8]]]]],[11,"fmt",E,E,35,[[["self"],[R[97]]],[[R[7],[R[8]]],[R[8]]]]],[11,"fmt",E,E,28,[[["self"],[R[97]]],[[R[7],[R[8]]],[R[8]]]]],[11,R[98],E,E,22,[[["__d"]],[[R[11]],[R[7],[R[11]]]]]],[11,R[98],R[68],E,84,[[["__d"]],[[R[99]],[R[7],[R[99]]]]]],[11,R[98],R[1],E,31,[[["__d"]],[[R[13]],[R[7],[R[13]]]]]],[11,R[98],E,E,23,[[["__d"]],[[R[7],[R[100]]],[R[100]]]]],[11,R[98],E,E,35,[[["__d"]],[[R[101]],[R[7],[R[101]]]]]],[11,R[98],R[56],E,75,[[["__d"]],[[R[7],[R[102]]],[R[102]]]]],[11,R[98],R[1],E,24,[[["__d"]],[[R[103]],[R[7],[R[103]]]]]],[11,R[98],E,E,80,[[["__d"]],[[R[7],[R[104]]],[R[104]]]]],[11,R[98],E,E,9,[[["__d"]],[[R[12]],[R[7],[R[12]]]]]],[11,R[98],E,E,78,[[["__d"]],[[R[7],[R[105]]],[R[105]]]]],[11,R[98],E,E,85,[[["__d"]],[[R[7],[R[106]]],[R[106]]]]],[11,R[98],E,E,39,[[["__d"]],[[R[107]],[R[7],[R[107]]]]]],[11,R[98],E,E,7,[[["__d"]],[[R[36]],[R[7],[R[36]]]]]],[11,"eq",E,E,80,[[["self"],[R[104]]],["bool"]]],[11,"ne",E,E,80,[[["self"],[R[104]]],["bool"]]],[11,"eq",E,E,7,[[["self"],[R[36]]],["bool"]]],[11,"ne",E,E,7,[[["self"],[R[36]]],["bool"]]],[11,"eq",E,E,78,[[["self"],[R[105]]],["bool"]]],[11,"eq",R[68],E,84,[[["self"],[R[99]]],["bool"]]],[11,"ne",E,E,84,[[["self"],[R[99]]],["bool"]]],[11,"eq",R[1],E,24,[[["self"],[R[103]]],["bool"]]],[11,"ne",E,E,24,[[["self"],[R[103]]],["bool"]]],[11,"eq",E,E,39,[[["self"],[R[107]]],["bool"]]],[11,"ne",E,E,39,[[["self"],[R[107]]],["bool"]]],[11,"eq",E,E,85,[[["self"],[R[106]]],["bool"]]],[11,"ne",E,E,85,[[["self"],[R[106]]],["bool"]]],[11,"eq",E,E,23,[[["self"],[R[100]]],["bool"]]],[11,"eq",E,E,31,[[["self"],[R[13]]],["bool"]]],[11,"eq",E,E,35,[[["self"],[R[101]]],["bool"]]],[11,"apply",E,R[108],85,[[["self"]],[[R[7],[R[8]]],[R[8]]]]],[11,R[109],E,R[108],85,[[["self"]],[[R[8]],[R[7],[R[8]]]]]],[11,R[50],E,R[108],85,[[["self"]],[[R[8]],[R[7],[R[8]]]]]],[11,"modify",E,R[108],85,[[["self"],["f64"]],[[R[8]],[R[7],[R[8]]]]]],[11,"apply",E,R[108],78,[[["self"]],[[R[7],[R[8]]],[R[8]]]]],[11,R[109],E,R[108],78,[[["self"]],[[R[7],[R[8]]],[R[8]]]]],[11,R[50],E,R[108],78,[[["self"]],[[R[7],[R[8]]],[R[8]]]]],[11,"modify",E,R[108],78,[[["self"],["f64"]],[[R[7],[R[8]]],[R[8]]]]],[11,"apply",E,E,9,[[["self"]],[[R[7],[R[8]]],[R[8]]]]],[11,R[109],E,E,9,[[["self"]],[[R[8]],[R[7],[R[8]]]]]],[11,R[50],E,E,9,[[["self"]],[[R[8]],[R[7],[R[8]]]]]],[11,R[23],E,E,9,[[["self"]],[[R[7],[R[8]]],[R[8]]]]],[11,"modify",E,E,9,[[["self"],["f64"]],[[R[8]],[R[7],[R[8]]]]]],[11,"fmt",E,E,9,[[["self"],[R[97]]],[[R[7],[R[8]]],[R[8]]]]],[11,"fmt",E,E,39,[[["self"],[R[97]]],[[R[7],[R[8]]],[R[8]]]]],[11,"fmt",E,E,28,[[["self"],[R[97]]],[[R[7],[R[8]]],[R[8]]]]],[11,"fmt",E,E,78,[[["self"],[R[97]]],[[R[7],[R[8]]],[R[8]]]]],[11,"fmt",E,E,76,[[["self"],[R[97]]],[[R[7],[R[8]]],[R[8]]]]],[11,"fmt",E,E,80,[[["self"],[R[97]]],[[R[7],[R[8]]],[R[8]]]]],[11,"fmt",E,E,7,[[["self"],[R[97]]],[[R[7],[R[8]]],[R[8]]]]],[11,"fmt",R[68],E,84,[[["self"],[R[97]]],[[R[7],[R[8]]],[R[8]]]]],[11,"fmt",R[1],E,31,[[["self"],[R[97]]],[[R[7],[R[8]]],[R[8]]]]],[11,"fmt",E,E,85,[[["self"],[R[97]]],[[R[7],[R[8]]],[R[8]]]]],[11,"fmt",E,E,22,[[["self"],[R[97]]],[[R[7],[R[8]]],[R[8]]]]],[11,"fmt",E,E,23,[[["self"],[R[97]]],[[R[7],[R[8]]],[R[8]]]]],[11,"fmt",E,E,24,[[["self"],[R[97]]],[[R[7],[R[8]]],[R[8]]]]],[11,R[110],E,E,22,[[["self"],[R[111]],["record"]],[[R[7],[R[8]]],[R[8]]]]],[11,R[110],E,E,26,[[["self"],[R[111]],["record"]],[[R[7],[R[8]]],[R[8]]]]],[11,"name",E,E,28,[[["self"]],[["option",["str"]],["str"]]]],[11,"cause",E,E,28,[[["self"]],[["fail"],["option",["fail"]]]]],[11,R[112],E,E,28,[[["self"]],[["option",[R[112]]],[R[112]]]]],[11,R[110],E,E,31,[[["self"],["__s"]],[R[7]]]],[11,R[110],R[56],E,75,[[["self"],["__s"]],[R[7]]]],[11,R[110],R[1],E,78,[[["self"],["__s"]],[R[7]]]],[11,R[110],E,E,24,[[["self"],["__s"]],[R[7]]]],[11,R[110],E,E,76,[[["self"],["__s"]],[R[7]]]],[11,R[110],R[68],E,84,[[["self"],["__s"]],[R[7]]]],[11,R[110],R[1],E,7,[[["self"],["__s"]],[R[7]]]],[11,R[110],E,E,85,[[["self"],["__s"]],[R[7]]]],[11,R[110],E,E,23,[[["self"],["__s"]],[R[7]]]],[11,R[110],E,E,35,[[["self"],["__s"]],[R[7]]]],[11,R[110],E,E,80,[[["self"],["__s"]],[R[7]]]],[11,R[110],E,E,9,[[["self"],["__s"]],[R[7]]]],[11,R[110],E,E,22,[[["self"],["__s"]],[R[7]]]],[11,R[110],E,E,39,[[["self"],["__s"]],[R[7]]]],[11,"clone",E,E,83,[[["self"]],[R[162]]]],[11,"clone",E,E,82,[[["self"]],[R[161]]]],[11,"clone",E,E,9,[[["self"]],[R[12]]]],[11,"clone",E,E,24,[[["self"]],[R[103]]]],[11,"clone",R[68],E,84,[[["self"]],[R[99]]]],[11,"clone",R[1],E,85,[[["self"]],[R[106]]]],[11,"clone",E,E,7,[[["self"]],[R[36]]]],[11,"clone",E,E,31,[[["self"]],[R[13]]]],[11,"clone",E,E,76,[[["self"]],[R[10]]]],[11,"clone",E,E,80,[[["self"]],[R[104]]]],[11,"clone",R[56],E,75,[[["self"]],[R[102]]]],[11,"clone",R[1],E,23,[[["self"]],[R[100]]]],[11,"clone",E,E,78,[[["self"]],[R[105]]]],[11,"clone",E,E,35,[[["self"]],[R[101]]]],[11,"clone",E,E,39,[[["self"]],[R[107]]]],[11,"clone",E,E,22,[[["self"]],[R[11]]]],[11,R[113],E,E,35,[[["self"],[R[101]]],[[R[114]],["option",[R[114]]]]]],[11,R[113],E,E,80,[[["self"],[R[104]]],[[R[114]],["option",[R[114]]]]]],[11,"lt",E,E,80,[[["self"],[R[104]]],["bool"]]],[11,"le",E,E,80,[[["self"],[R[104]]],["bool"]]],[11,"gt",E,E,80,[[["self"],[R[104]]],["bool"]]],[11,"ge",E,E,80,[[["self"],[R[104]]],["bool"]]],[11,R[113],E,E,78,[[["self"],[R[105]]],[[R[114]],["option",[R[114]]]]]],[11,R[113],E,E,24,[[["self"],[R[103]]],[[R[114]],["option",[R[114]]]]]],[11,"lt",E,E,24,[[["self"],[R[103]]],["bool"]]],[11,"le",E,E,24,[[["self"],[R[103]]],["bool"]]],[11,"gt",E,E,24,[[["self"],[R[103]]],["bool"]]],[11,"ge",E,E,24,[[["self"],[R[103]]],["bool"]]],[11,R[113],E,E,39,[[["self"],[R[107]]],[[R[114]],["option",[R[114]]]]]],[11,"lt",E,E,39,[[["self"],[R[107]]],["bool"]]],[11,"le",E,E,39,[[["self"],[R[107]]],["bool"]]],[11,"gt",E,E,39,[[["self"],[R[107]]],["bool"]]],[11,"ge",E,E,39,[[["self"],[R[107]]],["bool"]]],[11,R[113],E,E,85,[[["self"],[R[106]]],[[R[114]],["option",[R[114]]]]]],[11,"lt",E,E,85,[[["self"],[R[106]]],["bool"]]],[11,"le",E,E,85,[[["self"],[R[106]]],["bool"]]],[11,"gt",E,E,85,[[["self"],[R[106]]],["bool"]]],[11,"ge",E,E,85,[[["self"],[R[106]]],["bool"]]],[11,R[113],E,E,7,[[["self"],[R[36]]],[[R[114]],["option",[R[114]]]]]],[11,"lt",E,E,7,[[["self"],[R[36]]],["bool"]]],[11,"le",E,E,7,[[["self"],[R[36]]],["bool"]]],[11,"gt",E,E,7,[[["self"],[R[36]]],["bool"]]],[11,"ge",E,E,7,[[["self"],[R[36]]],["bool"]]],[11,R[113],R[68],E,84,[[["self"],[R[99]]],[[R[114]],["option",[R[114]]]]]],[11,"lt",E,E,84,[[["self"],[R[99]]],["bool"]]],[11,"le",E,E,84,[[["self"],[R[99]]],["bool"]]],[11,"gt",E,E,84,[[["self"],[R[99]]],["bool"]]],[11,"ge",E,E,84,[[["self"],[R[99]]],["bool"]]],[11,R[113],R[1],E,23,[[["self"],[R[100]]],[[R[114]],["option",[R[114]]]]]],[11,R[113],E,E,31,[[["self"],[R[13]]],[[R[114]],["option",[R[114]]]]]],[11,"hash",E,E,80,[[["self"],["__h"]]]],[11,"hash",E,E,78,[[["self"],["__h"]]]],[11,"hash",E,E,85,[[["self"],["__h"]]]],[11,"hash",E,E,7,[[["self"],["__h"]]]],[11,"hash",E,E,39,[[["self"],["__h"]]]],[11,"hash",E,E,31,[[["self"],["__h"]]]],[11,R[115],E,E,39,[[],[R[107]]]],[11,R[115],E,E,76,[[],[R[10]]]],[11,R[115],E,E,80,[[],[R[104]]]],[11,R[115],E,E,78,[[],[R[105]]]],[11,R[115],E,"The default is `Always`",24,[[],[R[103]]]],[11,R[115],E,E,22,[[],[R[11]]]],[11,R[115],E,E,31,[[],[R[13]]]],[11,R[115],E,E,7,[[],[R[36]]]],[11,R[115],E,E,85,[[],[R[106]]]],[11,R[115],E,E,83,[[],[R[162]]]],[11,R[115],E,E,23,[[],[R[100]]]],[11,"cmp",E,E,39,[[["self"],[R[107]]],[R[114]]]],[11,"cmp",E,E,78,[[["self"],[R[105]]],[R[114]]]],[11,"cmp",E,E,85,[[["self"],[R[106]]],[R[114]]]],[11,"cmp",E,E,23,[[["self"],[R[100]]],[R[114]]]],[11,"cmp",E,E,24,[[["self"],[R[103]]],[R[114]]]],[11,"cmp",E,E,7,[[["self"],[R[36]]],[R[114]]]],[11,"cmp",R[68],E,84,[[["self"],[R[99]]],[R[114]]]],[11,"cmp",R[1],E,80,[[["self"],[R[104]]],[R[114]]]],[11,"cmp",E,E,31,[[["self"],[R[13]]],[R[114]]]],[11,"cmp",E,E,35,[[["self"],[R[101]]],[R[114]]]],[11,"from",E,E,26,[[[R[36]]],["argminslogkv"]]],[11,"from_iter",E,E,7,[[["i"]],[R[36]]]],[11,R[116],E,"Initial observation This is called after the…",83,[[["self"],["str"],[R[36]]],[[R[7],[R[8]]],[R[8]]]]],[11,R[117],E,"This is called after every iteration and gets the current…",83,[[["self"],[R[11]],[R[36]]],[[R[7],[R[8]]],[R[8]]]]],[11,R[117],R[67],E,81,[[["self"],[R[11]],[R[36]]],[[R[7],[R[8]]],[R[8]]]]],[11,R[116],R[1],"Log general info",82,[[["self"],["str"],[R[36]]],[[R[7],[R[8]]],[R[8]]]]],[11,R[117],E,"This should be used to log iteration data only (because…",82,[[["self"],[R[11]],[R[36]]],[[R[7],[R[8]]],[R[8]]]]],[11,R[117],R[68],E,84,[[["self"],[R[11]],[R[36]]],[[R[7],[R[8]]],[R[8]]]]],[11,"fmt",R[1],E,79,[[["self"],[R[97]]],[[R[7],[R[8]]],[R[8]]]]],[11,R[71],E,E,79,[[["self"]],["fail"]]],[11,"from",E,E,79,[[["f"]],[R[8]]]],[11,"fmt",E,E,79,[[["self"],[R[97]]],[[R[7],[R[8]]],[R[8]]]]],[11,"as_ref",E,E,79,[[["self"]],["fail"]]],[11,R[115],R[58],E,0,[[],[R[118]]]],[11,"clone",E,E,0,[[["self"]],[R[118]]]],[11,"eval",R[80],E,53,[[["self"],["f64"],[T]],["bool"]]],[11,R[119],E,E,53,[[["self"]],["bool"]]],[11,"eval",E,E,54,[[["self"],["f64"],[T]],["bool"]]],[11,R[119],E,E,54,[[["self"]],["bool"]]],[11,"eval",E,E,55,[[["self"],["f64"],[T]],["bool"]]],[11,R[119],E,E,55,[[["self"]],["bool"]]],[11,"eval",E,E,56,[[["self"],["f64"],[T]],["bool"]]],[11,R[119],E,E,56,[[["self"]],["bool"]]],[11,R[115],R[74],E,43,[[],[R[124]]]],[11,R[115],E,E,44,[[],[R[125]]]],[11,R[115],E,E,45,[[],[R[126]]]],[11,R[115],E,E,46,[[],[R[127]]]],[11,R[115],R[76],E,48,[[],[R[120]]]],[11,R[115],R[80],E,53,[[],[R[130]]]],[11,R[115],E,E,54,[[],[R[131]]]],[11,R[115],E,E,55,[[],[R[132]]]],[11,R[115],E,E,56,[[],[R[133]]]],[11,R[115],R[81],E,57,[[],["self"]]],[11,R[115],R[82],E,58,[[],["self"]]],[11,R[115],R[83],E,59,[[],[R[121]]]],[11,R[115],R[85],E,61,[[],["newton"]]],[11,R[115],R[92],E,69,[[],["self"]]],[11,R[115],R[93],E,71,[[],[R[122]]]],[11,R[115],R[94],E,72,[[],["dogleg"]]],[11,R[115],R[95],E,73,[[],[R[136]]]],[11,"clone",R[70],E,40,[[["self"]],["brent"]]],[11,"clone",R[72],E,41,[[["self"]],[R[123]]]],[11,"clone",R[73],E,42,[[["self"]],["nonlinearconjugategradient"]]],[11,"clone",R[74],E,43,[[["self"]],[R[124]]]],[11,"clone",E,E,44,[[["self"]],[R[125]]]],[11,"clone",E,E,45,[[["self"]],[R[126]]]],[11,"clone",E,E,46,[[["self"]],[R[127]]]],[11,"clone",R[75],E,47,[[["self"]],["gaussnewtonls"]]],[11,"clone",R[76],E,48,[[["self"]],[R[120]]]],[11,"clone",R[77],E,49,[[["self"]],[R[128]]]],[11,"clone",R[78],E,50,[[["self"]],[R[129]]]],[11,"clone",R[79],E,51,[[["self"]],["backtrackinglinesearch"]]],[11,"clone",R[80],E,53,[[["self"]],[R[130]]]],[11,"clone",E,E,54,[[["self"]],[R[131]]]],[11,"clone",E,E,55,[[["self"]],[R[132]]]],[11,"clone",E,E,56,[[["self"]],[R[133]]]],[11,"clone",R[81],E,57,[[["self"]],["hagerzhanglinesearch"]]],[11,"clone",R[82],E,58,[[["self"]],["morethuentelinesearch"]]],[11,"clone",R[83],E,59,[[["self"]],[R[121]]]],[11,"clone",R[84],E,60,[[["self"]],["newtoncg"]]],[11,"clone",R[85],E,61,[[["self"]],["newton"]]],[11,"clone",R[86],E,62,[[["self"]],["particle"]]],[11,"clone",R[87],E,64,[[["self"]],["bfgs"]]],[11,"clone",R[88],E,65,[[["self"]],["dfp"]]],[11,"clone",R[89],E,66,[[["self"]],["lbfgs"]]],[11,"clone",R[90],E,67,[[["self"]],["sr1"]]],[11,"clone",R[91],E,68,[[["self"]],["sr1trustregion"]]],[11,"clone",R[92],E,69,[[["self"]],[R[134]]]],[11,"clone",E,E,70,[[["self"]],[R[135]]]],[11,"clone",R[93],E,71,[[["self"]],[R[122]]]],[11,"clone",R[94],E,72,[[["self"]],["dogleg"]]],[11,"clone",R[95],E,73,[[["self"]],[R[136]]]],[11,"clone",R[96],E,74,[[["self"]],[R[137]]]],[11,R[113],R[74],E,43,[[["self"],[R[124]]],[["option",[R[114]]],[R[114]]]]],[11,R[113],E,E,44,[[["self"],[R[125]]],[["option",[R[114]]],[R[114]]]]],[11,R[113],E,E,45,[[["self"],[R[126]]],[["option",[R[114]]],[R[114]]]]],[11,R[113],E,E,46,[[["self"],[R[127]]],[["option",[R[114]]],[R[114]]]]],[11,R[113],R[93],E,71,[[["self"],[R[122]]],[["option",[R[114]]],[R[114]]]]],[11,"lt",E,E,71,[[["self"],[R[122]]],["bool"]]],[11,"le",E,E,71,[[["self"],[R[122]]],["bool"]]],[11,"gt",E,E,71,[[["self"],[R[122]]],["bool"]]],[11,"ge",E,E,71,[[["self"],[R[122]]],["bool"]]],[11,R[113],R[94],E,72,[[["self"],["dogleg"]],[["option",[R[114]]],[R[114]]]]],[11,"lt",E,E,72,[[["self"],["dogleg"]],["bool"]]],[11,"le",E,E,72,[[["self"],["dogleg"]],["bool"]]],[11,"gt",E,E,72,[[["self"],["dogleg"]],["bool"]]],[11,"ge",E,E,72,[[["self"],["dogleg"]],["bool"]]],[11,R[113],R[95],E,73,[[["self"],[R[136]]],[["option",[R[114]]],[R[114]]]]],[11,"lt",E,E,73,[[["self"],[R[136]]],["bool"]]],[11,"le",E,E,73,[[["self"],[R[136]]],["bool"]]],[11,"gt",E,E,73,[[["self"],[R[136]]],["bool"]]],[11,"ge",E,E,73,[[["self"],[R[136]]],["bool"]]],[11,"eq",R[74],E,43,[[["self"],[R[124]]],["bool"]]],[11,"eq",E,E,44,[[["self"],[R[125]]],["bool"]]],[11,"eq",E,E,45,[[["self"],[R[126]]],["bool"]]],[11,"eq",E,E,46,[[["self"],[R[127]]],["bool"]]],[11,"eq",R[93],E,71,[[["self"],[R[122]]],["bool"]]],[11,"ne",E,E,71,[[["self"],[R[122]]],["bool"]]],[11,"eq",R[94],E,72,[[["self"],["dogleg"]],["bool"]]],[11,"ne",E,E,72,[[["self"],["dogleg"]],["bool"]]],[11,"eq",R[95],E,73,[[["self"],[R[136]]],["bool"]]],[11,"ne",E,E,73,[[["self"],[R[136]]],["bool"]]],[11,"cmp",R[74],E,43,[[["self"],[R[124]]],[R[114]]]],[11,"cmp",E,E,44,[[["self"],[R[125]]],[R[114]]]],[11,"cmp",E,E,45,[[["self"],[R[126]]],[R[114]]]],[11,"cmp",E,E,46,[[["self"],[R[127]]],[R[114]]]],[11,"hash",E,E,43,[[["self"],["__h"]]]],[11,"hash",E,E,44,[[["self"],["__h"]]]],[11,"hash",E,E,45,[[["self"],["__h"]]]],[11,"hash",E,E,46,[[["self"],["__h"]]]],[11,"fmt",R[70],E,86,[[["self"],[R[97]]],[R[7]]]],[11,"fmt",R[74],E,43,[[["self"],[R[97]]],[R[7]]]],[11,"fmt",E,E,44,[[["self"],[R[97]]],[R[7]]]],[11,"fmt",E,E,45,[[["self"],[R[97]]],[R[7]]]],[11,"fmt",E,E,46,[[["self"],[R[97]]],[R[7]]]],[11,"fmt",R[80],E,53,[[["self"],[R[97]]],[R[7]]]],[11,"fmt",E,E,54,[[["self"],[R[97]]],[R[7]]]],[11,"fmt",E,E,55,[[["self"],[R[97]]],[R[7]]]],[11,"fmt",E,E,56,[[["self"],[R[97]]],[R[7]]]],[11,"fmt",R[86],E,62,[[["self"],[R[97]]],[R[7]]]],[11,"fmt",R[92],E,69,[[["self"],[R[97]]],[R[7]]]],[11,"fmt",R[93],E,71,[[["self"],[R[97]]],[R[7]]]],[11,"fmt",R[94],E,72,[[["self"],[R[97]]],[R[7]]]],[11,"fmt",R[95],E,73,[[["self"],[R[97]]],[R[7]]]],[11,"fmt",R[70],E,86,[[["self"],[R[97]]],[R[7]]]],[11,"description",E,E,86,[[["self"]],["str"]]],[11,R[110],E,E,40,[[["self"],["__s"]],[R[7]]]],[11,R[110],R[72],E,41,[[["self"],["__s"]],[R[7]]]],[11,R[110],R[73],E,42,[[["self"],["__s"]],[R[7]]]],[11,R[110],R[74],E,43,[[["self"],["__s"]],[R[7]]]],[11,R[110],E,E,44,[[["self"],["__s"]],[R[7]]]],[11,R[110],E,E,45,[[["self"],["__s"]],[R[7]]]],[11,R[110],E,E,46,[[["self"],["__s"]],[R[7]]]],[11,R[110],R[75],E,47,[[["self"],["__s"]],[R[7]]]],[11,R[110],R[76],E,48,[[["self"],["__s"]],[R[7]]]],[11,R[110],R[77],E,49,[[["self"],["__s"]],[R[7]]]],[11,R[110],R[78],E,50,[[["self"],["__s"]],[R[7]]]],[11,R[110],R[79],E,51,[[["self"],["__s"]],[R[7]]]],[11,R[110],R[80],E,53,[[["self"],["__s"]],[R[7]]]],[11,R[110],E,E,54,[[["self"],["__s"]],[R[7]]]],[11,R[110],E,E,55,[[["self"],["__s"]],[R[7]]]],[11,R[110],E,E,56,[[["self"],["__s"]],[R[7]]]],[11,R[110],R[81],E,57,[[["self"],["__s"]],[R[7]]]],[11,R[110],R[82],E,58,[[["self"],["__s"]],[R[7]]]],[11,R[110],R[83],E,59,[[["self"],["__s"]],[R[7]]]],[11,R[110],R[84],E,60,[[["self"],["__s"]],[R[7]]]],[11,R[110],R[85],E,61,[[["self"],["__s"]],[R[7]]]],[11,R[110],R[86],E,63,[[["self"],["__s"]],[R[7]]]],[11,R[110],E,E,62,[[["self"],["__s"]],[R[7]]]],[11,R[110],R[87],E,64,[[["self"],["__s"]],[R[7]]]],[11,R[110],R[88],E,65,[[["self"],["__s"]],[R[7]]]],[11,R[110],R[89],E,66,[[["self"],["__s"]],[R[7]]]],[11,R[110],R[90],E,67,[[["self"],["__s"]],[R[7]]]],[11,R[110],R[91],E,68,[[["self"],["__s"]],[R[7]]]],[11,R[110],R[92],E,69,[[["self"],["__s"]],[R[7]]]],[11,R[110],E,E,70,[[["self"],["__s"]],[R[7]]]],[11,R[110],R[93],E,71,[[["self"],["__s"]],[R[7]]]],[11,R[110],R[94],E,72,[[["self"],["__s"]],[R[7]]]],[11,R[110],R[95],E,73,[[["self"],["__s"]],[R[7]]]],[11,R[110],R[96],E,74,[[["self"],["__s"]],[R[7]]]],[11,R[98],R[70],E,40,[[["__d"]],[R[7]]]],[11,R[98],R[72],E,41,[[["__d"]],[R[7]]]],[11,R[98],R[73],E,42,[[["__d"]],[R[7]]]],[11,R[98],R[74],E,43,[[["__d"]],[R[7]]]],[11,R[98],E,E,44,[[["__d"]],[R[7]]]],[11,R[98],E,E,45,[[["__d"]],[R[7]]]],[11,R[98],E,E,46,[[["__d"]],[R[7]]]],[11,R[98],R[75],E,47,[[["__d"]],[R[7]]]],[11,R[98],R[76],E,48,[[["__d"]],[R[7]]]],[11,R[98],R[77],E,49,[[["__d"]],[R[7]]]],[11,R[98],R[78],E,50,[[["__d"]],[R[7]]]],[11,R[98],R[79],E,51,[[["__d"]],[R[7]]]],[11,R[98],R[80],E,53,[[["__d"]],[R[7]]]],[11,R[98],E,E,54,[[["__d"]],[R[7]]]],[11,R[98],E,E,55,[[["__d"]],[R[7]]]],[11,R[98],E,E,56,[[["__d"]],[R[7]]]],[11,R[98],R[81],E,57,[[["__d"]],[R[7]]]],[11,R[98],R[82],E,58,[[["__d"]],[R[7]]]],[11,R[98],R[83],E,59,[[["__d"]],[R[7]]]],[11,R[98],R[84],E,60,[[["__d"]],[R[7]]]],[11,R[98],R[85],E,61,[[["__d"]],[R[7]]]],[11,R[98],R[86],E,63,[[["__d"]],[R[7]]]],[11,R[98],E,E,62,[[["__d"]],[R[7]]]],[11,R[98],R[87],E,64,[[["__d"]],[R[7]]]],[11,R[98],R[88],E,65,[[["__d"]],[R[7]]]],[11,R[98],R[89],E,66,[[["__d"]],[R[7]]]],[11,R[98],R[90],E,67,[[["__d"]],[R[7]]]],[11,R[98],R[91],E,68,[[["__d"]],[R[7]]]],[11,R[98],R[92],E,69,[[["__d"]],[R[7]]]],[11,R[98],E,E,70,[[["__d"]],[R[7]]]],[11,R[98],R[93],E,71,[[["__d"]],[R[7]]]],[11,R[98],R[94],E,72,[[["__d"]],[R[7]]]],[11,R[98],R[95],E,73,[[["__d"]],[R[7]]]],[11,R[98],R[96],E,74,[[["__d"]],[R[7]]]],[11,"init",R[70],E,40,[[["self"],[R[12]],[R[11]]],[[R[7],["option",R[8]]],[R[8]],["option",[R[10]]]]]],[11,R[138],E,E,40,[[["self"],[R[12]],[R[11]]],[[R[10]],[R[7],[R[10],R[8]]],[R[8]]]]],[11,"init",R[72],E,41,[[["self"],[R[12]],[R[11]]],[[R[7],["option",R[8]]],[R[8]],["option",[R[10]]]]]],[11,R[138],E,"Perform one iteration of CG algorithm",41,[[["self"],[R[12]],[R[11]]],[[R[10]],[R[7],[R[10],R[8]]],[R[8]]]]],[11,"init",R[73],E,42,[[["self"],[R[12]],[R[11]]],[[R[7],["option",R[8]]],[R[8]],["option",[R[10]]]]]],[11,R[138],E,E,42,[[["self"],[R[12]],[R[11]]],[[R[10]],[R[7],[R[10],R[8]]],[R[8]]]]],[11,R[138],R[75],E,47,[[["self"],[R[12]],[R[11]]],[[R[10]],[R[7],[R[10],R[8]]],[R[8]]]]],[11,R[139],E,E,47,[[["self"],[R[11]]],[R[13]]]],[11,R[138],R[76],E,48,[[["self"],[R[12]],[R[11]]],[[R[10]],[R[7],[R[10],R[8]]],[R[8]]]]],[11,R[139],E,E,48,[[["self"],[R[11]]],[R[13]]]],[11,R[138],R[77],E,49,[[["self"],[R[12]],[R[11]]],[[R[10]],[R[7],[R[10],R[8]]],[R[8]]]]],[11,R[138],R[78],E,50,[[["self"],[R[12]],[R[11]]],[[R[10]],[R[7],[R[10],R[8]]],[R[8]]]]],[11,"init",R[79],E,51,[[["self"],[R[12]],[R[11]]],[[R[7],["option",R[8]]],[R[8]],["option",[R[10]]]]]],[11,R[138],E,E,51,[[["self"],[R[12]],[R[11]]],[[R[10]],[R[7],[R[10],R[8]]],[R[8]]]]],[11,R[139],E,E,51,[[["self"],[R[11]]],[R[13]]]],[11,"init",R[81],E,57,[[["self"],[R[12]],[R[11]]],[[R[7],["option",R[8]]],[R[8]],["option",[R[10]]]]]],[11,R[138],E,E,57,[[["self"],[R[12]],[R[11]]],[[R[10]],[R[7],[R[10],R[8]]],[R[8]]]]],[11,R[139],E,E,57,[[["self"],[R[11]]],[R[13]]]],[11,"init",R[82],E,58,[[["self"],[R[12]],[R[11]]],[[R[7],["option",R[8]]],[R[8]],["option",[R[10]]]]]],[11,R[138],E,E,58,[[["self"],[R[12]],[R[11]]],[[R[10]],[R[7],[R[10],R[8]]],[R[8]]]]],[11,"init",R[83],E,59,[[["self"],[R[12]],[R[11]]],[[R[7],["option",R[8]]],[R[8]],["option",[R[10]]]]]],[11,R[138],E,E,59,[[["self"],[R[12]],[R[11]]],[[R[10]],[R[7],[R[10],R[8]]],[R[8]]]]],[11,R[139],E,E,59,[[["self"],[R[11]]],[R[13]]]],[11,R[138],R[84],E,60,[[["self"],[R[12]],[R[11]]],[[R[10]],[R[7],[R[10],R[8]]],[R[8]]]]],[11,R[139],E,E,60,[[["self"],[R[11]]],[R[13]]]],[11,R[138],R[85],E,61,[[["self"],[R[12]],[R[11]]],[[R[10]],[R[7],[R[10],R[8]]],[R[8]]]]],[11,"init",R[86],E,63,[[["self"],[R[12]],[R[11]]],[[R[7],["option",R[8]]],[R[8]],["option",[R[10]]]]]],[11,R[138],E,"Perform one iteration of algorithm",63,[[["self"],[R[12]],[R[11]]],[[R[10]],[R[7],[R[10],R[8]]],[R[8]]]]],[11,"init",R[87],E,64,[[["self"],[R[12]],[R[11]]],[[R[7],["option",R[8]]],[R[8]],["option",[R[10]]]]]],[11,R[138],E,E,64,[[["self"],[R[12]],[R[11]]],[[R[10]],[R[7],[R[10],R[8]]],[R[8]]]]],[11,R[139],E,E,64,[[["self"],[R[11]]],[R[13]]]],[11,"init",R[88],E,65,[[["self"],[R[12]],[R[11]]],[[R[7],["option",R[8]]],[R[8]],["option",[R[10]]]]]],[11,R[138],E,E,65,[[["self"],[R[12]],[R[11]]],[[R[10]],[R[7],[R[10],R[8]]],[R[8]]]]],[11,R[139],E,E,65,[[["self"],[R[11]]],[R[13]]]],[11,"init",R[89],E,66,[[["self"],[R[12]],[R[11]]],[[R[7],["option",R[8]]],[R[8]],["option",[R[10]]]]]],[11,R[138],E,E,66,[[["self"],[R[12]],[R[11]]],[[R[10]],[R[7],[R[10],R[8]]],[R[8]]]]],[11,R[139],E,E,66,[[["self"],[R[11]]],[R[13]]]],[11,"init",R[90],E,67,[[["self"],[R[12]],[R[11]]],[[R[7],["option",R[8]]],[R[8]],["option",[R[10]]]]]],[11,R[138],E,E,67,[[["self"],[R[12]],[R[11]]],[[R[10]],[R[7],[R[10],R[8]]],[R[8]]]]],[11,R[139],E,E,67,[[["self"],[R[11]]],[R[13]]]],[11,"init",R[91],E,68,[[["self"],[R[12]],[R[11]]],[[R[7],["option",R[8]]],[R[8]],["option",[R[10]]]]]],[11,R[138],E,E,68,[[["self"],[R[12]],[R[11]]],[[R[10]],[R[7],[R[10],R[8]]],[R[8]]]]],[11,R[139],E,E,68,[[["self"],[R[11]]],[R[13]]]],[11,"init",R[92],E,70,[[["self"],[R[12]],[R[11]]],[[R[7],["option",R[8]]],[R[8]],["option",[R[10]]]]]],[11,R[138],E,"Perform one iteration of SA algorithm",70,[[["self"],[R[12]],[R[11]]],[[R[10]],[R[7],[R[10],R[8]]],[R[8]]]]],[11,R[139],E,E,70,[[["self"],[R[11]]],[R[13]]]],[11,R[138],R[93],E,71,[[["self"],[R[12]],[R[11]]],[[R[10]],[R[7],[R[10],R[8]]],[R[8]]]]],[11,R[139],E,E,71,[[["self"],[R[11]]],[R[13]]]],[11,R[138],R[94],E,72,[[["self"],[R[12]],[R[11]]],[[R[10]],[R[7],[R[10],R[8]]],[R[8]]]]],[11,R[139],E,E,72,[[["self"],[R[11]]],[R[13]]]],[11,"init",R[95],E,73,[[["self"],[R[12]],[R[11]]],[[R[7],["option",R[8]]],[R[8]],["option",[R[10]]]]]],[11,R[138],E,E,73,[[["self"],[R[12]],[R[11]]],[[R[10]],[R[7],[R[10],R[8]]],[R[8]]]]],[11,R[139],E,E,73,[[["self"],[R[11]]],[R[13]]]],[11,"init",R[96],E,74,[[["self"],[R[12]],[R[11]]],[[R[7],["option",R[8]]],[R[8]],["option",[R[10]]]]]],[11,R[138],E,E,74,[[["self"],[R[12]],[R[11]]],[[R[10]],[R[7],[R[10],R[8]]],[R[8]]]]],[11,R[139],E,E,74,[[["self"],[R[11]]],[R[13]]]],[11,R[140],R[79],R[142],51,[[["self"],["p"]]]],[11,R[141],E,R[143],51,[[["self"],["f64"]],[[R[7],[R[8]]],[R[8]]]]],[11,R[140],R[81],R[142],57,[[["self"],["p"]]]],[11,R[141],E,R[143],57,[[["self"],["f64"]],[[R[7],[R[8]]],[R[8]]]]],[11,R[140],R[82],R[142],58,[[["self"],["p"]]]],[11,R[141],E,R[143],58,[[["self"],["f64"]],[[R[7],[R[8]]],[R[8]]]]],[11,R[144],R[93],E,71,[[["self"],["f64"]]]],[11,R[144],R[94],E,72,[[["self"],["f64"]]]],[11,R[144],R[95],E,73,[[["self"],["f64"]]]],[11,"update",R[74],E,43,[[["self"],[T]],["f64"]]],[11,"update",E,E,44,[[["self"],[T]],["f64"]]],[11,"update",E,E,45,[[["self"],[T]],["f64"]]],[11,"update",E,E,46,[[["self"],[T]],["f64"]]],[11,"new",R[56],E,75,[[["o"],["s"]],[R[102]]]],[11,"from_checkpoint",E,E,75,[[["p"]],[[R[7],[R[102],R[8]]],[R[102]],[R[8]]]]],[11,"run",E,E,75,[[],[[R[7],[R[101],R[8]]],[R[101]],[R[8]]]]],[11,"add_observer",E,"Attaches a observer which implements `ArgminLog` to the…",75,[[[R[103]],["obs"]],[R[102]]]],[11,R[52],E,"Set maximum number of iterations",75,[[["u64"]],[R[102]]]],[11,R[145],E,"Set target cost value",75,[[["f64"]],[R[102]]]],[11,"cost",E,"Set cost value",75,[[["f64"]],[R[102]]]],[11,"grad",E,"Set Gradient",75,[[],[R[102]]]],[11,R[50],E,R[146],75,[[],[R[102]]]],[11,R[23],E,R[147],75,[[],[R[102]]]],[11,"checkpoint_dir",E,"Set checkpoint directory",75,[[["str"]],[R[102]]]],[11,"checkpoint_name",E,"Set checkpoint name",75,[[["str"]],[R[102]]]],[11,"checkpoint_mode",E,E,75,[[[R[107]]],[R[102]]]],[11,"ctrlc",E,"Turn Ctrl-C handling on or off (default: on)",75,[[["bool"]],[R[102]]]],[11,"new",R[58],"Create a new empty `PerturbationVector`",0,[[],[R[118]]]],[11,"add",E,"Add an index `x_idx` and the corresponding function…",0,[[["usize"],["vec",["usize"]]],[R[118]]]],[11,"new",R[1],R[40],76,[[],[R[10]]]],[11,"param",E,"Set parameter vector",76,[[],[R[10]]]],[11,"cost",E,"Set cost function value",76,[[["f64"]],[R[10]]]],[11,"grad",E,"Set gradient",76,[[],[R[10]]]],[11,R[50],E,R[146],76,[[],[R[10]]]],[11,R[23],E,R[147],76,[[],[R[10]]]],[11,R[148],E,"Set Population",76,[[["vec"]],[R[10]]]],[11,"kv",E,"Adds an `ArgminKV`",76,[[[R[36]]],[R[10]]]],[11,R[149],E,"Set termination reason",76,[[[R[13]]],[R[10]]]],[11,R[155],E,"Get parameter vector",76,[[["self"]],["option"]]],[11,"get_cost",E,"Get cost function value",76,[[["self"]],[["option",["f64"]],["f64"]]]],[11,"get_grad",E,"Get gradient",76,[[["self"]],["option"]]],[11,R[158],E,"Get Hessian",76,[[["self"]],["option"]]],[11,R[159],E,"Get Jacobian",76,[[["self"]],["option"]]],[11,R[160],E,"Get reference to population",76,[[["self"]],[["vec"],["option",["vec"]]]]],[11,R[156],E,"Get termination reason",76,[[["self"]],[[R[13]],["option",[R[13]]]]]],[11,"get_kv",E,"Return KV",76,[[["self"]],[R[36]]]],[11,"new",E,R[40],7,[[],[R[36]]]],[11,"push",E,"Push a key-value pair to the `kv` vector.",7,[[["self"],[T],["str"]],[R[36]]]],[11,"merge",E,"Merge another `kv` into `self.kv`",7,[[[R[36]]],[R[36]]]],[11,"new",E,E,77,[[["o"],["f64"]],["surface"]]],[11,"new",E,R[40],78,[[],[R[105]]]],[11,"from_boxed_compat",E,"Creates an `Error` from `Box<std::error::Error>`.",79,[[["box",[R[8]]],[R[8]]],[R[8]]]],[11,R[71],E,"Return a reference to the underlying failure that this…",79,[[["self"]],["fail"]]],[11,"name",E,"Returns the name of the underlying fail.",79,[[["self"]],[["option",["str"]],["str"]]]],[11,"cause",E,"Returns a reference to the underlying cause of this…",79,[[["self"]],["fail"]]],[11,R[112],E,"Gets a reference to the `Backtrace` for this `Error`.",79,[[["self"]],[R[112]]]],[11,"context",E,"Provides context for this `Error`.",79,[[["d"]],["context"]]],[11,"compat",E,"Wraps `Error` in a compatibility type.",79,[[],[["compat",[R[8]]],[R[8]]]]],[11,"downcast",E,R[150],79,[[],[[R[7],[R[8]]],[R[8]]]]],[11,"find_root_cause",E,"Returns the \"root cause\" of this error - the last value in…",79,[[["self"]],["fail"]]],[11,"iter_causes",E,"Returns a iterator over the causes of this error with the…",79,[[["self"]],["causes"]]],[11,"iter_chain",E,"Returns a iterator over all fails up the chain from the…",79,[[["self"]],["causes"]]],[11,"downcast_ref",E,R[150],79,[[["self"]],[[T],["option"]]]],[11,"downcast_mut",E,R[150],79,[[["self"]],[[T],["option"]]]],[11,"root_cause",E,"Deprecated alias to `find_root_cause`.",79,[[["self"]],["fail"]]],[11,"causes",E,"Deprecated alias to `iter_causes`.",79,[[["self"]],["causes"]]],[11,"new",E,E,80,[[["str"],[R[107]]],[[R[7],[R[104],R[8]]],[R[8]],[R[104]]]]],[11,"set_dir",E,E,80,[[["self"],["str"]]]],[11,"dir",E,E,80,[[["self"]],[R[69]]]],[11,"set_name",E,E,80,[[["self"],["str"]]]],[11,"name",E,E,80,[[["self"]],[R[69]]]],[11,"set_mode",E,E,80,[[["self"],[R[107]]]]],[11,"store",E,E,80,[[["self"],[R[69]],[T]],[[R[7],[R[8]]],[R[8]]]]],[11,"store_cond",E,E,80,[[["self"],["u64"],[T]],[[R[7],[R[8]]],[R[8]]]]],[11,"new",E,R[40],9,[[["o"]],[R[12]]]],[11,"new_move",E,"Constructor (moves op)",9,[[["o"]],[R[12]]]],[11,"apply",E,"Calls the `apply` method of `op` and increments…",9,[[["self"]],[[R[7],[R[8]]],[R[8]]]]],[11,R[109],E,"Calls the `gradient` method of `op` and increments…",9,[[["self"]],[[R[7],[R[8]]],[R[8]]]]],[11,R[50],E,"Calls the `hessian` method of `op` and increments…",9,[[["self"]],[[R[7],[R[8]]],[R[8]]]]],[11,R[23],E,"Calls the `jacobian` method of `op` and increments…",9,[[["self"]],[[R[7],[R[8]]],[R[8]]]]],[11,"modify",E,"Calls the `modify` method of `op` and increments…",9,[[["self"],["f64"]],[[R[7],[R[8]]],[R[8]]]]],[11,"consume_op",E,"Consumes an operator by increasing the function call…",9,[[["self"],[R[12]]]]],[11,"reset",E,"Reset the cost function counts to zero",9,[[],[R[12]]]],[11,"get_op",E,"Returns the operator `op` by taking ownership of `self`.",9,[[],["o"]]],[11,"clone_op",E,"Returns a clone of the operator `op`.",9,[[["self"]],["o"]]],[11,"new_from_op",E,"Creates a new `OpWrapper<O>` from another `OpWrapper<O>`…",9,[[[R[12]]],[R[12]]]],[11,"new",R[17],E,13,[[["e"],["p"],["l"]],[R[18]]]],[11,"new",R[67],E,81,[[],[R[151]]]],[11,"delay",E,E,81,[[[R[157]]],[R[151]]]],[11,"surface",E,E,81,[[["surface"]],[R[151]]]],[11,"new",R[1],"Create new IterState from `param`",22,[[],[R[11]]]],[11,"param",E,"Set parameter vector. This shifts the stored parameter…",22,[[["self"]],[R[11]]]],[11,R[152],E,"Set best paramater vector. This shifts the stored best…",22,[[["self"]],[R[11]]]],[11,"cost",E,"Set the current cost function value. This shifts the…",22,[[["self"],["f64"]],[R[11]]]],[11,R[153],E,"Set the current best cost function value. This shifts the…",22,[[["self"],["f64"]],[R[11]]]],[11,"grad",E,"Set gradient. This shifts the stored gradient to the…",22,[[["self"]],[R[11]]]],[11,R[50],E,"Set Hessian. This shifts the stored Hessian to the…",22,[[["self"]],[R[11]]]],[11,R[23],E,"Set Jacobian. This shifts the stored Jacobian to the…",22,[[["self"]],[R[11]]]],[11,R[148],E,E,22,[[["self"],["vec"]],[R[11]]]],[11,R[145],E,E,22,[[["self"],["f64"]],[R[11]]]],[11,R[52],E,E,22,[[["self"],["u64"]],[R[11]]]],[11,R[154],E,E,22,[[["self"],["u64"]],[R[11]]]],[11,R[149],E,E,22,[[["self"],[R[13]]],[R[11]]]],[11,"time",E,E,22,[[["self"],[R[157]]],[R[11]]]],[11,R[155],E,E,22,[[["self"]]]],[11,"get_prev_param",E,E,22,[[["self"]]]],[11,"get_best_param",E,E,22,[[["self"]]]],[11,"get_prev_best_param",E,E,22,[[["self"]]]],[11,"get_cost",E,E,22,[[["self"]],["f64"]]],[11,"get_prev_cost",E,E,22,[[["self"]],["f64"]]],[11,"get_best_cost",E,E,22,[[["self"]],["f64"]]],[11,"get_prev_best_cost",E,E,22,[[["self"]],["f64"]]],[11,"get_target_cost",E,E,22,[[["self"]],["f64"]]],[11,"get_cost_func_count",E,E,22,[[["self"]],["u64"]]],[11,"get_grad_func_count",E,E,22,[[["self"]],["u64"]]],[11,"get_hessian_func_count",E,E,22,[[["self"]],["u64"]]],[11,"get_jacobian_func_count",E,E,22,[[["self"]],["u64"]]],[11,"get_modify_func_count",E,E,22,[[["self"]],["u64"]]],[11,"get_last_best_iter",E,E,22,[[["self"]],["u64"]]],[11,R[156],E,E,22,[[["self"]],[R[13]]]],[11,"get_time",E,E,22,[[["self"]],[R[157]]]],[11,"get_grad",E,E,22,[[["self"]],["option"]]],[11,"get_prev_grad",E,E,22,[[["self"]],["option"]]],[11,R[158],E,E,22,[[["self"]],["option"]]],[11,"get_prev_hessian",E,E,22,[[["self"]],["option"]]],[11,R[159],E,E,22,[[["self"]],["option"]]],[11,"get_prev_jacobian",E,E,22,[[["self"]],["option"]]],[11,"get_iter",E,E,22,[[["self"]],["u64"]]],[11,"get_max_iters",E,E,22,[[["self"]],["u64"]]],[11,R[160],E,"Returns population",22,[[["self"]],[["vec"],["option",["vec"]]]]],[11,"increment_iter",E,"Increment the number of iterations by one",22,[[["self"]]]],[11,"increment_func_counts",E,"Increment all function evaluation counts by the evaluation…",22,[[["self"],[R[12]]]]],[11,"set_func_counts",E,"Set all function evaluation counts to the evaluation…",22,[[["self"],[R[12]]]]],[11,"increment_cost_func_count",E,"Increment cost function evaluation count by `num`",22,[[["self"],["u64"]]]],[11,"increment_grad_func_count",E,"Increment gradient function evaluation count by `num`",22,[[["self"],["u64"]]]],[11,"increment_hessian_func_count",E,"Increment Hessian function evaluation count by `num`",22,[[["self"],["u64"]]]],[11,"increment_jacobian_func_count",E,"Increment Jacobian function evaluation count by `num`",22,[[["self"],["u64"]]]],[11,"increment_modify_func_count",E,"Increment modify function evaluation count by `num`",22,[[["self"],["u64"]]]],[11,"new_best",E,"Indicate that a new best parameter vector was found",22,[[["self"]]]],[11,"is_best",E,"Returns whether the current parameter vector is also the…",22,[[["self"]],["bool"]]],[11,R[163],E,"Return whether the algorithm has terminated or not",22,[[["self"]],["bool"]]],[11,"term",E,"Log to the terminal in a blocking way",82,[[],[R[161]]]],[11,"term_noblock",E,"Log to the terminal in a non-blocking way (in case of…",82,[[],[R[161]]]],[11,"file",E,"Log JSON to a file in a blocking way",82,[[["str"]],[[R[7],[R[161],R[8]]],[R[161]],[R[8]]]]],[11,"file_noblock",E,"Log JSON to a file in a non-blocking way (in case of…",82,[[["str"]],[[R[7],[R[161],R[8]]],[R[161]],[R[8]]]]],[11,"new",E,R[40],83,[[],[R[162]]]],[11,"push",E,"Push another `Observe` to the `observer` field",83,[[["self"],[R[103]],["obs"]],[R[162]]]],[11,"new",R[68],E,84,[[["str"]],[R[99]]]],[11,R[111],E,E,84,[[[R[100]]],[R[99]]]],[11,R[163],R[1],"Returns `true` if a solver terminated and `false` otherwise",31,[[],["bool"]]],[11,"text",E,"Returns a texual representation of what happened",31,[[["self"]],["str"]]],[11,"new",E,R[40],85,[[],[R[106]]]],[11,"new",E,R[40],35,[[["o"],[R[11]]],[R[101]]]]],"p":[[3,R[164]],[8,R[165]],[8,"ArgminOp"],[8,"Solver"],[8,R[166]],[8,R[167]],[8,R[168]],[3,"ArgminKV"],[8,R[169]],[3,R[170]],[8,R[171]],[8,R[172]],[8,R[173]],[3,R[174]],[8,R[175]],[8,R[176]],[8,R[177]],[8,R[178]],[8,R[179]],[8,R[180]],[8,R[181]],[8,R[182]],[3,R[183]],[4,R[184]],[4,R[185]],[8,R[186]],[3,R[187]],[8,R[188]],[4,R[189]],[8,R[190]],[8,R[191]],[4,R[192]],[8,R[193]],[8,R[194]],[8,R[195]],[3,R[196]],[8,R[197]],[8,"Observe"],[8,R[198]],[4,R[199]],[3,"Brent"],[3,R[200]],[3,R[201]],[3,R[202]],[3,R[203]],[3,R[204]],[3,R[205]],[3,R[206]],[3,R[207]],[3,R[208]],[3,R[209]],[3,R[210]],[8,R[211]],[3,R[212]],[3,R[213]],[3,R[214]],[3,R[215]],[3,R[216]],[3,R[217]],[3,R[218]],[3,"NewtonCG"],[3,"Newton"],[3,"Particle"],[3,R[219]],[3,"BFGS"],[3,"DFP"],[3,"LBFGS"],[3,"SR1"],[3,R[220]],[4,R[221]],[3,R[222]],[3,R[223]],[3,"Dogleg"],[3,"Steihaug"],[3,R[224]],[3,R[0]],[3,R[225]],[3,"Surface"],[3,R[226]],[3,"Error"],[3,R[227]],[3,R[228]],[3,R[229]],[3,"Observer"],[3,R[230]],[3,R[231]],[3,R[232]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);