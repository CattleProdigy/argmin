var searchIndex = JSON.parse('{\
"argmin":{"doc":"A pure Rust optimization framework","i":[[0,"core","argmin","Core functionality Argmin Optimizaton toolbox core",null,null],[3,"Error","argmin::core","The <code>Error</code> type, a wrapper around a dynamic error type.",null,null],[0,"macros","","Macros",null,null],[0,"executor","","Executor",null,null],[3,"Executor","argmin::core::executor","Executes a solver",null,null],[12,"op","","operator",0,null],[11,"new","","Create a new executor with a <code>solver</code> and an initial …",0,[[]]],[11,"from_checkpoint","","Create a new executor from a checkpoint",0,[[["path",3],["asref",8]],[["error",3],["result",4]]]],[11,"run","","Run the executor",0,[[],[["result",4],["argminresult",3],["error",3]]]],[11,"add_observer","","Attaches a observer which implements <code>ArgminLog</code> to the …",0,[[["observermode",4],["observe",8]]]],[11,"max_iters","","Set maximum number of iterations",0,[[]]],[11,"target_cost","","Set target cost value",0,[[]]],[11,"cost","","Set cost value",0,[[]]],[11,"grad","","Set Gradient",0,[[]]],[11,"hessian","","Set Hessian",0,[[]]],[11,"jacobian","","Set Jacobian",0,[[]]],[11,"checkpoint_dir","","Set checkpoint directory",0,[[]]],[11,"checkpoint_name","","Set checkpoint name",0,[[]]],[11,"checkpoint_mode","","Set the checkpoint mode",0,[[["checkpointmode",4]]]],[11,"ctrlc","","Turn Ctrl-C handling on or off (default: on)",0,[[]]],[0,"file","argmin::core","Output parameter vectors to file",null,null],[4,"WriteToFileSerializer","argmin::core::file","Different kinds of serializers",null,null],[13,"Bincode","","Bincode",1,null],[13,"JSON","","JSON",1,null],[3,"WriteToFile","","Write parameter vectors to file",null,null],[0,"slog_logger","argmin::core","Loggers based on the <code>slog</code> crate",null,null],[3,"ArgminSlogLogger","argmin::core::slog_logger","A logger based on <code>slog</code>",null,null],[3,"ArgminSlogKV","","This type is necessary in order to be able to implement …",null,null],[12,"kv","","Key value store",2,null],[0,"visualizer","argmin::core","Observer which visualizes the progress of the solver",null,null],[3,"Visualizer3d","argmin::core::visualizer","Visualize iterations of a solver for cost functions of …",null,null],[3,"Surface","","Helper class for visualized surface",null,null],[4,"ArgminError","argmin::core","Argmin error type",null,null],[13,"InvalidParameter","","Indicates and invalid parameter",3,null],[12,"text","argmin::core::ArgminError","Text",4,null],[13,"NotImplemented","argmin::core","Indicates that a function is not implemented",3,null],[12,"text","argmin::core::ArgminError","Text",5,null],[13,"NotInitialized","argmin::core","Indicates that a function is not initialized",3,null],[12,"text","argmin::core::ArgminError","Text",6,null],[13,"ConditionViolated","argmin::core","Indicates that a condition is violated",3,null],[12,"text","argmin::core::ArgminError","Text",7,null],[13,"CheckpointNotFound","argmin::core","Checkpoint was not found",3,null],[12,"text","argmin::core::ArgminError","Text",8,null],[13,"ImpossibleError","argmin::core","Indicates an impossible error",3,null],[12,"text","argmin::core::ArgminError","Text",9,null],[3,"IterState","argmin::core","Maintains the state from iteration to iteration of a …",null,null],[12,"param","","Current parameter vector",10,null],[12,"prev_param","","Previous parameter vector",10,null],[12,"best_param","","Current best parameter vector",10,null],[12,"prev_best_param","","Previous best parameter vector",10,null],[12,"cost","","Current cost function value",10,null],[12,"prev_cost","","Previous cost function value",10,null],[12,"best_cost","","Current best cost function value",10,null],[12,"prev_best_cost","","Previous best cost function value",10,null],[12,"target_cost","","Target cost function value",10,null],[12,"grad","","Current gradient",10,null],[12,"prev_grad","","Previous gradient",10,null],[12,"hessian","","Current Hessian",10,null],[12,"prev_hessian","","Previous Hessian",10,null],[12,"jacobian","","Current Jacobian",10,null],[12,"prev_jacobian","","Previous Jacobian",10,null],[12,"population","","All members for population-based algorithms as (param, …",10,null],[12,"iter","","Current iteration",10,null],[12,"last_best_iter","","Iteration number of last best cost",10,null],[12,"max_iters","","Maximum number of iterations",10,null],[12,"cost_func_count","","Number of cost function evaluations so far",10,null],[12,"grad_func_count","","Number of gradient evaluations so far",10,null],[12,"hessian_func_count","","Number of Hessian evaluations so far",10,null],[12,"jacobian_func_count","","Number of Jacobian evaluations so far",10,null],[12,"modify_func_count","","Number of modify evaluations so far",10,null],[12,"time","","Time required so far",10,null],[12,"termination_reason","","Reason of termination",10,null],[3,"ArgminKV","","A simple key-value storage",null,null],[12,"kv","","The actual key value storage",11,null],[8,"ArgminDot","","Dot/scalar product of <code>T</code> and <code>self</code>",null,null],[10,"dot","","Dot/scalar product of <code>T</code> and <code>self</code>",12,[[]]],[8,"ArgminWeightedDot","","Dot/scalar product of <code>T</code> and <code>self</code> weighted by W (p^TWv)",null,null],[10,"weighted_dot","","Dot/scalar product of <code>T</code> and <code>self</code>",13,[[]]],[8,"ArgminZero","","Return param vector of all zeros (for now, this is a …",null,null],[10,"zero","","Return zero(s)",14,[[]]],[8,"ArgminConj","","Return the conjugate",null,null],[10,"conj","","Return conjugate",15,[[]]],[8,"ArgminZeroLike","","Zero for dynamically sized objects",null,null],[10,"zero_like","","Return zero(s)",16,[[]]],[8,"ArgminEye","","Identity matrix",null,null],[10,"eye","","Identity matrix of size <code>n</code>",17,[[]]],[10,"eye_like","","Identity matrix of same size as <code>self</code>",17,[[]]],[8,"ArgminAdd","","Add a <code>T</code> to <code>self</code>",null,null],[10,"add","","Add a <code>T</code> to <code>self</code>",18,[[]]],[8,"ArgminSub","","Subtract a <code>T</code> from <code>self</code>",null,null],[10,"sub","","Subtract a <code>T</code> from <code>self</code>",19,[[]]],[8,"ArgminMul","","(Pointwise) Multiply a <code>T</code> with <code>self</code>",null,null],[10,"mul","","(Pointwise) Multiply a <code>T</code> with <code>self</code>",20,[[]]],[8,"ArgminDiv","","(Pointwise) Divide a <code>T</code> by <code>self</code>",null,null],[10,"div","","(Pointwise) Divide a <code>T</code> by <code>self</code>",21,[[]]],[8,"ArgminScaledAdd","","Add a <code>T</code> scaled by an <code>U</code> to <code>self</code>",null,null],[10,"scaled_add","","Add a <code>T</code> scaled by an <code>U</code> to <code>self</code>",22,[[]]],[8,"ArgminScaledSub","","Subtract a <code>T</code> scaled by an <code>U</code> from <code>self</code>",null,null],[10,"scaled_sub","","Subtract a <code>T</code> scaled by an <code>U</code> from <code>self</code>",23,[[]]],[8,"ArgminNorm","","Compute the l2-norm (<code>U</code>) of <code>self</code>",null,null],[10,"norm","","Compute the l2-norm (<code>U</code>) of <code>self</code>",24,[[]]],[8,"ArgminTranspose","","Return the transpose (<code>U</code>) of <code>self</code>",null,null],[10,"t","","Transpose",25,[[]]],[8,"ArgminInv","","Compute the inverse (<code>T</code>) of <code>self</code>",null,null],[10,"inv","","Compute the inverse",26,[[],[["error",3],["result",4]]]],[8,"ArgminRandom","","Create a random number",null,null],[10,"rand_from_range","","Get a random element between min and max,",27,[[]]],[8,"ArgminMinMax","","Minimum and Maximum of type <code>T</code>",null,null],[10,"min","","Select piecewise minimum",28,[[]]],[10,"max","","Select piecewise maximum",28,[[]]],[3,"NoOperator","","Fake Operators for testing No-op operator with free …",null,null],[3,"MinimalNoOperator","","Minimal No-op operator which does nothing, really.",null,null],[4,"WriteToFileSerializer","","Different kinds of serializers",null,null],[13,"Bincode","","Bincode",1,null],[13,"JSON","","JSON",1,null],[3,"WriteToFile","","Write parameter vectors to file",null,null],[3,"ArgminSlogLogger","","A logger based on <code>slog</code>",null,null],[3,"ArgminSlogKV","","This type is necessary in order to be able to implement …",null,null],[12,"kv","","Key value store",2,null],[3,"Visualizer3d","","Visualize iterations of a solver for cost functions of …",null,null],[3,"Surface","","Helper class for visualized surface",null,null],[8,"Observe","","Defines the interface every Observer needs to expose",null,null],[11,"observe_init","","Called once at the beginning of the execution of the …",29,[[["argminkv",3]],[["error",3],["result",4]]]],[11,"observe_iter","","Called at every iteration of the solver",29,[[["iterstate",3],["argminkv",3]],[["error",3],["result",4]]]],[3,"Observer","","Container for observers which acts just like a single …",null,null],[4,"ObserverMode","","This is used to indicate how often the observer will …",null,null],[13,"Never","","Never call the observer",30,null],[13,"Always","","Call observer in every iteration",30,null],[13,"Every","","Call observer every N iterations",30,null],[13,"NewBest","","Call observer when new best is found",30,null],[3,"OpWrapper","","This wraps an operator and keeps track of how often the …",null,null],[12,"op","","Operator",31,null],[12,"cost_func_count","","Number of cost function evaluations",31,null],[12,"grad_func_count","","Number of gradient function evaluations",31,null],[12,"hessian_func_count","","Number of Hessian function evaluations",31,null],[12,"jacobian_func_count","","Number of Jacobian function evaluations",31,null],[12,"modify_func_count","","Number of <code>modify</code> function evaluations",31,null],[3,"ArgminResult","","Final struct returned by the <code>run</code> method of <code>Executor</code>.",null,null],[12,"operator","","operator",32,null],[12,"state","","iteration state",32,null],[4,"CheckpointMode","","Defines at which intervals a checkpoint is saved.",null,null],[13,"Never","","Never create checkpoint",33,null],[13,"Every","","Create checkpoint every N iterations",33,null],[13,"Always","","Create checkpoint in every iteration",33,null],[3,"ArgminCheckpoint","","Checkpoint",null,null],[5,"load_checkpoint","","Load a checkpoint from disk",null,[[["path",3],["asref",8]],[["error",3],["deserializeowned",8],["result",4]]]],[4,"TerminationReason","","Indicates why the optimization algorithm stopped",null,null],[13,"NotTerminated","","In case it has not terminated yet",34,null],[13,"MaxItersReached","","Maximum number of iterations reached",34,null],[13,"TargetCostReached","","Target cost function value reached",34,null],[13,"TargetPrecisionReached","","Target precision reached",34,null],[13,"NoChangeInCost","","Cost function value did not change",34,null],[13,"AcceptedStallIterExceeded","","Acceped stall iter exceeded",34,null],[13,"BestStallIterExceeded","","Best stall iter exceeded",34,null],[13,"LineSearchConditionMet","","Condition for Line search met",34,null],[13,"TargetToleranceReached","","Target tolerance reached",34,null],[13,"Aborted","","Aborted",34,null],[8,"ArgminFloat","","Trait alias to simplify common trait bounds",null,null],[8,"ArgminOp","","This trait needs to be implemented for every …",null,null],[16,"Param","","Type of the parameter vector",35,null],[16,"Output","","Output of the operator",35,null],[16,"Hessian","","Type of Hessian",35,null],[16,"Jacobian","","Type of Jacobian",35,null],[16,"Float","","Precision of floats",35,null],[11,"apply","","Applies the operator/cost function to parameters",35,[[],[["error",3],["result",4]]]],[11,"gradient","","Computes the gradient at the given parameters",35,[[],[["result",4],["error",3]]]],[11,"hessian","","Computes the Hessian at the given parameters",35,[[],[["error",3],["result",4]]]],[11,"jacobian","","Computes the Hessian at the given parameters",35,[[],[["error",3],["result",4]]]],[11,"modify","","Modifies a parameter vector. Comes with a variable that …",35,[[],[["result",4],["error",3]]]],[8,"Solver","","Solver",null,null],[18,"NAME","","Name of the solver",36,null],[10,"next_iter","","Computes one iteration of the algorithm.",36,[[["opwrapper",3],["iterstate",3]],[["error",3],["result",4],["argminiterdata",3]]]],[11,"init","","Initializes the algorithm",36,[[["opwrapper",3],["iterstate",3]],[["option",4],["error",3],["result",4]]]],[11,"terminate_internal","","Checks whether basic termination reasons apply.",36,[[["iterstate",3]],["terminationreason",4]]],[11,"terminate","","Checks whether the algorithm must be terminated",36,[[["iterstate",3]],["terminationreason",4]]],[3,"ArgminIterData","","The datastructure which is returned by the <code>next_iter</code> …",null,null],[11,"new","","Constructor",37,[[]]],[11,"param","","Set parameter vector",37,[[]]],[11,"cost","","Set cost function value",37,[[]]],[11,"grad","","Set gradient",37,[[]]],[11,"hessian","","Set Hessian",37,[[]]],[11,"jacobian","","Set Jacobian",37,[[]]],[11,"population","","Set Population",37,[[["vec",3]]]],[11,"kv","","Adds an <code>ArgminKV</code>",37,[[["argminkv",3]]]],[11,"termination_reason","","Set termination reason",37,[[["terminationreason",4]]]],[11,"get_param","","Get parameter vector",37,[[],["option",4]]],[11,"get_cost","","Get cost function value",37,[[],["option",4]]],[11,"get_grad","","Get gradient",37,[[],["option",4]]],[11,"get_hessian","","Get Hessian",37,[[],["option",4]]],[11,"get_jacobian","","Get Jacobian",37,[[],["option",4]]],[11,"get_population","","Get reference to population",37,[[],[["option",4],["vec",3]]]],[11,"get_termination_reason","","Get termination reason",37,[[],[["option",4],["terminationreason",4]]]],[11,"get_kv","","Return KV",37,[[],["argminkv",3]]],[8,"ArgminLineSearch","","Defines a common interface for line search methods.",null,null],[10,"set_search_direction","","Set the search direction",38,[[]]],[10,"set_init_alpha","","Set the initial step length",38,[[],[["error",3],["result",4]]]],[8,"ArgminTrustRegion","","Defines a common interface to methods which calculate …",null,null],[10,"set_radius","","Set the initial step length",39,[[]]],[8,"ArgminNLCGBetaUpdate","","Common interface for beta update methods (Nonlinear-CG)",null,null],[10,"update","","Update beta Parameter 1: \\\\nabla f_k Parameter 2: \\\\nabla f_…",40,[[]]],[0,"prelude","argmin","Definition of all relevant traits and types",null,null],[0,"bounds","argmin::prelude","",null,null],[8,"Bounded","argmin::prelude::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",41,[[]]],[10,"max_value","","returns the largest finite number this type can represent",41,[[]]],[0,"cast","argmin::prelude","",null,null],[8,"ToPrimitive","argmin::prelude::cast","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of <code>self</code> to an <code>isize</code>. If the value …",42,[[],["option",4]]],[11,"to_i8","","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot …",42,[[],["option",4]]],[11,"to_i16","","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …",42,[[],["option",4]]],[11,"to_i32","","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …",42,[[],["option",4]]],[10,"to_i64","","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …",42,[[],["option",4]]],[11,"to_i128","","Converts the value of <code>self</code> to an <code>i128</code>. If the value …",42,[[],["option",4]]],[11,"to_usize","","Converts the value of <code>self</code> to a <code>usize</code>. If the value …",42,[[],["option",4]]],[11,"to_u8","","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be…",42,[[],["option",4]]],[11,"to_u16","","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot …",42,[[],["option",4]]],[11,"to_u32","","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot …",42,[[],["option",4]]],[10,"to_u64","","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot …",42,[[],["option",4]]],[11,"to_u128","","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …",42,[[],["option",4]]],[11,"to_f32","","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map …",42,[[],["option",4]]],[11,"to_f64","","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map …",42,[[],["option",4]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Converts an <code>isize</code> to return an optional value of this …",43,[[],["option",4]]],[11,"from_i8","","Converts an <code>i8</code> to return an optional value of this type. …",43,[[],["option",4]]],[11,"from_i16","","Converts an <code>i16</code> to return an optional value of this type. …",43,[[],["option",4]]],[11,"from_i32","","Converts an <code>i32</code> to return an optional value of this type. …",43,[[],["option",4]]],[10,"from_i64","","Converts an <code>i64</code> to return an optional value of this type. …",43,[[],["option",4]]],[11,"from_i128","","Converts an <code>i128</code> to return an optional value of this …",43,[[],["option",4]]],[11,"from_usize","","Converts a <code>usize</code> to return an optional value of this …",43,[[],["option",4]]],[11,"from_u8","","Converts an <code>u8</code> to return an optional value of this type. …",43,[[],["option",4]]],[11,"from_u16","","Converts an <code>u16</code> to return an optional value of this type. …",43,[[],["option",4]]],[11,"from_u32","","Converts an <code>u32</code> to return an optional value of this type. …",43,[[],["option",4]]],[10,"from_u64","","Converts an <code>u64</code> to return an optional value of this type. …",43,[[],["option",4]]],[11,"from_u128","","Converts an <code>u128</code> to return an optional value of this …",43,[[],["option",4]]],[11,"from_f32","","Converts a <code>f32</code> to return an optional value of this type. …",43,[[],["option",4]]],[11,"from_f64","","Converts a <code>f64</code> to return an optional value of this type. …",43,[[],["option",4]]],[5,"cast","","Cast from one machine scalar to another.",null,[[],["option",4]]],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted …",44,[[],["option",4]]],[8,"AsPrimitive","","A generic interface for casting between machine scalars …",null,null],[10,"as_","","Convert a value to another, using the <code>as</code> operator.",45,[[]]],[0,"float","argmin::prelude","",null,null],[8,"FloatCore","argmin::prelude::float","Generic trait for floating point numbers that works with …",null,null],[10,"infinity","","Returns positive infinity.",46,[[]]],[10,"neg_infinity","","Returns negative infinity.",46,[[]]],[10,"nan","","Returns NaN.",46,[[]]],[10,"neg_zero","","Returns <code>-0.0</code>.",46,[[]]],[10,"min_value","","Returns the smallest finite value that this type can …",46,[[]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this …",46,[[]]],[10,"epsilon","","Returns epsilon, a small positive value.",46,[[]]],[10,"max_value","","Returns the largest finite value that this type can …",46,[[]]],[11,"is_nan","","Returns <code>true</code> if the number is NaN.",46,[[]]],[11,"is_infinite","","Returns <code>true</code> if the number is infinite.",46,[[]]],[11,"is_finite","","Returns <code>true</code> if the number is neither infinite or NaN.",46,[[]]],[11,"is_normal","","Returns <code>true</code> if the number is neither zero, infinite, …",46,[[]]],[10,"classify","","Returns the floating point category of the number. If …",46,[[],["fpcategory",4]]],[11,"floor","","Returns the largest integer less than or equal to a …",46,[[]]],[11,"ceil","","Returns the smallest integer greater than or equal to a …",46,[[]]],[11,"round","","Returns the nearest integer to a number. Round half-way …",46,[[]]],[11,"trunc","","Return the integer part of a number.",46,[[]]],[11,"fract","","Returns the fractional part of a number.",46,[[]]],[11,"abs","","Computes the absolute value of <code>self</code>. Returns …",46,[[]]],[11,"signum","","Returns a number that represents the sign of <code>self</code>.",46,[[]]],[11,"is_sign_positive","","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code> and …",46,[[]]],[11,"is_sign_negative","","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code> and …",46,[[]]],[11,"min","","Returns the minimum of the two numbers.",46,[[]]],[11,"max","","Returns the maximum of the two numbers.",46,[[]]],[11,"recip","","Returns the reciprocal (multiplicative inverse) of the …",46,[[]]],[11,"powi","","Raise a number to an integer power.",46,[[]]],[10,"to_degrees","","Converts to degrees, assuming the number is in radians.",46,[[]]],[10,"to_radians","","Converts to radians, assuming the number is in degrees.",46,[[]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as …",46,[[]]],[8,"Float","","Generic trait for floating point numbers",null,null],[10,"nan","","Returns the <code>NaN</code> value.",47,[[]]],[10,"infinity","","Returns the infinite value.",47,[[]]],[10,"neg_infinity","","Returns the negative infinite value.",47,[[]]],[10,"neg_zero","","Returns <code>-0.0</code>.",47,[[]]],[10,"min_value","","Returns the smallest finite value that this type can …",47,[[]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this …",47,[[]]],[11,"epsilon","","Returns epsilon, a small positive value.",47,[[]]],[10,"max_value","","Returns the largest finite value that this type can …",47,[[]]],[10,"is_nan","","Returns <code>true</code> if this value is <code>NaN</code> and false otherwise.",47,[[]]],[10,"is_infinite","","Returns <code>true</code> if this value is positive infinity or …",47,[[]]],[10,"is_finite","","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.",47,[[]]],[10,"is_normal","","Returns <code>true</code> if the number is neither zero, infinite, …",47,[[]]],[10,"classify","","Returns the floating point category of the number. If …",47,[[],["fpcategory",4]]],[10,"floor","","Returns the largest integer less than or equal to a …",47,[[]]],[10,"ceil","","Returns the smallest integer greater than or equal to a …",47,[[]]],[10,"round","","Returns the nearest integer to a number. Round half-way …",47,[[]]],[10,"trunc","","Return the integer part of a number.",47,[[]]],[10,"fract","","Returns the fractional part of a number.",47,[[]]],[10,"abs","","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …",47,[[]]],[10,"signum","","Returns a number that represents the sign of <code>self</code>.",47,[[]]],[10,"is_sign_positive","","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …",47,[[]]],[10,"is_sign_negative","","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …",47,[[]]],[10,"mul_add","","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …",47,[[]]],[10,"recip","","Take the reciprocal (inverse) of a number, <code>1/x</code>.",47,[[]]],[10,"powi","","Raise a number to an integer power.",47,[[]]],[10,"powf","","Raise a number to a floating point power.",47,[[]]],[10,"sqrt","","Take the square root of a number.",47,[[]]],[10,"exp","","Returns <code>e^(self)</code>, (the exponential function).",47,[[]]],[10,"exp2","","Returns <code>2^(self)</code>.",47,[[]]],[10,"ln","","Returns the natural logarithm of the number.",47,[[]]],[10,"log","","Returns the logarithm of the number with respect to an …",47,[[]]],[10,"log2","","Returns the base 2 logarithm of the number.",47,[[]]],[10,"log10","","Returns the base 10 logarithm of the number.",47,[[]]],[11,"to_degrees","","Converts radians to degrees.",47,[[]]],[11,"to_radians","","Converts degrees to radians.",47,[[]]],[10,"max","","Returns the maximum of the two numbers.",47,[[]]],[10,"min","","Returns the minimum of the two numbers.",47,[[]]],[10,"abs_sub","","The positive difference of two numbers.",47,[[]]],[10,"cbrt","","Take the cubic root of a number.",47,[[]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle …",47,[[]]],[10,"sin","","Computes the sine of a number (in radians).",47,[[]]],[10,"cos","","Computes the cosine of a number (in radians).",47,[[]]],[10,"tan","","Computes the tangent of a number (in radians).",47,[[]]],[10,"asin","","Computes the arcsine of a number. Return value is in …",47,[[]]],[10,"acos","","Computes the arccosine of a number. Return value is in …",47,[[]]],[10,"atan","","Computes the arctangent of a number. Return value is in …",47,[[]]],[10,"atan2","","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and …",47,[[]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the …",47,[[]]],[10,"exp_m1","","Returns <code>e^(self) - 1</code> in a way that is accurate even if the…",47,[[]]],[10,"ln_1p","","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than …",47,[[]]],[10,"sinh","","Hyperbolic sine function.",47,[[]]],[10,"cosh","","Hyperbolic cosine function.",47,[[]]],[10,"tanh","","Hyperbolic tangent function.",47,[[]]],[10,"asinh","","Inverse hyperbolic sine function.",47,[[]]],[10,"acosh","","Inverse hyperbolic cosine function.",47,[[]]],[10,"atanh","","Inverse hyperbolic tangent function.",47,[[]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as …",47,[[]]],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",48,[[]]],[10,"FRAC_1_PI","","Return <code>1.0 / π</code>.",48,[[]]],[10,"FRAC_1_SQRT_2","","Return <code>1.0 / sqrt(2.0)</code>.",48,[[]]],[10,"FRAC_2_PI","","Return <code>2.0 / π</code>.",48,[[]]],[10,"FRAC_2_SQRT_PI","","Return <code>2.0 / sqrt(π)</code>.",48,[[]]],[10,"FRAC_PI_2","","Return <code>π / 2.0</code>.",48,[[]]],[10,"FRAC_PI_3","","Return <code>π / 3.0</code>.",48,[[]]],[10,"FRAC_PI_4","","Return <code>π / 4.0</code>.",48,[[]]],[10,"FRAC_PI_6","","Return <code>π / 6.0</code>.",48,[[]]],[10,"FRAC_PI_8","","Return <code>π / 8.0</code>.",48,[[]]],[10,"LN_10","","Return <code>ln(10.0)</code>.",48,[[]]],[10,"LN_2","","Return <code>ln(2.0)</code>.",48,[[]]],[10,"LOG10_E","","Return <code>log10(e)</code>.",48,[[]]],[10,"LOG2_E","","Return <code>log2(e)</code>.",48,[[]]],[10,"PI","","Return Archimedes’ constant <code>π</code>.",48,[[]]],[10,"SQRT_2","","Return <code>sqrt(2.0)</code>.",48,[[]]],[11,"TAU","","Return the full circle constant <code>τ</code>.",48,[[]]],[11,"LOG10_2","","Return <code>log10(2.0)</code>.",48,[[]]],[11,"LOG2_10","","Return <code>log2(10.0)</code>.",48,[[]]],[0,"identities","argmin::prelude","",null,null],[8,"Zero","argmin::prelude::identities","Defines an additive identity element for <code>Self</code>.",null,null],[10,"zero","","Returns the additive identity element of <code>Self</code>, <code>0</code>.",49,[[]]],[11,"set_zero","","Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.",49,[[]]],[10,"is_zero","","Returns <code>true</code> if <code>self</code> is equal to the additive identity.",49,[[]]],[8,"One","","Defines a multiplicative identity element for <code>Self</code>.",null,null],[10,"one","","Returns the multiplicative identity element of <code>Self</code>, <code>1</code>.",50,[[]]],[11,"set_one","","Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, …",50,[[]]],[11,"is_one","","Returns <code>true</code> if <code>self</code> is equal to the multiplicative …",50,[[]]],[5,"zero","","Returns the additive identity, <code>0</code>.",null,[[]]],[5,"one","","Returns the multiplicative identity, <code>1</code>.",null,[[]]],[0,"int","argmin::prelude","",null,null],[8,"PrimInt","argmin::prelude::int","Generic trait for primitive integers.",null,null],[10,"count_ones","","Returns the number of ones in the binary representation …",51,[[]]],[10,"count_zeros","","Returns the number of zeros in the binary representation …",51,[[]]],[10,"leading_zeros","","Returns the number of leading zeros in the binary …",51,[[]]],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary …",51,[[]]],[10,"rotate_left","","Shifts the bits to the left by a specified amount, <code>n</code>, …",51,[[]]],[10,"rotate_right","","Shifts the bits to the right by a specified amount, <code>n</code>, …",51,[[]]],[10,"signed_shl","","Shifts the bits to the left by a specified amount, <code>n</code>, …",51,[[]]],[10,"signed_shr","","Shifts the bits to the right by a specified amount, <code>n</code>, …",51,[[]]],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount, <code>n</code>, …",51,[[]]],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount, <code>n</code>, …",51,[[]]],[10,"swap_bytes","","Reverses the byte order of the integer.",51,[[]]],[10,"from_be","","Convert an integer from big endian to the target\'s …",51,[[]]],[10,"from_le","","Convert an integer from little endian to the target\'s …",51,[[]]],[10,"to_be","","Convert <code>self</code> to big endian from the target\'s endianness.",51,[[]]],[10,"to_le","","Convert <code>self</code> to little endian from the target\'s …",51,[[]]],[10,"pow","","Raises self to the power of <code>exp</code>, using exponentiation by …",51,[[]]],[0,"ops","argmin::prelude","",null,null],[0,"checked","argmin::prelude::ops","",null,null],[8,"CheckedAdd","argmin::prelude::ops::checked","Performs addition that returns <code>None</code> instead of wrapping …",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow …",52,[[],["option",4]]],[8,"CheckedSub","","Performs subtraction that returns <code>None</code> instead of …",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If …",53,[[],["option",4]]],[8,"CheckedMul","","Performs multiplication that returns <code>None</code> instead of …",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or …",54,[[],["option",4]]],[8,"CheckedDiv","","Performs division that returns <code>None</code> instead of panicking …",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and …",55,[[],["option",4]]],[8,"CheckedRem","","Performs an integral remainder that returns <code>None</code> instead …",null,null],[10,"checked_rem","","Finds the remainder of dividing two numbers, checking for …",56,[[],["option",4]]],[8,"CheckedNeg","","Performs negation that returns <code>None</code> if the result can\'t …",null,null],[10,"checked_neg","","Negates a number, returning <code>None</code> for results that can\'t …",57,[[],["option",4]]],[8,"CheckedShl","","Performs a left shift that returns <code>None</code> on shifts larger …",null,null],[10,"checked_shl","","Checked shift left. Computes <code>self << rhs</code>, returning <code>None</code> …",58,[[],["option",4]]],[8,"CheckedShr","","Performs a right shift that returns <code>None</code> on shifts larger …",null,null],[10,"checked_shr","","Checked shift right. Computes <code>self >> rhs</code>, returning <code>None</code> …",59,[[],["option",4]]],[0,"inv","argmin::prelude::ops","",null,null],[8,"Inv","argmin::prelude::ops::inv","Unary operator for retrieving the multiplicative inverse, …",null,null],[16,"Output","","The result after applying the operator.",60,null],[10,"inv","","Returns the multiplicative inverse of <code>self</code>.",60,[[]]],[0,"mul_add","argmin::prelude::ops","",null,null],[8,"MulAdd","argmin::prelude::ops::mul_add","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …",null,null],[16,"Output","","The resulting type after applying the fused multiply-add.",61,null],[10,"mul_add","","Performs the fused multiply-add operation.",61,[[]]],[8,"MulAddAssign","","The fused multiply-add assignment operation.",null,null],[10,"mul_add_assign","","Performs the fused multiply-add operation.",62,[[]]],[0,"overflowing","argmin::prelude::ops","",null,null],[8,"OverflowingAdd","argmin::prelude::ops::overflowing","Performs addition with a flag for overflow.",null,null],[10,"overflowing_add","","Returns a tuple of the sum along with a boolean …",63,[[]]],[8,"OverflowingSub","","Performs substraction with a flag for overflow.",null,null],[10,"overflowing_sub","","Returns a tuple of the difference along with a boolean …",64,[[]]],[8,"OverflowingMul","","Performs multiplication with a flag for overflow.",null,null],[10,"overflowing_mul","","Returns a tuple of the product along with a boolean …",65,[[]]],[0,"saturating","argmin::prelude::ops","",null,null],[8,"Saturating","argmin::prelude::ops::saturating","Saturating math operations. Deprecated, use <code>SaturatingAdd</code>…",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at …",66,[[]]],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating …",66,[[]]],[8,"SaturatingAdd","","Performs addition that saturates at the numeric bounds …",null,null],[10,"saturating_add","","Saturating addition. Computes <code>self + other</code>, saturating at …",67,[[]]],[8,"SaturatingSub","","Performs subtraction that saturates at the numeric bounds …",null,null],[10,"saturating_sub","","Saturating subtraction. Computes <code>self - other</code>, saturating …",68,[[]]],[8,"SaturatingMul","","Performs multiplication that saturates at the numeric …",null,null],[10,"saturating_mul","","Saturating multiplication. Computes <code>self * other</code>, …",69,[[]]],[0,"wrapping","argmin::prelude::ops","",null,null],[8,"WrappingAdd","argmin::prelude::ops::wrapping","Performs addition that wraps around on overflow.",null,null],[10,"wrapping_add","","Wrapping (modular) addition. Computes <code>self + other</code>, …",70,[[]]],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",null,null],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes <code>self - other</code>, …",71,[[]]],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",null,null],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes <code>self * other</code>, …",72,[[]]],[8,"WrappingNeg","","Performs a negation that does not panic.",null,null],[10,"wrapping_neg","","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …",73,[[]]],[8,"WrappingShl","","Performs a left shift that does not panic.",null,null],[10,"wrapping_shl","","Panic-free bitwise shift-left; yields <code>self << mask(rhs)</code>, …",74,[[]]],[8,"WrappingShr","","Performs a right shift that does not panic.",null,null],[10,"wrapping_shr","","Panic-free bitwise shift-right; yields <code>self >> mask(rhs)</code>, …",75,[[]]],[0,"pow","argmin::prelude","",null,null],[8,"Pow","argmin::prelude::pow","Binary operator for raising a value to a power.",null,null],[16,"Output","","The result after applying the operator.",76,null],[10,"pow","","Returns <code>self</code> to the power <code>rhs</code>.",76,[[]]],[5,"pow","","Raises a value to the power of exp, using exponentiation …",null,[[]]],[5,"checked_pow","","Raises a value to the power of exp, returning <code>None</code> if an …",null,[[],["option",4]]],[0,"real","argmin::prelude","",null,null],[8,"Real","argmin::prelude::real","A trait for real number types that do not necessarily have…",null,null],[10,"min_value","","Returns the smallest finite value that this type can …",77,[[]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this …",77,[[]]],[10,"epsilon","","Returns epsilon, a small positive value.",77,[[]]],[10,"max_value","","Returns the largest finite value that this type can …",77,[[]]],[10,"floor","","Returns the largest integer less than or equal to a …",77,[[]]],[10,"ceil","","Returns the smallest integer greater than or equal to a …",77,[[]]],[10,"round","","Returns the nearest integer to a number. Round half-way …",77,[[]]],[10,"trunc","","Return the integer part of a number.",77,[[]]],[10,"fract","","Returns the fractional part of a number.",77,[[]]],[10,"abs","","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …",77,[[]]],[10,"signum","","Returns a number that represents the sign of <code>self</code>.",77,[[]]],[10,"is_sign_positive","","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …",77,[[]]],[10,"is_sign_negative","","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …",77,[[]]],[10,"mul_add","","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …",77,[[]]],[10,"recip","","Take the reciprocal (inverse) of a number, <code>1/x</code>.",77,[[]]],[10,"powi","","Raise a number to an integer power.",77,[[]]],[10,"powf","","Raise a number to a real number power.",77,[[]]],[10,"sqrt","","Take the square root of a number.",77,[[]]],[10,"exp","","Returns <code>e^(self)</code>, (the exponential function).",77,[[]]],[10,"exp2","","Returns <code>2^(self)</code>.",77,[[]]],[10,"ln","","Returns the natural logarithm of the number.",77,[[]]],[10,"log","","Returns the logarithm of the number with respect to an …",77,[[]]],[10,"log2","","Returns the base 2 logarithm of the number.",77,[[]]],[10,"log10","","Returns the base 10 logarithm of the number.",77,[[]]],[10,"to_degrees","","Converts radians to degrees.",77,[[]]],[10,"to_radians","","Converts degrees to radians.",77,[[]]],[10,"max","","Returns the maximum of the two numbers.",77,[[]]],[10,"min","","Returns the minimum of the two numbers.",77,[[]]],[10,"abs_sub","","The positive difference of two numbers.",77,[[]]],[10,"cbrt","","Take the cubic root of a number.",77,[[]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle …",77,[[]]],[10,"sin","","Computes the sine of a number (in radians).",77,[[]]],[10,"cos","","Computes the cosine of a number (in radians).",77,[[]]],[10,"tan","","Computes the tangent of a number (in radians).",77,[[]]],[10,"asin","","Computes the arcsine of a number. Return value is in …",77,[[]]],[10,"acos","","Computes the arccosine of a number. Return value is in …",77,[[]]],[10,"atan","","Computes the arctangent of a number. Return value is in …",77,[[]]],[10,"atan2","","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and …",77,[[]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the …",77,[[]]],[10,"exp_m1","","Returns <code>e^(self) - 1</code> in a way that is accurate even if the…",77,[[]]],[10,"ln_1p","","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than …",77,[[]]],[10,"sinh","","Hyperbolic sine function.",77,[[]]],[10,"cosh","","Hyperbolic cosine function.",77,[[]]],[10,"tanh","","Hyperbolic tangent function.",77,[[]]],[10,"asinh","","Inverse hyperbolic sine function.",77,[[]]],[10,"acosh","","Inverse hyperbolic cosine function.",77,[[]]],[10,"atanh","","Inverse hyperbolic tangent function.",77,[[]]],[0,"sign","argmin::prelude","",null,null],[8,"Signed","argmin::prelude::sign","Useful functions for signed numbers (i.e. numbers that …",null,null],[10,"abs","","Computes the absolute value.",78,[[]]],[10,"abs_sub","","The positive difference of two numbers.",78,[[]]],[10,"signum","","Returns the sign of the number.",78,[[]]],[10,"is_positive","","Returns true if the number is positive and false if the …",78,[[]]],[10,"is_negative","","Returns true if the number is negative and false if the …",78,[[]]],[5,"abs","","Computes the absolute value.",null,[[]]],[5,"abs_sub","","The positive difference of two numbers.",null,[[]]],[5,"signum","","Returns the sign of the number.",null,[[]]],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Num","argmin::prelude","The base trait for numeric types, covering <code>0</code> and <code>1</code> values,…",null,null],[16,"FromStrRadixErr","","",79,null],[10,"from_str_radix","","Convert from a string and radix (typically <code>2..=36</code>).",79,[[],["result",4]]],[8,"NumOps","","The trait for types implementing basic numeric operations",null,null],[8,"NumRef","","The trait for <code>Num</code> types which also implement numeric …",null,null],[8,"RefNum","","The trait for references which implement numeric …",null,null],[8,"NumAssignOps","","The trait for types implementing numeric assignment …",null,null],[8,"NumAssign","","The trait for <code>Num</code> types which also implement assignment …",null,null],[8,"NumAssignRef","","The trait for <code>NumAssign</code> types which also implement …",null,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",80,null],[13,"Invalid","","",80,null],[3,"ParseFloatError","","",null,null],[12,"kind","","",81,null],[5,"clamp","","A value bounded by a minimum and a maximum",null,[[]]],[5,"clamp_min","","A value bounded by a minimum value",null,[[]]],[5,"clamp_max","","A value bounded by a maximum value",null,[[]]],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",41,[[]]],[10,"max_value","","returns the largest finite number this type can represent",41,[[]]],[8,"Float","","Generic trait for floating point numbers",null,null],[10,"nan","","Returns the <code>NaN</code> value.",47,[[]]],[10,"infinity","","Returns the infinite value.",47,[[]]],[10,"neg_infinity","","Returns the negative infinite value.",47,[[]]],[10,"neg_zero","","Returns <code>-0.0</code>.",47,[[]]],[10,"min_value","","Returns the smallest finite value that this type can …",47,[[]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this …",47,[[]]],[11,"epsilon","","Returns epsilon, a small positive value.",47,[[]]],[10,"max_value","","Returns the largest finite value that this type can …",47,[[]]],[10,"is_nan","","Returns <code>true</code> if this value is <code>NaN</code> and false otherwise.",47,[[]]],[10,"is_infinite","","Returns <code>true</code> if this value is positive infinity or …",47,[[]]],[10,"is_finite","","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.",47,[[]]],[10,"is_normal","","Returns <code>true</code> if the number is neither zero, infinite, …",47,[[]]],[10,"classify","","Returns the floating point category of the number. If …",47,[[],["fpcategory",4]]],[10,"floor","","Returns the largest integer less than or equal to a …",47,[[]]],[10,"ceil","","Returns the smallest integer greater than or equal to a …",47,[[]]],[10,"round","","Returns the nearest integer to a number. Round half-way …",47,[[]]],[10,"trunc","","Return the integer part of a number.",47,[[]]],[10,"fract","","Returns the fractional part of a number.",47,[[]]],[10,"abs","","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …",47,[[]]],[10,"signum","","Returns a number that represents the sign of <code>self</code>.",47,[[]]],[10,"is_sign_positive","","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …",47,[[]]],[10,"is_sign_negative","","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …",47,[[]]],[10,"mul_add","","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …",47,[[]]],[10,"recip","","Take the reciprocal (inverse) of a number, <code>1/x</code>.",47,[[]]],[10,"powi","","Raise a number to an integer power.",47,[[]]],[10,"powf","","Raise a number to a floating point power.",47,[[]]],[10,"sqrt","","Take the square root of a number.",47,[[]]],[10,"exp","","Returns <code>e^(self)</code>, (the exponential function).",47,[[]]],[10,"exp2","","Returns <code>2^(self)</code>.",47,[[]]],[10,"ln","","Returns the natural logarithm of the number.",47,[[]]],[10,"log","","Returns the logarithm of the number with respect to an …",47,[[]]],[10,"log2","","Returns the base 2 logarithm of the number.",47,[[]]],[10,"log10","","Returns the base 10 logarithm of the number.",47,[[]]],[11,"to_degrees","","Converts radians to degrees.",47,[[]]],[11,"to_radians","","Converts degrees to radians.",47,[[]]],[10,"max","","Returns the maximum of the two numbers.",47,[[]]],[10,"min","","Returns the minimum of the two numbers.",47,[[]]],[10,"abs_sub","","The positive difference of two numbers.",47,[[]]],[10,"cbrt","","Take the cubic root of a number.",47,[[]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle …",47,[[]]],[10,"sin","","Computes the sine of a number (in radians).",47,[[]]],[10,"cos","","Computes the cosine of a number (in radians).",47,[[]]],[10,"tan","","Computes the tangent of a number (in radians).",47,[[]]],[10,"asin","","Computes the arcsine of a number. Return value is in …",47,[[]]],[10,"acos","","Computes the arccosine of a number. Return value is in …",47,[[]]],[10,"atan","","Computes the arctangent of a number. Return value is in …",47,[[]]],[10,"atan2","","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and …",47,[[]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the …",47,[[]]],[10,"exp_m1","","Returns <code>e^(self) - 1</code> in a way that is accurate even if the…",47,[[]]],[10,"ln_1p","","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than …",47,[[]]],[10,"sinh","","Hyperbolic sine function.",47,[[]]],[10,"cosh","","Hyperbolic cosine function.",47,[[]]],[10,"tanh","","Hyperbolic tangent function.",47,[[]]],[10,"asinh","","Inverse hyperbolic sine function.",47,[[]]],[10,"acosh","","Inverse hyperbolic cosine function.",47,[[]]],[10,"atanh","","Inverse hyperbolic tangent function.",47,[[]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as …",47,[[]]],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",48,[[]]],[10,"FRAC_1_PI","","Return <code>1.0 / π</code>.",48,[[]]],[10,"FRAC_1_SQRT_2","","Return <code>1.0 / sqrt(2.0)</code>.",48,[[]]],[10,"FRAC_2_PI","","Return <code>2.0 / π</code>.",48,[[]]],[10,"FRAC_2_SQRT_PI","","Return <code>2.0 / sqrt(π)</code>.",48,[[]]],[10,"FRAC_PI_2","","Return <code>π / 2.0</code>.",48,[[]]],[10,"FRAC_PI_3","","Return <code>π / 3.0</code>.",48,[[]]],[10,"FRAC_PI_4","","Return <code>π / 4.0</code>.",48,[[]]],[10,"FRAC_PI_6","","Return <code>π / 6.0</code>.",48,[[]]],[10,"FRAC_PI_8","","Return <code>π / 8.0</code>.",48,[[]]],[10,"LN_10","","Return <code>ln(10.0)</code>.",48,[[]]],[10,"LN_2","","Return <code>ln(2.0)</code>.",48,[[]]],[10,"LOG10_E","","Return <code>log10(e)</code>.",48,[[]]],[10,"LOG2_E","","Return <code>log2(e)</code>.",48,[[]]],[10,"PI","","Return Archimedes’ constant <code>π</code>.",48,[[]]],[10,"SQRT_2","","Return <code>sqrt(2.0)</code>.",48,[[]]],[11,"TAU","","Return the full circle constant <code>τ</code>.",48,[[]]],[11,"LOG10_2","","Return <code>log10(2.0)</code>.",48,[[]]],[11,"LOG2_10","","Return <code>log2(10.0)</code>.",48,[[]]],[5,"cast","","Cast from one machine scalar to another.",null,[[],["option",4]]],[8,"AsPrimitive","","A generic interface for casting between machine scalars …",null,null],[10,"as_","","Convert a value to another, using the <code>as</code> operator.",45,[[]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Converts an <code>isize</code> to return an optional value of this …",43,[[],["option",4]]],[11,"from_i8","","Converts an <code>i8</code> to return an optional value of this type. …",43,[[],["option",4]]],[11,"from_i16","","Converts an <code>i16</code> to return an optional value of this type. …",43,[[],["option",4]]],[11,"from_i32","","Converts an <code>i32</code> to return an optional value of this type. …",43,[[],["option",4]]],[10,"from_i64","","Converts an <code>i64</code> to return an optional value of this type. …",43,[[],["option",4]]],[11,"from_i128","","Converts an <code>i128</code> to return an optional value of this …",43,[[],["option",4]]],[11,"from_usize","","Converts a <code>usize</code> to return an optional value of this …",43,[[],["option",4]]],[11,"from_u8","","Converts an <code>u8</code> to return an optional value of this type. …",43,[[],["option",4]]],[11,"from_u16","","Converts an <code>u16</code> to return an optional value of this type. …",43,[[],["option",4]]],[11,"from_u32","","Converts an <code>u32</code> to return an optional value of this type. …",43,[[],["option",4]]],[10,"from_u64","","Converts an <code>u64</code> to return an optional value of this type. …",43,[[],["option",4]]],[11,"from_u128","","Converts an <code>u128</code> to return an optional value of this …",43,[[],["option",4]]],[11,"from_f32","","Converts a <code>f32</code> to return an optional value of this type. …",43,[[],["option",4]]],[11,"from_f64","","Converts a <code>f64</code> to return an optional value of this type. …",43,[[],["option",4]]],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted …",44,[[],["option",4]]],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of <code>self</code> to an <code>isize</code>. If the value …",42,[[],["option",4]]],[11,"to_i8","","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot …",42,[[],["option",4]]],[11,"to_i16","","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …",42,[[],["option",4]]],[11,"to_i32","","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …",42,[[],["option",4]]],[10,"to_i64","","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …",42,[[],["option",4]]],[11,"to_i128","","Converts the value of <code>self</code> to an <code>i128</code>. If the value …",42,[[],["option",4]]],[11,"to_usize","","Converts the value of <code>self</code> to a <code>usize</code>. If the value …",42,[[],["option",4]]],[11,"to_u8","","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be…",42,[[],["option",4]]],[11,"to_u16","","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot …",42,[[],["option",4]]],[11,"to_u32","","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot …",42,[[],["option",4]]],[10,"to_u64","","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot …",42,[[],["option",4]]],[11,"to_u128","","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …",42,[[],["option",4]]],[11,"to_f32","","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map …",42,[[],["option",4]]],[11,"to_f64","","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map …",42,[[],["option",4]]],[5,"one","","Returns the multiplicative identity, <code>1</code>.",null,[[]]],[5,"zero","","Returns the additive identity, <code>0</code>.",null,[[]]],[8,"One","","Defines a multiplicative identity element for <code>Self</code>.",null,null],[10,"one","","Returns the multiplicative identity element of <code>Self</code>, <code>1</code>.",50,[[]]],[11,"set_one","","Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, …",50,[[]]],[11,"is_one","","Returns <code>true</code> if <code>self</code> is equal to the multiplicative …",50,[[]]],[8,"Zero","","Defines an additive identity element for <code>Self</code>.",null,null],[10,"zero","","Returns the additive identity element of <code>Self</code>, <code>0</code>.",49,[[]]],[11,"set_zero","","Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.",49,[[]]],[10,"is_zero","","Returns <code>true</code> if <code>self</code> is equal to the additive identity.",49,[[]]],[8,"PrimInt","","Generic trait for primitive integers.",null,null],[10,"count_ones","","Returns the number of ones in the binary representation …",51,[[]]],[10,"count_zeros","","Returns the number of zeros in the binary representation …",51,[[]]],[10,"leading_zeros","","Returns the number of leading zeros in the binary …",51,[[]]],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary …",51,[[]]],[10,"rotate_left","","Shifts the bits to the left by a specified amount, <code>n</code>, …",51,[[]]],[10,"rotate_right","","Shifts the bits to the right by a specified amount, <code>n</code>, …",51,[[]]],[10,"signed_shl","","Shifts the bits to the left by a specified amount, <code>n</code>, …",51,[[]]],[10,"signed_shr","","Shifts the bits to the right by a specified amount, <code>n</code>, …",51,[[]]],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount, <code>n</code>, …",51,[[]]],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount, <code>n</code>, …",51,[[]]],[10,"swap_bytes","","Reverses the byte order of the integer.",51,[[]]],[10,"from_be","","Convert an integer from big endian to the target\'s …",51,[[]]],[10,"from_le","","Convert an integer from little endian to the target\'s …",51,[[]]],[10,"to_be","","Convert <code>self</code> to big endian from the target\'s endianness.",51,[[]]],[10,"to_le","","Convert <code>self</code> to little endian from the target\'s …",51,[[]]],[10,"pow","","Raises self to the power of <code>exp</code>, using exponentiation by …",51,[[]]],[8,"CheckedAdd","","Performs addition that returns <code>None</code> instead of wrapping …",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow …",52,[[],["option",4]]],[8,"CheckedDiv","","Performs division that returns <code>None</code> instead of panicking …",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and …",55,[[],["option",4]]],[8,"CheckedMul","","Performs multiplication that returns <code>None</code> instead of …",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or …",54,[[],["option",4]]],[8,"CheckedNeg","","Performs negation that returns <code>None</code> if the result can\'t …",null,null],[10,"checked_neg","","Negates a number, returning <code>None</code> for results that can\'t …",57,[[],["option",4]]],[8,"CheckedRem","","Performs an integral remainder that returns <code>None</code> instead …",null,null],[10,"checked_rem","","Finds the remainder of dividing two numbers, checking for …",56,[[],["option",4]]],[8,"CheckedShl","","Performs a left shift that returns <code>None</code> on shifts larger …",null,null],[10,"checked_shl","","Checked shift left. Computes <code>self << rhs</code>, returning <code>None</code> …",58,[[],["option",4]]],[8,"CheckedShr","","Performs a right shift that returns <code>None</code> on shifts larger …",null,null],[10,"checked_shr","","Checked shift right. Computes <code>self >> rhs</code>, returning <code>None</code> …",59,[[],["option",4]]],[8,"CheckedSub","","Performs subtraction that returns <code>None</code> instead of …",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If …",53,[[],["option",4]]],[8,"Inv","","Unary operator for retrieving the multiplicative inverse, …",null,null],[16,"Output","","The result after applying the operator.",60,null],[10,"inv","","Returns the multiplicative inverse of <code>self</code>.",60,[[]]],[8,"MulAdd","","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …",null,null],[16,"Output","","The resulting type after applying the fused multiply-add.",61,null],[10,"mul_add","","Performs the fused multiply-add operation.",61,[[]]],[8,"MulAddAssign","","The fused multiply-add assignment operation.",null,null],[10,"mul_add_assign","","Performs the fused multiply-add operation.",62,[[]]],[8,"Saturating","","Saturating math operations. Deprecated, use <code>SaturatingAdd</code>…",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at …",66,[[]]],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating …",66,[[]]],[8,"SaturatingAdd","","Performs addition that saturates at the numeric bounds …",null,null],[10,"saturating_add","","Saturating addition. Computes <code>self + other</code>, saturating at …",67,[[]]],[8,"SaturatingMul","","Performs multiplication that saturates at the numeric …",null,null],[10,"saturating_mul","","Saturating multiplication. Computes <code>self * other</code>, …",69,[[]]],[8,"SaturatingSub","","Performs subtraction that saturates at the numeric bounds …",null,null],[10,"saturating_sub","","Saturating subtraction. Computes <code>self - other</code>, saturating …",68,[[]]],[8,"WrappingAdd","","Performs addition that wraps around on overflow.",null,null],[10,"wrapping_add","","Wrapping (modular) addition. Computes <code>self + other</code>, …",70,[[]]],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",null,null],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes <code>self * other</code>, …",72,[[]]],[8,"WrappingNeg","","Performs a negation that does not panic.",null,null],[10,"wrapping_neg","","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …",73,[[]]],[8,"WrappingShl","","Performs a left shift that does not panic.",null,null],[10,"wrapping_shl","","Panic-free bitwise shift-left; yields <code>self << mask(rhs)</code>, …",74,[[]]],[8,"WrappingShr","","Performs a right shift that does not panic.",null,null],[10,"wrapping_shr","","Panic-free bitwise shift-right; yields <code>self >> mask(rhs)</code>, …",75,[[]]],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",null,null],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes <code>self - other</code>, …",71,[[]]],[5,"checked_pow","","Raises a value to the power of exp, returning <code>None</code> if an …",null,[[],["option",4]]],[5,"pow","","Raises a value to the power of exp, using exponentiation …",null,[[]]],[8,"Pow","","Binary operator for raising a value to a power.",null,null],[16,"Output","","The result after applying the operator.",76,null],[10,"pow","","Returns <code>self</code> to the power <code>rhs</code>.",76,[[]]],[5,"abs","","Computes the absolute value.",null,[[]]],[5,"abs_sub","","The positive difference of two numbers.",null,[[]]],[5,"signum","","Returns the sign of the number.",null,[[]]],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that …",null,null],[10,"abs","","Computes the absolute value.",78,[[]]],[10,"abs_sub","","The positive difference of two numbers.",78,[[]]],[10,"signum","","Returns the sign of the number.",78,[[]]],[10,"is_positive","","Returns true if the number is positive and false if the …",78,[[]]],[10,"is_negative","","Returns true if the number is negative and false if the …",78,[[]]],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[0,"solver","argmin","Solvers",null,null],[0,"brent","argmin::solver","Brent\'s method",null,null],[4,"BrentError","argmin::solver::brent","Error to be thrown if Brent is initialized with improper …",null,null],[13,"WrongSign","","f(min) and f(max) must have different signs",82,null],[3,"Brent","","Brent\'s method",null,null],[11,"new","","Constructor The values <code>min</code> and <code>max</code> must bracketing the …",83,[[],["brent",3]]],[0,"conjugategradient","argmin::solver","Conjugate Gradient methods",null,null],[0,"cg","argmin::solver::conjugategradient","Conjugate gradient method",null,null],[3,"ConjugateGradient","argmin::solver::conjugategradient::cg","The conjugate gradient method is a solver for systems of …",null,null],[11,"new","","Constructor",84,[[],[["error",3],["result",4]]]],[11,"p","","Return the current search direction (This is needed by …",84,[[]]],[11,"p_prev","","Return the previous search direction (This is needed by …",84,[[]]],[11,"residual","","Return the current residual (This is needed by NewtonCG …",84,[[]]],[0,"nonlinear_cg","argmin::solver::conjugategradient","Nonlinear conjugate gradient method Important TODO: Find …",null,null],[3,"NonlinearConjugateGradient","argmin::solver::conjugategradient::nonlinear_cg","The nonlinear conjugate gradient is a generalization of …",null,null],[11,"new","","Constructor (Polak Ribiere Conjugate Gradient (PR-CG))",85,[[],[["error",3],["result",4]]]],[11,"restart_iters","","Specifiy the number of iterations after which a restart …",85,[[]]],[11,"restart_orthogonality","","Set the value for the orthogonality measure. Setting this …",85,[[]]],[0,"beta","argmin::solver::conjugategradient","Beta update methods for nonlinear CG",null,null],[3,"FletcherReeves","argmin::solver::conjugategradient::beta","Fletcher and Reeves (FR) method TODO: Reference",null,null],[11,"new","","Constructor",86,[[]]],[3,"PolakRibiere","","Polak and Ribiere (PR) method TODO: Reference",null,null],[11,"new","","Constructor",87,[[]]],[3,"PolakRibierePlus","","Polak and Ribiere Plus (PR+) method TODO: Reference",null,null],[11,"new","","Constructor",88,[[]]],[3,"HestenesStiefel","","Hestenes and Stiefel (HS) method TODO: Reference",null,null],[11,"new","","Constructor",89,[[]]],[0,"gaussnewton","argmin::solver","Newton Methods",null,null],[0,"gaussnewton_linesearch","argmin::solver::gaussnewton","Gauss-Newton method with linesearch",null,null],[3,"GaussNewtonLS","argmin::solver::gaussnewton::gaussnewton_linesearch","Gauss-Newton method with linesearch",null,null],[11,"new","","Constructor",90,[[]]],[11,"with_tol","","Set tolerance for the stopping criterion based on cost …",90,[[],[["error",3],["result",4]]]],[0,"gaussnewton_method","argmin::solver::gaussnewton","Gauss-Newton method",null,null],[3,"GaussNewton","argmin::solver::gaussnewton::gaussnewton_method","Gauss-Newton method",null,null],[11,"new","","Constructor",91,[[]]],[11,"with_gamma","","set gamma",91,[[],[["error",3],["result",4]]]],[11,"with_tol","","Set tolerance for the stopping criterion based on cost …",91,[[],[["error",3],["result",4]]]],[0,"goldensectionsearch","argmin::solver","References:Wikipedia",null,null],[3,"GoldenSectionSearch","argmin::solver::goldensectionsearch","Golden-section search",null,null],[11,"new","","Constructor",92,[[]]],[11,"tolerance","","Set tolerance",92,[[]]],[0,"gradientdescent","argmin::solver","Gradient descent methods",null,null],[0,"steepestdescent","argmin::solver::gradientdescent","Steepest Descent method",null,null],[3,"SteepestDescent","argmin::solver::gradientdescent::steepestdescent","Steepest descent iteratively takes steps in the direction …",null,null],[11,"new","","Constructor",93,[[]]],[0,"landweber","argmin::solver","Landweber iteration",null,null],[3,"Landweber","argmin::solver::landweber","The Landweber iteration is a solver for ill-posed linear …",null,null],[11,"new","","Constructor",94,[[]]],[0,"linesearch","argmin::solver","Line search methods",null,null],[0,"backtracking","argmin::solver::linesearch","Backtracking line search algorithm",null,null],[3,"BacktrackingLineSearch","argmin::solver::linesearch::backtracking","The Backtracking line search is a simple method to find a …",null,null],[11,"new","","Constructor",95,[[]]],[11,"rho","","Set rho",95,[[],[["error",3],["result",4]]]],[0,"condition","argmin::solver::linesearch","Acceptance conditions",null,null],[8,"LineSearchCondition","argmin::solver::linesearch::condition","Needs to be implemented by everything that wants to be a …",null,null],[10,"eval","","Evaluate the condition",96,[[]]],[10,"requires_cur_grad","","Indicates whether this condition requires the computation …",96,[[]]],[3,"ArmijoCondition","","Armijo Condition",null,null],[11,"new","","Constructor",97,[[],[["error",3],["result",4]]]],[3,"WolfeCondition","","Wolfe Condition",null,null],[11,"new","","Constructor",98,[[],[["error",3],["result",4]]]],[3,"StrongWolfeCondition","","Strong Wolfe conditions",null,null],[11,"new","","Constructor",99,[[],[["error",3],["result",4]]]],[3,"GoldsteinCondition","","Goldstein conditions",null,null],[11,"new","","Constructor",100,[[],[["error",3],["result",4]]]],[0,"hagerzhang","argmin::solver::linesearch","Hager-Zhang line search algorithm",null,null],[3,"HagerZhangLineSearch","argmin::solver::linesearch::hagerzhang","The Hager-Zhang line search is a method to find a step …",null,null],[11,"new","","Constructor",101,[[]]],[11,"delta","","set delta",101,[[],[["error",3],["result",4]]]],[11,"sigma","","set sigma",101,[[],[["error",3],["result",4]]]],[11,"epsilon","","set epsilon",101,[[],[["error",3],["result",4]]]],[11,"theta","","set theta",101,[[],[["error",3],["result",4]]]],[11,"gamma","","set gamma",101,[[],[["error",3],["result",4]]]],[11,"eta","","set eta",101,[[],[["error",3],["result",4]]]],[11,"alpha","","set alpha limits",101,[[],[["error",3],["result",4]]]],[0,"morethuente","argmin::solver::linesearch","More-Thuente line search algorithm",null,null],[3,"MoreThuenteLineSearch","argmin::solver::linesearch::morethuente","The More-Thuente line search is a method to find a step …",null,null],[11,"new","","Constructor",102,[[]]],[11,"c","","Set c1 and c2 where 0 < c1 < c2 < 1.",102,[[],[["error",3],["result",4]]]],[11,"alpha","","set alpha limits",102,[[],[["error",3],["result",4]]]],[0,"neldermead","argmin::solver","References:Wikipedia",null,null],[3,"NelderMead","argmin::solver::neldermead","Nelder-Mead method",null,null],[11,"new","","Constructor",103,[[]]],[11,"with_initial_params","","Add initial parameters",103,[[["vec",3]]]],[11,"sd_tolerance","","Set Sample standard deviation tolerance",103,[[]]],[11,"alpha","","set alpha",103,[[],[["error",3],["result",4]]]],[11,"gamma","","set gamma",103,[[],[["error",3],["result",4]]]],[11,"rho","","set rho",103,[[],[["error",3],["result",4]]]],[11,"sigma","","set sigma",103,[[],[["error",3],["result",4]]]],[0,"newton","argmin::solver","Newton Methods",null,null],[0,"newton_cg","argmin::solver::newton","Newton-CG method TODO: Stop when search direction is …",null,null],[3,"NewtonCG","argmin::solver::newton::newton_cg","The Newton-CG method (also called truncated Newton …",null,null],[11,"new","","Constructor",104,[[]]],[11,"curvature_threshold","","Set curvature threshold",104,[[]]],[11,"with_tol","","Set tolerance for the stopping criterion based on cost …",104,[[],[["error",3],["result",4]]]],[0,"newton_method","argmin::solver::newton","Newton\'s method",null,null],[3,"Newton","argmin::solver::newton::newton_method","Newton\'s method iteratively finds the stationary points …",null,null],[11,"new","","Constructor",105,[[]]],[11,"set_gamma","","set gamma",105,[[],[["error",3],["result",4]]]],[0,"particleswarm","argmin::solver","References:TODO",null,null],[3,"ParticleSwarm","argmin::solver::particleswarm","Particle Swarm Optimization (PSO)",null,null],[11,"new","","Constructor",106,[[],[["error",3],["result",4]]]],[8,"Position","","Position",null,null],[3,"Particle","","A single particle",null,null],[12,"position","","Position of particle",107,null],[12,"cost","","Cost of particle",107,null],[0,"quasinewton","argmin::solver","Quasi-Newton methods",null,null],[0,"bfgs","argmin::solver::quasinewton","References:[0] Jorge Nocedal and Stephen J. Wright …",null,null],[3,"BFGS","argmin::solver::quasinewton::bfgs","BFGS method",null,null],[11,"new","","Constructor",108,[[]]],[11,"with_tol_grad","","Sets tolerance for the stopping criterion based on the …",108,[[]]],[11,"with_tol_cost","","Sets tolerance for the stopping criterion based on the …",108,[[]]],[0,"dfp","argmin::solver::quasinewton","References:[0] Jorge Nocedal and Stephen J. Wright …",null,null],[3,"DFP","argmin::solver::quasinewton::dfp","DFP method",null,null],[11,"new","","Constructor",109,[[]]],[11,"with_tol_grad","","Sets tolerance for the stopping criterion based on the …",109,[[]]],[0,"lbfgs","argmin::solver::quasinewton","References:[0] Jorge Nocedal and Stephen J. Wright …",null,null],[3,"LBFGS","argmin::solver::quasinewton::lbfgs","L-BFGS method",null,null],[11,"new","","Constructor",110,[[]]],[11,"with_tol_grad","","Sets tolerance for the stopping criterion based on the …",110,[[]]],[11,"with_tol_cost","","Sets tolerance for the stopping criterion based on the …",110,[[]]],[0,"sr1","argmin::solver::quasinewton","References:[0] Jorge Nocedal and Stephen J. Wright …",null,null],[3,"SR1","argmin::solver::quasinewton::sr1","SR1 method (broken!)",null,null],[11,"new","","Constructor",111,[[]]],[11,"r","","Set r",111,[[],[["error",3],["result",4]]]],[11,"with_tol_grad","","Sets tolerance for the stopping criterion based on the …",111,[[]]],[11,"with_tol_cost","","Sets tolerance for the stopping criterion based on the …",111,[[]]],[0,"sr1_trustregion","argmin::solver::quasinewton","References:[0] Jorge Nocedal and Stephen J. Wright …",null,null],[3,"SR1TrustRegion","argmin::solver::quasinewton::sr1_trustregion","SR1 Trust Region method",null,null],[11,"new","","Constructor",112,[[]]],[11,"hessian","","provide initial Hessian (if not provided, the algorithm …",112,[[]]],[11,"r","","Set r",112,[[],[["error",3],["result",4]]]],[11,"radius","","set radius",112,[[]]],[11,"eta","","Set eta",112,[[],[["error",3],["result",4]]]],[11,"with_tol_grad","","Sets tolerance for the stopping criterion based on the …",112,[[]]],[0,"simulatedannealing","argmin::solver","Simulated AnnealingReferences[0] Wikipedia",null,null],[4,"SATempFunc","argmin::solver::simulatedannealing","Temperature functions for Simulated Annealing.",null,null],[13,"TemperatureFast","","<code>t_i = t_init / i</code>",113,null],[13,"Boltzmann","","<code>t_i = t_init / ln(i)</code>",113,null],[13,"Exponential","","<code>t_i = t_init * x^i</code>",113,null],[3,"SimulatedAnnealing","","Simulated Annealing",null,null],[11,"new","","Constructor",114,[[],[["error",3],["result",4]]]],[11,"temp_func","","Set temperature function to one of the options in …",114,[[["satempfunc",4]]]],[11,"stall_accepted","","The optimization stops after there has been no accepted …",114,[[]]],[11,"stall_best","","The optimization stops after there has been no new best …",114,[[]]],[11,"reannealing_fixed","","Start reannealing after <code>iter</code> iterations",114,[[]]],[11,"reannealing_accepted","","Start reannealing after no accepted solution has been …",114,[[]]],[11,"reannealing_best","","Start reannealing after no new best solution has been …",114,[[]]],[0,"trustregion","argmin::solver","Argmin Trust region methods",null,null],[0,"cauchypoint","argmin::solver::trustregion","Cauchy Point",null,null],[3,"CauchyPoint","argmin::solver::trustregion::cauchypoint","The Cauchy point is the minimum of the quadratic …",null,null],[11,"new","","Constructor",115,[[]]],[0,"dogleg","argmin::solver::trustregion","Dogleg method",null,null],[3,"Dogleg","argmin::solver::trustregion::dogleg","The Dogleg method computes the intersection of the trust …",null,null],[11,"new","","Constructor",116,[[]]],[0,"steihaug","argmin::solver::trustregion","Steihaug method",null,null],[3,"Steihaug","argmin::solver::trustregion::steihaug","The Steihaug method is a conjugate gradients based …",null,null],[11,"new","","Constructor",117,[[]]],[11,"epsilon","","Set epsilon",117,[[],[["error",3],["result",4]]]],[11,"max_iters","","set maximum number of iterations",117,[[]]],[0,"trustregion_method","argmin::solver::trustregion","Trust region solver",null,null],[3,"TrustRegion","argmin::solver::trustregion::trustregion_method","The trust region method approximates the cost function …",null,null],[11,"new","","Constructor",118,[[]]],[11,"radius","","set radius",118,[[]]],[11,"max_radius","","Set maximum radius",118,[[]]],[11,"eta","","Set eta",118,[[],[["error",3],["result",4]]]],[5,"reduction_ratio","argmin::solver::trustregion","Computes reduction ratio",null,[[["argminfloat",8]],["argminfloat",8]]],[14,"make_kv","argmin","Creates an <code>ArgminKV</code> at compile time in order to avoid …",null,null],[14,"check_param","","Release an <code>T</code> from an <code>Option<T></code> if it is not <code>None</code>. If it …",null,null],[14,"trait_bound","","Reuse a list of trait bounds by giving it a name, e.g. …",null,null],[11,"from","argmin::core","",119,[[]]],[11,"from","","",119,[[]]],[11,"into","","",119,[[]]],[11,"to_string","","",119,[[],["string",3]]],[11,"borrow","","",119,[[]]],[11,"borrow_mut","","",119,[[]]],[11,"try_from","","",119,[[],["result",4]]],[11,"try_into","","",119,[[],["result",4]]],[11,"type_id","","",119,[[],["typeid",3]]],[11,"vzip","","",119,[[]]],[11,"to_subset","","",119,[[],["option",4]]],[11,"is_in_subset","","",119,[[]]],[11,"to_subset_unchecked","","",119,[[]]],[11,"from_subset","","",119,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_string","","",3,[[],["string",3]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"to_subset","","",3,[[],["option",4]]],[11,"is_in_subset","","",3,[[]]],[11,"to_subset_unchecked","","",3,[[]]],[11,"from_subset","","",3,[[]]],[11,"from","argmin::core::executor","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"to_subset","","",0,[[],["option",4]]],[11,"is_in_subset","","",0,[[]]],[11,"to_subset_unchecked","","",0,[[]]],[11,"from_subset","","",0,[[]]],[11,"from","argmin::core","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"to_subset","","",10,[[],["option",4]]],[11,"is_in_subset","","",10,[[]]],[11,"to_subset_unchecked","","",10,[[]]],[11,"from_subset","","",10,[[]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"to_string","","",11,[[],["string",3]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"vzip","","",11,[[]]],[11,"to_subset","","",11,[[],["option",4]]],[11,"is_in_subset","","",11,[[]]],[11,"to_subset_unchecked","","",11,[[]]],[11,"from_subset","","",11,[[]]],[11,"from","","",120,[[]]],[11,"into","","",120,[[]]],[11,"to_owned","","",120,[[]]],[11,"clone_into","","",120,[[]]],[11,"to_string","","",120,[[],["string",3]]],[11,"borrow","","",120,[[]]],[11,"borrow_mut","","",120,[[]]],[11,"try_from","","",120,[[],["result",4]]],[11,"try_into","","",120,[[],["result",4]]],[11,"type_id","","",120,[[],["typeid",3]]],[11,"vzip","","",120,[[]]],[11,"inlined_clone","","",120,[[]]],[11,"to_subset","","",120,[[],["option",4]]],[11,"is_in_subset","","",120,[[]]],[11,"to_subset_unchecked","","",120,[[]]],[11,"from_subset","","",120,[[]]],[11,"from","","",121,[[]]],[11,"into","","",121,[[]]],[11,"to_owned","","",121,[[]]],[11,"clone_into","","",121,[[]]],[11,"to_string","","",121,[[],["string",3]]],[11,"borrow","","",121,[[]]],[11,"borrow_mut","","",121,[[]]],[11,"try_from","","",121,[[],["result",4]]],[11,"try_into","","",121,[[],["result",4]]],[11,"type_id","","",121,[[],["typeid",3]]],[11,"vzip","","",121,[[]]],[11,"inlined_clone","","",121,[[]]],[11,"to_subset","","",121,[[],["option",4]]],[11,"is_in_subset","","",121,[[]]],[11,"to_subset_unchecked","","",121,[[]]],[11,"from_subset","","",121,[[]]],[11,"from","argmin::core::file","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"inlined_clone","","",1,[[]]],[11,"to_subset","","",1,[[],["option",4]]],[11,"is_in_subset","","",1,[[]]],[11,"to_subset_unchecked","","",1,[[]]],[11,"from_subset","","",1,[[]]],[11,"from","","",122,[[]]],[11,"into","","",122,[[]]],[11,"to_owned","","",122,[[]]],[11,"clone_into","","",122,[[]]],[11,"borrow","","",122,[[]]],[11,"borrow_mut","","",122,[[]]],[11,"try_from","","",122,[[],["result",4]]],[11,"try_into","","",122,[[],["result",4]]],[11,"type_id","","",122,[[],["typeid",3]]],[11,"vzip","","",122,[[]]],[11,"to_subset","","",122,[[],["option",4]]],[11,"is_in_subset","","",122,[[]]],[11,"to_subset_unchecked","","",122,[[]]],[11,"from_subset","","",122,[[]]],[11,"from","argmin::core::slog_logger","",123,[[]]],[11,"into","","",123,[[]]],[11,"to_owned","","",123,[[]]],[11,"clone_into","","",123,[[]]],[11,"borrow","","",123,[[]]],[11,"borrow_mut","","",123,[[]]],[11,"try_from","","",123,[[],["result",4]]],[11,"try_into","","",123,[[],["result",4]]],[11,"type_id","","",123,[[],["typeid",3]]],[11,"vzip","","",123,[[]]],[11,"to_subset","","",123,[[],["option",4]]],[11,"is_in_subset","","",123,[[]]],[11,"to_subset_unchecked","","",123,[[]]],[11,"from_subset","","",123,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"to_subset","","",2,[[],["option",4]]],[11,"is_in_subset","","",2,[[]]],[11,"to_subset_unchecked","","",2,[[]]],[11,"from_subset","","",2,[[]]],[11,"from","argmin::core::visualizer","",124,[[]]],[11,"into","","",124,[[]]],[11,"borrow","","",124,[[]]],[11,"borrow_mut","","",124,[[]]],[11,"try_from","","",124,[[],["result",4]]],[11,"try_into","","",124,[[],["result",4]]],[11,"type_id","","",124,[[],["typeid",3]]],[11,"vzip","","",124,[[]]],[11,"to_subset","","",124,[[],["option",4]]],[11,"is_in_subset","","",124,[[]]],[11,"to_subset_unchecked","","",124,[[]]],[11,"from_subset","","",124,[[]]],[11,"from","","",125,[[]]],[11,"into","","",125,[[]]],[11,"borrow","","",125,[[]]],[11,"borrow_mut","","",125,[[]]],[11,"try_from","","",125,[[],["result",4]]],[11,"try_into","","",125,[[],["result",4]]],[11,"type_id","","",125,[[],["typeid",3]]],[11,"vzip","","",125,[[]]],[11,"to_subset","","",125,[[],["option",4]]],[11,"is_in_subset","","",125,[[]]],[11,"to_subset_unchecked","","",125,[[]]],[11,"from_subset","","",125,[[]]],[11,"from","argmin::core","",126,[[]]],[11,"into","","",126,[[]]],[11,"to_owned","","",126,[[]]],[11,"clone_into","","",126,[[]]],[11,"borrow","","",126,[[]]],[11,"borrow_mut","","",126,[[]]],[11,"try_from","","",126,[[],["result",4]]],[11,"try_into","","",126,[[],["result",4]]],[11,"type_id","","",126,[[],["typeid",3]]],[11,"vzip","","",126,[[]]],[11,"to_subset","","",126,[[],["option",4]]],[11,"is_in_subset","","",126,[[]]],[11,"to_subset_unchecked","","",126,[[]]],[11,"from_subset","","",126,[[]]],[11,"from","","",30,[[]]],[11,"into","","",30,[[]]],[11,"to_owned","","",30,[[]]],[11,"clone_into","","",30,[[]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"vzip","","",30,[[]]],[11,"inlined_clone","","",30,[[]]],[11,"to_subset","","",30,[[],["option",4]]],[11,"is_in_subset","","",30,[[]]],[11,"to_subset_unchecked","","",30,[[]]],[11,"from_subset","","",30,[[]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"to_owned","","",31,[[]]],[11,"clone_into","","",31,[[]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"vzip","","",31,[[]]],[11,"to_subset","","",31,[[],["option",4]]],[11,"is_in_subset","","",31,[[]]],[11,"to_subset_unchecked","","",31,[[]]],[11,"from_subset","","",31,[[]]],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"to_owned","","",32,[[]]],[11,"clone_into","","",32,[[]]],[11,"to_string","","",32,[[],["string",3]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"vzip","","",32,[[]]],[11,"to_subset","","",32,[[],["option",4]]],[11,"is_in_subset","","",32,[[]]],[11,"to_subset_unchecked","","",32,[[]]],[11,"from_subset","","",32,[[]]],[11,"from","","",33,[[]]],[11,"into","","",33,[[]]],[11,"to_owned","","",33,[[]]],[11,"clone_into","","",33,[[]]],[11,"to_string","","",33,[[],["string",3]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"vzip","","",33,[[]]],[11,"inlined_clone","","",33,[[]]],[11,"to_subset","","",33,[[],["option",4]]],[11,"is_in_subset","","",33,[[]]],[11,"to_subset_unchecked","","",33,[[]]],[11,"from_subset","","",33,[[]]],[11,"from","","",127,[[]]],[11,"into","","",127,[[]]],[11,"to_owned","","",127,[[]]],[11,"clone_into","","",127,[[]]],[11,"borrow","","",127,[[]]],[11,"borrow_mut","","",127,[[]]],[11,"try_from","","",127,[[],["result",4]]],[11,"try_into","","",127,[[],["result",4]]],[11,"type_id","","",127,[[],["typeid",3]]],[11,"vzip","","",127,[[]]],[11,"to_subset","","",127,[[],["option",4]]],[11,"is_in_subset","","",127,[[]]],[11,"to_subset_unchecked","","",127,[[]]],[11,"from_subset","","",127,[[]]],[11,"from","","",34,[[]]],[11,"into","","",34,[[]]],[11,"to_owned","","",34,[[]]],[11,"clone_into","","",34,[[]]],[11,"to_string","","",34,[[],["string",3]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"vzip","","",34,[[]]],[11,"inlined_clone","","",34,[[]]],[11,"to_subset","","",34,[[],["option",4]]],[11,"is_in_subset","","",34,[[]]],[11,"to_subset_unchecked","","",34,[[]]],[11,"from_subset","","",34,[[]]],[11,"from","","",37,[[]]],[11,"into","","",37,[[]]],[11,"to_owned","","",37,[[]]],[11,"clone_into","","",37,[[]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"vzip","","",37,[[]]],[11,"to_subset","","",37,[[],["option",4]]],[11,"is_in_subset","","",37,[[]]],[11,"to_subset_unchecked","","",37,[[]]],[11,"from_subset","","",37,[[]]],[11,"from","argmin::prelude","",80,[[]]],[11,"into","","",80,[[]]],[11,"borrow","","",80,[[]]],[11,"borrow_mut","","",80,[[]]],[11,"try_from","","",80,[[],["result",4]]],[11,"try_into","","",80,[[],["result",4]]],[11,"type_id","","",80,[[],["typeid",3]]],[11,"vzip","","",80,[[]]],[11,"to_subset","","",80,[[],["option",4]]],[11,"is_in_subset","","",80,[[]]],[11,"to_subset_unchecked","","",80,[[]]],[11,"from_subset","","",80,[[]]],[11,"from","","",81,[[]]],[11,"into","","",81,[[]]],[11,"to_string","","",81,[[],["string",3]]],[11,"borrow","","",81,[[]]],[11,"borrow_mut","","",81,[[]]],[11,"try_from","","",81,[[],["result",4]]],[11,"try_into","","",81,[[],["result",4]]],[11,"type_id","","",81,[[],["typeid",3]]],[11,"vzip","","",81,[[]]],[11,"to_subset","","",81,[[],["option",4]]],[11,"is_in_subset","","",81,[[]]],[11,"to_subset_unchecked","","",81,[[]]],[11,"from_subset","","",81,[[]]],[11,"from","argmin::solver::brent","",82,[[]]],[11,"into","","",82,[[]]],[11,"to_string","","",82,[[],["string",3]]],[11,"borrow","","",82,[[]]],[11,"borrow_mut","","",82,[[]]],[11,"try_from","","",82,[[],["result",4]]],[11,"try_into","","",82,[[],["result",4]]],[11,"type_id","","",82,[[],["typeid",3]]],[11,"vzip","","",82,[[]]],[11,"to_subset","","",82,[[],["option",4]]],[11,"is_in_subset","","",82,[[]]],[11,"to_subset_unchecked","","",82,[[]]],[11,"from_subset","","",82,[[]]],[11,"from","","",83,[[]]],[11,"into","","",83,[[]]],[11,"to_owned","","",83,[[]]],[11,"clone_into","","",83,[[]]],[11,"borrow","","",83,[[]]],[11,"borrow_mut","","",83,[[]]],[11,"try_from","","",83,[[],["result",4]]],[11,"try_into","","",83,[[],["result",4]]],[11,"type_id","","",83,[[],["typeid",3]]],[11,"vzip","","",83,[[]]],[11,"to_subset","","",83,[[],["option",4]]],[11,"is_in_subset","","",83,[[]]],[11,"to_subset_unchecked","","",83,[[]]],[11,"from_subset","","",83,[[]]],[11,"from","argmin::solver::conjugategradient::cg","",84,[[]]],[11,"into","","",84,[[]]],[11,"to_owned","","",84,[[]]],[11,"clone_into","","",84,[[]]],[11,"borrow","","",84,[[]]],[11,"borrow_mut","","",84,[[]]],[11,"try_from","","",84,[[],["result",4]]],[11,"try_into","","",84,[[],["result",4]]],[11,"type_id","","",84,[[],["typeid",3]]],[11,"vzip","","",84,[[]]],[11,"to_subset","","",84,[[],["option",4]]],[11,"is_in_subset","","",84,[[]]],[11,"to_subset_unchecked","","",84,[[]]],[11,"from_subset","","",84,[[]]],[11,"from","argmin::solver::conjugategradient::nonlinear_cg","",85,[[]]],[11,"into","","",85,[[]]],[11,"to_owned","","",85,[[]]],[11,"clone_into","","",85,[[]]],[11,"borrow","","",85,[[]]],[11,"borrow_mut","","",85,[[]]],[11,"try_from","","",85,[[],["result",4]]],[11,"try_into","","",85,[[],["result",4]]],[11,"type_id","","",85,[[],["typeid",3]]],[11,"vzip","","",85,[[]]],[11,"to_subset","","",85,[[],["option",4]]],[11,"is_in_subset","","",85,[[]]],[11,"to_subset_unchecked","","",85,[[]]],[11,"from_subset","","",85,[[]]],[11,"from","argmin::solver::conjugategradient::beta","",86,[[]]],[11,"into","","",86,[[]]],[11,"to_owned","","",86,[[]]],[11,"clone_into","","",86,[[]]],[11,"borrow","","",86,[[]]],[11,"borrow_mut","","",86,[[]]],[11,"try_from","","",86,[[],["result",4]]],[11,"try_into","","",86,[[],["result",4]]],[11,"type_id","","",86,[[],["typeid",3]]],[11,"vzip","","",86,[[]]],[11,"inlined_clone","","",86,[[]]],[11,"to_subset","","",86,[[],["option",4]]],[11,"is_in_subset","","",86,[[]]],[11,"to_subset_unchecked","","",86,[[]]],[11,"from_subset","","",86,[[]]],[11,"from","","",87,[[]]],[11,"into","","",87,[[]]],[11,"to_owned","","",87,[[]]],[11,"clone_into","","",87,[[]]],[11,"borrow","","",87,[[]]],[11,"borrow_mut","","",87,[[]]],[11,"try_from","","",87,[[],["result",4]]],[11,"try_into","","",87,[[],["result",4]]],[11,"type_id","","",87,[[],["typeid",3]]],[11,"vzip","","",87,[[]]],[11,"inlined_clone","","",87,[[]]],[11,"to_subset","","",87,[[],["option",4]]],[11,"is_in_subset","","",87,[[]]],[11,"to_subset_unchecked","","",87,[[]]],[11,"from_subset","","",87,[[]]],[11,"from","","",88,[[]]],[11,"into","","",88,[[]]],[11,"to_owned","","",88,[[]]],[11,"clone_into","","",88,[[]]],[11,"borrow","","",88,[[]]],[11,"borrow_mut","","",88,[[]]],[11,"try_from","","",88,[[],["result",4]]],[11,"try_into","","",88,[[],["result",4]]],[11,"type_id","","",88,[[],["typeid",3]]],[11,"vzip","","",88,[[]]],[11,"inlined_clone","","",88,[[]]],[11,"to_subset","","",88,[[],["option",4]]],[11,"is_in_subset","","",88,[[]]],[11,"to_subset_unchecked","","",88,[[]]],[11,"from_subset","","",88,[[]]],[11,"from","","",89,[[]]],[11,"into","","",89,[[]]],[11,"to_owned","","",89,[[]]],[11,"clone_into","","",89,[[]]],[11,"borrow","","",89,[[]]],[11,"borrow_mut","","",89,[[]]],[11,"try_from","","",89,[[],["result",4]]],[11,"try_into","","",89,[[],["result",4]]],[11,"type_id","","",89,[[],["typeid",3]]],[11,"vzip","","",89,[[]]],[11,"inlined_clone","","",89,[[]]],[11,"to_subset","","",89,[[],["option",4]]],[11,"is_in_subset","","",89,[[]]],[11,"to_subset_unchecked","","",89,[[]]],[11,"from_subset","","",89,[[]]],[11,"from","argmin::solver::gaussnewton::gaussnewton_linesearch","",90,[[]]],[11,"into","","",90,[[]]],[11,"to_owned","","",90,[[]]],[11,"clone_into","","",90,[[]]],[11,"borrow","","",90,[[]]],[11,"borrow_mut","","",90,[[]]],[11,"try_from","","",90,[[],["result",4]]],[11,"try_into","","",90,[[],["result",4]]],[11,"type_id","","",90,[[],["typeid",3]]],[11,"vzip","","",90,[[]]],[11,"to_subset","","",90,[[],["option",4]]],[11,"is_in_subset","","",90,[[]]],[11,"to_subset_unchecked","","",90,[[]]],[11,"from_subset","","",90,[[]]],[11,"from","argmin::solver::gaussnewton::gaussnewton_method","",91,[[]]],[11,"into","","",91,[[]]],[11,"to_owned","","",91,[[]]],[11,"clone_into","","",91,[[]]],[11,"borrow","","",91,[[]]],[11,"borrow_mut","","",91,[[]]],[11,"try_from","","",91,[[],["result",4]]],[11,"try_into","","",91,[[],["result",4]]],[11,"type_id","","",91,[[],["typeid",3]]],[11,"vzip","","",91,[[]]],[11,"to_subset","","",91,[[],["option",4]]],[11,"is_in_subset","","",91,[[]]],[11,"to_subset_unchecked","","",91,[[]]],[11,"from_subset","","",91,[[]]],[11,"from","argmin::solver::goldensectionsearch","",92,[[]]],[11,"into","","",92,[[]]],[11,"to_owned","","",92,[[]]],[11,"clone_into","","",92,[[]]],[11,"borrow","","",92,[[]]],[11,"borrow_mut","","",92,[[]]],[11,"try_from","","",92,[[],["result",4]]],[11,"try_into","","",92,[[],["result",4]]],[11,"type_id","","",92,[[],["typeid",3]]],[11,"vzip","","",92,[[]]],[11,"to_subset","","",92,[[],["option",4]]],[11,"is_in_subset","","",92,[[]]],[11,"to_subset_unchecked","","",92,[[]]],[11,"from_subset","","",92,[[]]],[11,"from","argmin::solver::gradientdescent::steepestdescent","",93,[[]]],[11,"into","","",93,[[]]],[11,"to_owned","","",93,[[]]],[11,"clone_into","","",93,[[]]],[11,"borrow","","",93,[[]]],[11,"borrow_mut","","",93,[[]]],[11,"try_from","","",93,[[],["result",4]]],[11,"try_into","","",93,[[],["result",4]]],[11,"type_id","","",93,[[],["typeid",3]]],[11,"vzip","","",93,[[]]],[11,"to_subset","","",93,[[],["option",4]]],[11,"is_in_subset","","",93,[[]]],[11,"to_subset_unchecked","","",93,[[]]],[11,"from_subset","","",93,[[]]],[11,"from","argmin::solver::landweber","",94,[[]]],[11,"into","","",94,[[]]],[11,"to_owned","","",94,[[]]],[11,"clone_into","","",94,[[]]],[11,"borrow","","",94,[[]]],[11,"borrow_mut","","",94,[[]]],[11,"try_from","","",94,[[],["result",4]]],[11,"try_into","","",94,[[],["result",4]]],[11,"type_id","","",94,[[],["typeid",3]]],[11,"vzip","","",94,[[]]],[11,"to_subset","","",94,[[],["option",4]]],[11,"is_in_subset","","",94,[[]]],[11,"to_subset_unchecked","","",94,[[]]],[11,"from_subset","","",94,[[]]],[11,"from","argmin::solver::linesearch::backtracking","",95,[[]]],[11,"into","","",95,[[]]],[11,"to_owned","","",95,[[]]],[11,"clone_into","","",95,[[]]],[11,"borrow","","",95,[[]]],[11,"borrow_mut","","",95,[[]]],[11,"try_from","","",95,[[],["result",4]]],[11,"try_into","","",95,[[],["result",4]]],[11,"type_id","","",95,[[],["typeid",3]]],[11,"vzip","","",95,[[]]],[11,"to_subset","","",95,[[],["option",4]]],[11,"is_in_subset","","",95,[[]]],[11,"to_subset_unchecked","","",95,[[]]],[11,"from_subset","","",95,[[]]],[11,"from","argmin::solver::linesearch::condition","",97,[[]]],[11,"into","","",97,[[]]],[11,"to_owned","","",97,[[]]],[11,"clone_into","","",97,[[]]],[11,"borrow","","",97,[[]]],[11,"borrow_mut","","",97,[[]]],[11,"try_from","","",97,[[],["result",4]]],[11,"try_into","","",97,[[],["result",4]]],[11,"type_id","","",97,[[],["typeid",3]]],[11,"vzip","","",97,[[]]],[11,"to_subset","","",97,[[],["option",4]]],[11,"is_in_subset","","",97,[[]]],[11,"to_subset_unchecked","","",97,[[]]],[11,"from_subset","","",97,[[]]],[11,"from","","",98,[[]]],[11,"into","","",98,[[]]],[11,"to_owned","","",98,[[]]],[11,"clone_into","","",98,[[]]],[11,"borrow","","",98,[[]]],[11,"borrow_mut","","",98,[[]]],[11,"try_from","","",98,[[],["result",4]]],[11,"try_into","","",98,[[],["result",4]]],[11,"type_id","","",98,[[],["typeid",3]]],[11,"vzip","","",98,[[]]],[11,"to_subset","","",98,[[],["option",4]]],[11,"is_in_subset","","",98,[[]]],[11,"to_subset_unchecked","","",98,[[]]],[11,"from_subset","","",98,[[]]],[11,"from","","",99,[[]]],[11,"into","","",99,[[]]],[11,"to_owned","","",99,[[]]],[11,"clone_into","","",99,[[]]],[11,"borrow","","",99,[[]]],[11,"borrow_mut","","",99,[[]]],[11,"try_from","","",99,[[],["result",4]]],[11,"try_into","","",99,[[],["result",4]]],[11,"type_id","","",99,[[],["typeid",3]]],[11,"vzip","","",99,[[]]],[11,"to_subset","","",99,[[],["option",4]]],[11,"is_in_subset","","",99,[[]]],[11,"to_subset_unchecked","","",99,[[]]],[11,"from_subset","","",99,[[]]],[11,"from","","",100,[[]]],[11,"into","","",100,[[]]],[11,"to_owned","","",100,[[]]],[11,"clone_into","","",100,[[]]],[11,"borrow","","",100,[[]]],[11,"borrow_mut","","",100,[[]]],[11,"try_from","","",100,[[],["result",4]]],[11,"try_into","","",100,[[],["result",4]]],[11,"type_id","","",100,[[],["typeid",3]]],[11,"vzip","","",100,[[]]],[11,"to_subset","","",100,[[],["option",4]]],[11,"is_in_subset","","",100,[[]]],[11,"to_subset_unchecked","","",100,[[]]],[11,"from_subset","","",100,[[]]],[11,"from","argmin::solver::linesearch::hagerzhang","",101,[[]]],[11,"into","","",101,[[]]],[11,"to_owned","","",101,[[]]],[11,"clone_into","","",101,[[]]],[11,"borrow","","",101,[[]]],[11,"borrow_mut","","",101,[[]]],[11,"try_from","","",101,[[],["result",4]]],[11,"try_into","","",101,[[],["result",4]]],[11,"type_id","","",101,[[],["typeid",3]]],[11,"vzip","","",101,[[]]],[11,"to_subset","","",101,[[],["option",4]]],[11,"is_in_subset","","",101,[[]]],[11,"to_subset_unchecked","","",101,[[]]],[11,"from_subset","","",101,[[]]],[11,"from","argmin::solver::linesearch::morethuente","",102,[[]]],[11,"into","","",102,[[]]],[11,"to_owned","","",102,[[]]],[11,"clone_into","","",102,[[]]],[11,"borrow","","",102,[[]]],[11,"borrow_mut","","",102,[[]]],[11,"try_from","","",102,[[],["result",4]]],[11,"try_into","","",102,[[],["result",4]]],[11,"type_id","","",102,[[],["typeid",3]]],[11,"vzip","","",102,[[]]],[11,"to_subset","","",102,[[],["option",4]]],[11,"is_in_subset","","",102,[[]]],[11,"to_subset_unchecked","","",102,[[]]],[11,"from_subset","","",102,[[]]],[11,"from","argmin::solver::neldermead","",103,[[]]],[11,"into","","",103,[[]]],[11,"to_owned","","",103,[[]]],[11,"clone_into","","",103,[[]]],[11,"borrow","","",103,[[]]],[11,"borrow_mut","","",103,[[]]],[11,"try_from","","",103,[[],["result",4]]],[11,"try_into","","",103,[[],["result",4]]],[11,"type_id","","",103,[[],["typeid",3]]],[11,"vzip","","",103,[[]]],[11,"to_subset","","",103,[[],["option",4]]],[11,"is_in_subset","","",103,[[]]],[11,"to_subset_unchecked","","",103,[[]]],[11,"from_subset","","",103,[[]]],[11,"from","argmin::solver::newton::newton_cg","",104,[[]]],[11,"into","","",104,[[]]],[11,"to_owned","","",104,[[]]],[11,"clone_into","","",104,[[]]],[11,"borrow","","",104,[[]]],[11,"borrow_mut","","",104,[[]]],[11,"try_from","","",104,[[],["result",4]]],[11,"try_into","","",104,[[],["result",4]]],[11,"type_id","","",104,[[],["typeid",3]]],[11,"vzip","","",104,[[]]],[11,"to_subset","","",104,[[],["option",4]]],[11,"is_in_subset","","",104,[[]]],[11,"to_subset_unchecked","","",104,[[]]],[11,"from_subset","","",104,[[]]],[11,"from","argmin::solver::newton::newton_method","",105,[[]]],[11,"into","","",105,[[]]],[11,"to_owned","","",105,[[]]],[11,"clone_into","","",105,[[]]],[11,"borrow","","",105,[[]]],[11,"borrow_mut","","",105,[[]]],[11,"try_from","","",105,[[],["result",4]]],[11,"try_into","","",105,[[],["result",4]]],[11,"type_id","","",105,[[],["typeid",3]]],[11,"vzip","","",105,[[]]],[11,"to_subset","","",105,[[],["option",4]]],[11,"is_in_subset","","",105,[[]]],[11,"to_subset_unchecked","","",105,[[]]],[11,"from_subset","","",105,[[]]],[11,"from","argmin::solver::particleswarm","",106,[[]]],[11,"into","","",106,[[]]],[11,"borrow","","",106,[[]]],[11,"borrow_mut","","",106,[[]]],[11,"try_from","","",106,[[],["result",4]]],[11,"try_into","","",106,[[],["result",4]]],[11,"type_id","","",106,[[],["typeid",3]]],[11,"vzip","","",106,[[]]],[11,"to_subset","","",106,[[],["option",4]]],[11,"is_in_subset","","",106,[[]]],[11,"to_subset_unchecked","","",106,[[]]],[11,"from_subset","","",106,[[]]],[11,"from","","",107,[[]]],[11,"into","","",107,[[]]],[11,"to_owned","","",107,[[]]],[11,"clone_into","","",107,[[]]],[11,"borrow","","",107,[[]]],[11,"borrow_mut","","",107,[[]]],[11,"try_from","","",107,[[],["result",4]]],[11,"try_into","","",107,[[],["result",4]]],[11,"type_id","","",107,[[],["typeid",3]]],[11,"vzip","","",107,[[]]],[11,"to_subset","","",107,[[],["option",4]]],[11,"is_in_subset","","",107,[[]]],[11,"to_subset_unchecked","","",107,[[]]],[11,"from_subset","","",107,[[]]],[11,"from","argmin::solver::quasinewton::bfgs","",108,[[]]],[11,"into","","",108,[[]]],[11,"to_owned","","",108,[[]]],[11,"clone_into","","",108,[[]]],[11,"borrow","","",108,[[]]],[11,"borrow_mut","","",108,[[]]],[11,"try_from","","",108,[[],["result",4]]],[11,"try_into","","",108,[[],["result",4]]],[11,"type_id","","",108,[[],["typeid",3]]],[11,"vzip","","",108,[[]]],[11,"to_subset","","",108,[[],["option",4]]],[11,"is_in_subset","","",108,[[]]],[11,"to_subset_unchecked","","",108,[[]]],[11,"from_subset","","",108,[[]]],[11,"from","argmin::solver::quasinewton::dfp","",109,[[]]],[11,"into","","",109,[[]]],[11,"to_owned","","",109,[[]]],[11,"clone_into","","",109,[[]]],[11,"borrow","","",109,[[]]],[11,"borrow_mut","","",109,[[]]],[11,"try_from","","",109,[[],["result",4]]],[11,"try_into","","",109,[[],["result",4]]],[11,"type_id","","",109,[[],["typeid",3]]],[11,"vzip","","",109,[[]]],[11,"to_subset","","",109,[[],["option",4]]],[11,"is_in_subset","","",109,[[]]],[11,"to_subset_unchecked","","",109,[[]]],[11,"from_subset","","",109,[[]]],[11,"from","argmin::solver::quasinewton::lbfgs","",110,[[]]],[11,"into","","",110,[[]]],[11,"to_owned","","",110,[[]]],[11,"clone_into","","",110,[[]]],[11,"borrow","","",110,[[]]],[11,"borrow_mut","","",110,[[]]],[11,"try_from","","",110,[[],["result",4]]],[11,"try_into","","",110,[[],["result",4]]],[11,"type_id","","",110,[[],["typeid",3]]],[11,"vzip","","",110,[[]]],[11,"to_subset","","",110,[[],["option",4]]],[11,"is_in_subset","","",110,[[]]],[11,"to_subset_unchecked","","",110,[[]]],[11,"from_subset","","",110,[[]]],[11,"from","argmin::solver::quasinewton::sr1","",111,[[]]],[11,"into","","",111,[[]]],[11,"to_owned","","",111,[[]]],[11,"clone_into","","",111,[[]]],[11,"borrow","","",111,[[]]],[11,"borrow_mut","","",111,[[]]],[11,"try_from","","",111,[[],["result",4]]],[11,"try_into","","",111,[[],["result",4]]],[11,"type_id","","",111,[[],["typeid",3]]],[11,"vzip","","",111,[[]]],[11,"to_subset","","",111,[[],["option",4]]],[11,"is_in_subset","","",111,[[]]],[11,"to_subset_unchecked","","",111,[[]]],[11,"from_subset","","",111,[[]]],[11,"from","argmin::solver::quasinewton::sr1_trustregion","",112,[[]]],[11,"into","","",112,[[]]],[11,"to_owned","","",112,[[]]],[11,"clone_into","","",112,[[]]],[11,"borrow","","",112,[[]]],[11,"borrow_mut","","",112,[[]]],[11,"try_from","","",112,[[],["result",4]]],[11,"try_into","","",112,[[],["result",4]]],[11,"type_id","","",112,[[],["typeid",3]]],[11,"vzip","","",112,[[]]],[11,"to_subset","","",112,[[],["option",4]]],[11,"is_in_subset","","",112,[[]]],[11,"to_subset_unchecked","","",112,[[]]],[11,"from_subset","","",112,[[]]],[11,"from","argmin::solver::simulatedannealing","",113,[[]]],[11,"into","","",113,[[]]],[11,"to_owned","","",113,[[]]],[11,"clone_into","","",113,[[]]],[11,"borrow","","",113,[[]]],[11,"borrow_mut","","",113,[[]]],[11,"try_from","","",113,[[],["result",4]]],[11,"try_into","","",113,[[],["result",4]]],[11,"type_id","","",113,[[],["typeid",3]]],[11,"vzip","","",113,[[]]],[11,"to_subset","","",113,[[],["option",4]]],[11,"is_in_subset","","",113,[[]]],[11,"to_subset_unchecked","","",113,[[]]],[11,"from_subset","","",113,[[]]],[11,"from","","",114,[[]]],[11,"into","","",114,[[]]],[11,"to_owned","","",114,[[]]],[11,"clone_into","","",114,[[]]],[11,"borrow","","",114,[[]]],[11,"borrow_mut","","",114,[[]]],[11,"try_from","","",114,[[],["result",4]]],[11,"try_into","","",114,[[],["result",4]]],[11,"type_id","","",114,[[],["typeid",3]]],[11,"vzip","","",114,[[]]],[11,"to_subset","","",114,[[],["option",4]]],[11,"is_in_subset","","",114,[[]]],[11,"to_subset_unchecked","","",114,[[]]],[11,"from_subset","","",114,[[]]],[11,"from","argmin::solver::trustregion::cauchypoint","",115,[[]]],[11,"into","","",115,[[]]],[11,"to_owned","","",115,[[]]],[11,"clone_into","","",115,[[]]],[11,"borrow","","",115,[[]]],[11,"borrow_mut","","",115,[[]]],[11,"try_from","","",115,[[],["result",4]]],[11,"try_into","","",115,[[],["result",4]]],[11,"type_id","","",115,[[],["typeid",3]]],[11,"vzip","","",115,[[]]],[11,"inlined_clone","","",115,[[]]],[11,"to_subset","","",115,[[],["option",4]]],[11,"is_in_subset","","",115,[[]]],[11,"to_subset_unchecked","","",115,[[]]],[11,"from_subset","","",115,[[]]],[11,"from","argmin::solver::trustregion::dogleg","",116,[[]]],[11,"into","","",116,[[]]],[11,"to_owned","","",116,[[]]],[11,"clone_into","","",116,[[]]],[11,"borrow","","",116,[[]]],[11,"borrow_mut","","",116,[[]]],[11,"try_from","","",116,[[],["result",4]]],[11,"try_into","","",116,[[],["result",4]]],[11,"type_id","","",116,[[],["typeid",3]]],[11,"vzip","","",116,[[]]],[11,"inlined_clone","","",116,[[]]],[11,"to_subset","","",116,[[],["option",4]]],[11,"is_in_subset","","",116,[[]]],[11,"to_subset_unchecked","","",116,[[]]],[11,"from_subset","","",116,[[]]],[11,"from","argmin::solver::trustregion::steihaug","",117,[[]]],[11,"into","","",117,[[]]],[11,"to_owned","","",117,[[]]],[11,"clone_into","","",117,[[]]],[11,"borrow","","",117,[[]]],[11,"borrow_mut","","",117,[[]]],[11,"try_from","","",117,[[],["result",4]]],[11,"try_into","","",117,[[],["result",4]]],[11,"type_id","","",117,[[],["typeid",3]]],[11,"vzip","","",117,[[]]],[11,"inlined_clone","","",117,[[]]],[11,"to_subset","","",117,[[],["option",4]]],[11,"is_in_subset","","",117,[[]]],[11,"to_subset_unchecked","","",117,[[]]],[11,"from_subset","","",117,[[]]],[11,"from","argmin::solver::trustregion::trustregion_method","",118,[[]]],[11,"into","","",118,[[]]],[11,"to_owned","","",118,[[]]],[11,"clone_into","","",118,[[]]],[11,"borrow","","",118,[[]]],[11,"borrow_mut","","",118,[[]]],[11,"try_from","","",118,[[],["result",4]]],[11,"try_into","","",118,[[],["result",4]]],[11,"type_id","","",118,[[],["typeid",3]]],[11,"vzip","","",118,[[]]],[11,"to_subset","","",118,[[],["option",4]]],[11,"is_in_subset","","",118,[[]]],[11,"to_subset_unchecked","","",118,[[]]],[11,"from_subset","","",118,[[]]],[11,"fmt","argmin::prelude","",81,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",80,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",81,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","argmin::core","",119,[[["formatter",3]],[["result",4],["error",3]]]],[11,"from","","",119,[[],["error",3]]],[11,"deref","","",119,[[]]],[11,"as_ref","","",119,[[],["error",8]]],[11,"as_ref","","",119,[[],["error",8]]],[11,"fmt","","",119,[[["formatter",3]],[["result",4],["error",3]]]],[11,"deref_mut","","",119,[[]]],[11,"drop","","",119,[[]]],[11,"observe_iter","argmin::core::file","",122,[[["iterstate",3],["argminkv",3]],[["error",3],["result",4]]]],[11,"observe_init","argmin::core::slog_logger","Log general info",123,[[["argminkv",3]],[["error",3],["result",4]]]],[11,"observe_iter","","This should be used to log iteration data only (because …",123,[[["iterstate",3],["argminkv",3]],[["error",3],["result",4]]]],[11,"observe_iter","argmin::core::visualizer","",124,[[["iterstate",3],["argminkv",3]],[["error",3],["result",4]]]],[11,"observe_init","argmin::core","Initial observation This is called after the …",126,[[["argminkv",3]],[["error",3],["result",4]]]],[11,"observe_iter","","This is called after every iteration and gets the current …",126,[[["iterstate",3],["argminkv",3]],[["error",3],["result",4]]]],[11,"apply","","Do nothing, really.",120,[[],[["error",3],["result",4]]]],[11,"gradient","","Do nothing, really.",120,[[],[["result",4],["error",3]]]],[11,"hessian","","Do nothing, really.",120,[[],[["error",3],["result",4]]]],[11,"modify","","Do nothing, really.",120,[[],[["result",4],["error",3]]]],[11,"apply","","Do nothing, really.",121,[[],[["error",3],["result",4]]]],[11,"gradient","","Do nothing, really.",121,[[],[["result",4],["error",3]]]],[11,"hessian","","Do nothing, really.",121,[[],[["error",3],["result",4]]]],[11,"modify","","Do nothing, really.",121,[[],[["result",4],["error",3]]]],[11,"apply","","",31,[[],[["error",3],["result",4]]]],[11,"gradient","","",31,[[],[["result",4],["error",3]]]],[11,"hessian","","",31,[[],[["error",3],["result",4]]]],[11,"jacobian","","",31,[[],[["error",3],["result",4]]]],[11,"modify","","",31,[[],[["result",4],["error",3]]]],[11,"init","argmin::solver::brent","",83,[[["opwrapper",3],["iterstate",3]],[["option",4],["error",3],["result",4]]]],[11,"next_iter","","",83,[[["opwrapper",3],["iterstate",3]],[["error",3],["result",4],["argminiterdata",3]]]],[11,"init","argmin::solver::conjugategradient::cg","",84,[[["opwrapper",3],["iterstate",3]],[["option",4],["error",3],["result",4]]]],[11,"next_iter","","Perform one iteration of CG algorithm",84,[[["opwrapper",3],["iterstate",3]],[["error",3],["result",4],["argminiterdata",3]]]],[11,"init","argmin::solver::conjugategradient::nonlinear_cg","",85,[[["opwrapper",3],["iterstate",3]],[["option",4],["error",3],["result",4]]]],[11,"next_iter","","",85,[[["opwrapper",3],["iterstate",3]],[["error",3],["result",4],["argminiterdata",3]]]],[11,"next_iter","argmin::solver::gaussnewton::gaussnewton_linesearch","",90,[[["opwrapper",3],["iterstate",3]],[["error",3],["result",4],["argminiterdata",3]]]],[11,"terminate","","",90,[[["iterstate",3]],["terminationreason",4]]],[11,"next_iter","argmin::solver::gaussnewton::gaussnewton_method","",91,[[["opwrapper",3],["iterstate",3]],[["error",3],["result",4],["argminiterdata",3]]]],[11,"terminate","","",91,[[["iterstate",3]],["terminationreason",4]]],[11,"init","argmin::solver::goldensectionsearch","",92,[[["opwrapper",3],["iterstate",3]],[["option",4],["error",3],["result",4]]]],[11,"next_iter","","",92,[[["opwrapper",3],["iterstate",3]],[["error",3],["result",4],["argminiterdata",3]]]],[11,"next_iter","argmin::solver::gradientdescent::steepestdescent","",93,[[["opwrapper",3],["iterstate",3]],[["error",3],["result",4],["argminiterdata",3]]]],[11,"next_iter","argmin::solver::landweber","",94,[[["opwrapper",3],["iterstate",3]],[["error",3],["result",4],["argminiterdata",3]]]],[11,"init","argmin::solver::linesearch::backtracking","",95,[[["opwrapper",3],["iterstate",3]],[["option",4],["error",3],["result",4]]]],[11,"next_iter","","",95,[[["opwrapper",3],["iterstate",3]],[["error",3],["result",4],["argminiterdata",3]]]],[11,"terminate","","",95,[[["iterstate",3]],["terminationreason",4]]],[11,"init","argmin::solver::linesearch::hagerzhang","",101,[[["opwrapper",3],["iterstate",3]],[["option",4],["error",3],["result",4]]]],[11,"next_iter","","",101,[[["opwrapper",3],["iterstate",3]],[["error",3],["result",4],["argminiterdata",3]]]],[11,"terminate","","",101,[[["iterstate",3]],["terminationreason",4]]],[11,"init","argmin::solver::linesearch::morethuente","",102,[[["opwrapper",3],["iterstate",3]],[["option",4],["error",3],["result",4]]]],[11,"next_iter","","",102,[[["opwrapper",3],["iterstate",3]],[["error",3],["result",4],["argminiterdata",3]]]],[11,"init","argmin::solver::neldermead","",103,[[["opwrapper",3],["iterstate",3]],[["option",4],["error",3],["result",4]]]],[11,"next_iter","","",103,[[["opwrapper",3],["iterstate",3]],[["error",3],["result",4],["argminiterdata",3]]]],[11,"terminate","","",103,[[["iterstate",3]],["terminationreason",4]]],[11,"next_iter","argmin::solver::newton::newton_cg","",104,[[["opwrapper",3],["iterstate",3]],[["error",3],["result",4],["argminiterdata",3]]]],[11,"terminate","","",104,[[["iterstate",3]],["terminationreason",4]]],[11,"next_iter","argmin::solver::newton::newton_method","",105,[[["opwrapper",3],["iterstate",3]],[["error",3],["result",4],["argminiterdata",3]]]],[11,"init","argmin::solver::particleswarm","",106,[[["opwrapper",3],["iterstate",3]],[["option",4],["error",3],["result",4]]]],[11,"next_iter","","Perform one iteration of algorithm",106,[[["opwrapper",3],["iterstate",3]],[["error",3],["result",4],["argminiterdata",3]]]],[11,"init","argmin::solver::quasinewton::bfgs","",108,[[["opwrapper",3],["iterstate",3]],[["option",4],["error",3],["result",4]]]],[11,"next_iter","","",108,[[["opwrapper",3],["iterstate",3]],[["error",3],["result",4],["argminiterdata",3]]]],[11,"terminate","","",108,[[["iterstate",3]],["terminationreason",4]]],[11,"init","argmin::solver::quasinewton::dfp","",109,[[["opwrapper",3],["iterstate",3]],[["option",4],["error",3],["result",4]]]],[11,"next_iter","","",109,[[["opwrapper",3],["iterstate",3]],[["error",3],["result",4],["argminiterdata",3]]]],[11,"terminate","","",109,[[["iterstate",3]],["terminationreason",4]]],[11,"init","argmin::solver::quasinewton::lbfgs","",110,[[["opwrapper",3],["iterstate",3]],[["option",4],["error",3],["result",4]]]],[11,"next_iter","","",110,[[["opwrapper",3],["iterstate",3]],[["error",3],["result",4],["argminiterdata",3]]]],[11,"terminate","","",110,[[["iterstate",3]],["terminationreason",4]]],[11,"init","argmin::solver::quasinewton::sr1","",111,[[["opwrapper",3],["iterstate",3]],[["option",4],["error",3],["result",4]]]],[11,"next_iter","","",111,[[["opwrapper",3],["iterstate",3]],[["error",3],["result",4],["argminiterdata",3]]]],[11,"terminate","","",111,[[["iterstate",3]],["terminationreason",4]]],[11,"init","argmin::solver::quasinewton::sr1_trustregion","",112,[[["opwrapper",3],["iterstate",3]],[["option",4],["error",3],["result",4]]]],[11,"next_iter","","",112,[[["opwrapper",3],["iterstate",3]],[["error",3],["result",4],["argminiterdata",3]]]],[11,"terminate","","",112,[[["iterstate",3]],["terminationreason",4]]],[11,"init","argmin::solver::simulatedannealing","",114,[[["opwrapper",3],["iterstate",3]],[["option",4],["error",3],["result",4]]]],[11,"next_iter","","Perform one iteration of SA algorithm",114,[[["opwrapper",3],["iterstate",3]],[["error",3],["result",4],["argminiterdata",3]]]],[11,"terminate","","",114,[[["iterstate",3]],["terminationreason",4]]],[11,"next_iter","argmin::solver::trustregion::cauchypoint","",115,[[["opwrapper",3],["iterstate",3]],[["error",3],["result",4],["argminiterdata",3]]]],[11,"terminate","","",115,[[["iterstate",3]],["terminationreason",4]]],[11,"next_iter","argmin::solver::trustregion::dogleg","",116,[[["opwrapper",3],["iterstate",3]],[["error",3],["result",4],["argminiterdata",3]]]],[11,"terminate","","",116,[[["iterstate",3]],["terminationreason",4]]],[11,"init","argmin::solver::trustregion::steihaug","",117,[[["opwrapper",3],["iterstate",3]],[["option",4],["error",3],["result",4]]]],[11,"next_iter","","",117,[[["opwrapper",3],["iterstate",3]],[["error",3],["result",4],["argminiterdata",3]]]],[11,"terminate","","",117,[[["iterstate",3]],["terminationreason",4]]],[11,"init","argmin::solver::trustregion::trustregion_method","",118,[[["opwrapper",3],["iterstate",3]],[["option",4],["error",3],["result",4]]]],[11,"next_iter","","",118,[[["opwrapper",3],["iterstate",3]],[["error",3],["result",4],["argminiterdata",3]]]],[11,"terminate","","",118,[[["iterstate",3]],["terminationreason",4]]],[11,"set_search_direction","argmin::solver::linesearch::backtracking","Set search direction",95,[[]]],[11,"set_init_alpha","","Set initial alpha value",95,[[],[["error",3],["result",4]]]],[11,"set_search_direction","argmin::solver::linesearch::hagerzhang","Set search direction",101,[[]]],[11,"set_init_alpha","","Set initial alpha value",101,[[],[["error",3],["result",4]]]],[11,"set_search_direction","argmin::solver::linesearch::morethuente","Set search direction",102,[[]]],[11,"set_init_alpha","","Set initial alpha value",102,[[],[["error",3],["result",4]]]],[11,"set_radius","argmin::solver::trustregion::cauchypoint","",115,[[]]],[11,"set_radius","argmin::solver::trustregion::dogleg","",116,[[]]],[11,"set_radius","argmin::solver::trustregion::steihaug","",117,[[]]],[11,"update","argmin::solver::conjugategradient::beta","",86,[[]]],[11,"update","","",87,[[]]],[11,"update","","",88,[[]]],[11,"update","","",89,[[]]],[11,"eval","argmin::solver::linesearch::condition","",97,[[]]],[11,"requires_cur_grad","","",97,[[]]],[11,"eval","","",98,[[]]],[11,"requires_cur_grad","","",98,[[]]],[11,"eval","","",99,[[]]],[11,"requires_cur_grad","","",99,[[]]],[11,"eval","","",100,[[]]],[11,"requires_cur_grad","","",100,[[]]],[11,"from","argmin::core::slog_logger","",2,[[["argminkv",3]],["argminslogkv",3]]],[11,"extend","argmin::core","",11,[[["intoiterator",8]]]],[11,"clone","argmin::core::executor","",0,[[],["executor",3]]],[11,"clone","argmin::core","",10,[[],["iterstate",3]]],[11,"clone","","",11,[[],["argminkv",3]]],[11,"clone","","",120,[[],["nooperator",3]]],[11,"clone","","",121,[[],["minimalnooperator",3]]],[11,"clone","argmin::core::file","",1,[[],["writetofileserializer",4]]],[11,"clone","","",122,[[],["writetofile",3]]],[11,"clone","argmin::core::slog_logger","",123,[[],["argminsloglogger",3]]],[11,"clone","argmin::core","",126,[[],["observer",3]]],[11,"clone","","",30,[[],["observermode",4]]],[11,"clone","","",31,[[],["opwrapper",3]]],[11,"clone","","",32,[[],["argminresult",3]]],[11,"clone","","",33,[[],["checkpointmode",4]]],[11,"clone","","",127,[[],["argmincheckpoint",3]]],[11,"clone","","",34,[[],["terminationreason",4]]],[11,"clone","","",37,[[],["argminiterdata",3]]],[11,"clone","argmin::solver::brent","",83,[[],["brent",3]]],[11,"clone","argmin::solver::conjugategradient::cg","",84,[[],["conjugategradient",3]]],[11,"clone","argmin::solver::conjugategradient::nonlinear_cg","",85,[[],["nonlinearconjugategradient",3]]],[11,"clone","argmin::solver::conjugategradient::beta","",86,[[],["fletcherreeves",3]]],[11,"clone","","",87,[[],["polakribiere",3]]],[11,"clone","","",88,[[],["polakribiereplus",3]]],[11,"clone","","",89,[[],["hestenesstiefel",3]]],[11,"clone","argmin::solver::gaussnewton::gaussnewton_linesearch","",90,[[],["gaussnewtonls",3]]],[11,"clone","argmin::solver::gaussnewton::gaussnewton_method","",91,[[],["gaussnewton",3]]],[11,"clone","argmin::solver::goldensectionsearch","",92,[[],["goldensectionsearch",3]]],[11,"clone","argmin::solver::gradientdescent::steepestdescent","",93,[[],["steepestdescent",3]]],[11,"clone","argmin::solver::landweber","",94,[[],["landweber",3]]],[11,"clone","argmin::solver::linesearch::backtracking","",95,[[],["backtrackinglinesearch",3]]],[11,"clone","argmin::solver::linesearch::condition","",97,[[],["armijocondition",3]]],[11,"clone","","",98,[[],["wolfecondition",3]]],[11,"clone","","",99,[[],["strongwolfecondition",3]]],[11,"clone","","",100,[[],["goldsteincondition",3]]],[11,"clone","argmin::solver::linesearch::hagerzhang","",101,[[],["hagerzhanglinesearch",3]]],[11,"clone","argmin::solver::linesearch::morethuente","",102,[[],["morethuentelinesearch",3]]],[11,"clone","argmin::solver::neldermead","",103,[[],["neldermead",3]]],[11,"clone","argmin::solver::newton::newton_cg","",104,[[],["newtoncg",3]]],[11,"clone","argmin::solver::newton::newton_method","",105,[[],["newton",3]]],[11,"clone","argmin::solver::particleswarm","",107,[[],["particle",3]]],[11,"clone","argmin::solver::quasinewton::bfgs","",108,[[],["bfgs",3]]],[11,"clone","argmin::solver::quasinewton::dfp","",109,[[],["dfp",3]]],[11,"clone","argmin::solver::quasinewton::lbfgs","",110,[[],["lbfgs",3]]],[11,"clone","argmin::solver::quasinewton::sr1","",111,[[],["sr1",3]]],[11,"clone","argmin::solver::quasinewton::sr1_trustregion","",112,[[],["sr1trustregion",3]]],[11,"clone","argmin::solver::simulatedannealing","",113,[[],["satempfunc",4]]],[11,"clone","","",114,[[],["simulatedannealing",3]]],[11,"clone","argmin::solver::trustregion::cauchypoint","",115,[[],["cauchypoint",3]]],[11,"clone","argmin::solver::trustregion::dogleg","",116,[[],["dogleg",3]]],[11,"clone","argmin::solver::trustregion::steihaug","",117,[[],["steihaug",3]]],[11,"clone","argmin::solver::trustregion::trustregion_method","",118,[[],["trustregion",3]]],[11,"default","argmin::core","",10,[[]]],[11,"default","","",11,[[],["argminkv",3]]],[11,"default","","",120,[[],["nooperator",3]]],[11,"default","","",121,[[],["minimalnooperator",3]]],[11,"default","argmin::core::file","",1,[[]]],[11,"default","argmin::core","",126,[[],["observer",3]]],[11,"default","","The default is <code>Always</code>",30,[[],["observermode",4]]],[11,"default","","",31,[[],["opwrapper",3]]],[11,"default","","",33,[[],["checkpointmode",4]]],[11,"default","","",127,[[],["argmincheckpoint",3]]],[11,"default","","",34,[[]]],[11,"default","","",37,[[],["argminiterdata",3]]],[11,"default","argmin::solver::conjugategradient::beta","",86,[[],["fletcherreeves",3]]],[11,"default","","",87,[[],["polakribiere",3]]],[11,"default","","",88,[[],["polakribiereplus",3]]],[11,"default","","",89,[[],["hestenesstiefel",3]]],[11,"default","argmin::solver::gaussnewton::gaussnewton_method","",91,[[],["gaussnewton",3]]],[11,"default","argmin::solver::linesearch::condition","",97,[[],["armijocondition",3]]],[11,"default","","",98,[[],["wolfecondition",3]]],[11,"default","","",99,[[],["strongwolfecondition",3]]],[11,"default","","",100,[[],["goldsteincondition",3]]],[11,"default","argmin::solver::linesearch::hagerzhang","",101,[[]]],[11,"default","argmin::solver::linesearch::morethuente","",102,[[]]],[11,"default","argmin::solver::neldermead","",103,[[],["neldermead",3]]],[11,"default","argmin::solver::newton::newton_method","",105,[[],["newton",3]]],[11,"default","argmin::solver::simulatedannealing","",113,[[]]],[11,"default","argmin::solver::trustregion::cauchypoint","",115,[[],["cauchypoint",3]]],[11,"default","argmin::solver::trustregion::dogleg","",116,[[],["dogleg",3]]],[11,"default","argmin::solver::trustregion::steihaug","",117,[[],["steihaug",3]]],[11,"cmp","argmin::core","",11,[[["argminkv",3]],["ordering",4]]],[11,"cmp","","",120,[[["nooperator",3]],["ordering",4]]],[11,"cmp","","",121,[[["minimalnooperator",3]],["ordering",4]]],[11,"cmp","argmin::core::file","",1,[[["writetofileserializer",4]],["ordering",4]]],[11,"cmp","","",122,[[["writetofile",3]],["ordering",4]]],[11,"cmp","argmin::core","",30,[[["observermode",4]],["ordering",4]]],[11,"cmp","","",32,[[["argminresult",3]],["ordering",4]]],[11,"cmp","","",33,[[["checkpointmode",4]],["ordering",4]]],[11,"cmp","","",127,[[["argmincheckpoint",3]],["ordering",4]]],[11,"cmp","","",34,[[["terminationreason",4]],["ordering",4]]],[11,"cmp","argmin::solver::conjugategradient::beta","",86,[[["fletcherreeves",3]],["ordering",4]]],[11,"cmp","","",87,[[["polakribiere",3]],["ordering",4]]],[11,"cmp","","",88,[[["polakribiereplus",3]],["ordering",4]]],[11,"cmp","","",89,[[["hestenesstiefel",3]],["ordering",4]]],[11,"eq","argmin::core","",11,[[["argminkv",3]]]],[11,"ne","","",11,[[["argminkv",3]]]],[11,"eq","","",120,[[["nooperator",3]]]],[11,"ne","","",120,[[["nooperator",3]]]],[11,"eq","","",121,[[["minimalnooperator",3]]]],[11,"eq","argmin::core::file","",1,[[["writetofileserializer",4]]]],[11,"eq","","",122,[[["writetofile",3]]]],[11,"ne","","",122,[[["writetofile",3]]]],[11,"eq","argmin::core","",30,[[["observermode",4]]]],[11,"ne","","",30,[[["observermode",4]]]],[11,"eq","","",32,[[["argminresult",3]]]],[11,"eq","","",33,[[["checkpointmode",4]]]],[11,"ne","","",33,[[["checkpointmode",4]]]],[11,"eq","","",127,[[["argmincheckpoint",3]]]],[11,"ne","","",127,[[["argmincheckpoint",3]]]],[11,"eq","","",34,[[["terminationreason",4]]]],[11,"eq","argmin::solver::conjugategradient::beta","",86,[[["fletcherreeves",3]]]],[11,"eq","","",87,[[["polakribiere",3]]]],[11,"eq","","",88,[[["polakribiereplus",3]]]],[11,"eq","","",89,[[["hestenesstiefel",3]]]],[11,"eq","argmin::solver::trustregion::cauchypoint","",115,[[["cauchypoint",3]]]],[11,"ne","","",115,[[["cauchypoint",3]]]],[11,"eq","argmin::solver::trustregion::dogleg","",116,[[["dogleg",3]]]],[11,"ne","","",116,[[["dogleg",3]]]],[11,"eq","argmin::solver::trustregion::steihaug","",117,[[["steihaug",3]]]],[11,"ne","","",117,[[["steihaug",3]]]],[11,"partial_cmp","argmin::core","",11,[[["argminkv",3]],[["option",4],["ordering",4]]]],[11,"lt","","",11,[[["argminkv",3]]]],[11,"le","","",11,[[["argminkv",3]]]],[11,"gt","","",11,[[["argminkv",3]]]],[11,"ge","","",11,[[["argminkv",3]]]],[11,"partial_cmp","","",120,[[["nooperator",3]],[["option",4],["ordering",4]]]],[11,"lt","","",120,[[["nooperator",3]]]],[11,"le","","",120,[[["nooperator",3]]]],[11,"gt","","",120,[[["nooperator",3]]]],[11,"ge","","",120,[[["nooperator",3]]]],[11,"partial_cmp","","",121,[[["minimalnooperator",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","argmin::core::file","",1,[[["writetofileserializer",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",122,[[["writetofile",3]],[["option",4],["ordering",4]]]],[11,"lt","","",122,[[["writetofile",3]]]],[11,"le","","",122,[[["writetofile",3]]]],[11,"gt","","",122,[[["writetofile",3]]]],[11,"ge","","",122,[[["writetofile",3]]]],[11,"partial_cmp","argmin::core","",30,[[["observermode",4]],[["option",4],["ordering",4]]]],[11,"lt","","",30,[[["observermode",4]]]],[11,"le","","",30,[[["observermode",4]]]],[11,"gt","","",30,[[["observermode",4]]]],[11,"ge","","",30,[[["observermode",4]]]],[11,"partial_cmp","","",32,[[["argminresult",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",33,[[["checkpointmode",4]],[["option",4],["ordering",4]]]],[11,"lt","","",33,[[["checkpointmode",4]]]],[11,"le","","",33,[[["checkpointmode",4]]]],[11,"gt","","",33,[[["checkpointmode",4]]]],[11,"ge","","",33,[[["checkpointmode",4]]]],[11,"partial_cmp","","",127,[[["argmincheckpoint",3]],[["option",4],["ordering",4]]]],[11,"lt","","",127,[[["argmincheckpoint",3]]]],[11,"le","","",127,[[["argmincheckpoint",3]]]],[11,"gt","","",127,[[["argmincheckpoint",3]]]],[11,"ge","","",127,[[["argmincheckpoint",3]]]],[11,"partial_cmp","","",34,[[["terminationreason",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","argmin::solver::conjugategradient::beta","",86,[[["fletcherreeves",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",87,[[["polakribiere",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",88,[[["polakribiereplus",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",89,[[["hestenesstiefel",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","argmin::solver::trustregion::cauchypoint","",115,[[["cauchypoint",3]],[["option",4],["ordering",4]]]],[11,"lt","","",115,[[["cauchypoint",3]]]],[11,"le","","",115,[[["cauchypoint",3]]]],[11,"gt","","",115,[[["cauchypoint",3]]]],[11,"ge","","",115,[[["cauchypoint",3]]]],[11,"partial_cmp","argmin::solver::trustregion::dogleg","",116,[[["dogleg",3]],[["option",4],["ordering",4]]]],[11,"lt","","",116,[[["dogleg",3]]]],[11,"le","","",116,[[["dogleg",3]]]],[11,"gt","","",116,[[["dogleg",3]]]],[11,"ge","","",116,[[["dogleg",3]]]],[11,"partial_cmp","argmin::solver::trustregion::steihaug","",117,[[["steihaug",3]],[["option",4],["ordering",4]]]],[11,"lt","","",117,[[["steihaug",3]]]],[11,"le","","",117,[[["steihaug",3]]]],[11,"gt","","",117,[[["steihaug",3]]]],[11,"ge","","",117,[[["steihaug",3]]]],[11,"fmt","argmin::core","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",120,[[["formatter",3]],["result",6]]],[11,"fmt","","",121,[[["formatter",3]],["result",6]]],[11,"fmt","argmin::core::file","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",122,[[["formatter",3]],["result",6]]],[11,"fmt","argmin::core","",30,[[["formatter",3]],["result",6]]],[11,"fmt","","",31,[[["formatter",3]],["result",6]]],[11,"fmt","","",33,[[["formatter",3]],["result",6]]],[11,"fmt","","",127,[[["formatter",3]],["result",6]]],[11,"fmt","","",34,[[["formatter",3]],["result",6]]],[11,"fmt","","",37,[[["formatter",3]],["result",6]]],[11,"fmt","argmin::solver::brent","",82,[[["formatter",3]],["result",6]]],[11,"fmt","argmin::solver::conjugategradient::beta","",86,[[["formatter",3]],["result",6]]],[11,"fmt","","",87,[[["formatter",3]],["result",6]]],[11,"fmt","","",88,[[["formatter",3]],["result",6]]],[11,"fmt","","",89,[[["formatter",3]],["result",6]]],[11,"fmt","argmin::solver::linesearch::condition","",97,[[["formatter",3]],["result",6]]],[11,"fmt","","",98,[[["formatter",3]],["result",6]]],[11,"fmt","","",99,[[["formatter",3]],["result",6]]],[11,"fmt","","",100,[[["formatter",3]],["result",6]]],[11,"fmt","argmin::solver::particleswarm","",107,[[["formatter",3]],["result",6]]],[11,"fmt","argmin::solver::simulatedannealing","",113,[[["formatter",3]],["result",6]]],[11,"fmt","argmin::solver::trustregion::cauchypoint","",115,[[["formatter",3]],["result",6]]],[11,"fmt","argmin::solver::trustregion::dogleg","",116,[[["formatter",3]],["result",6]]],[11,"fmt","argmin::solver::trustregion::steihaug","",117,[[["formatter",3]],["result",6]]],[11,"fmt","argmin::core","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",120,[[["formatter",3]],["result",6]]],[11,"fmt","","",121,[[["formatter",3]],["result",6]]],[11,"fmt","","",32,[[["formatter",3]],["result",6]]],[11,"fmt","","",33,[[["formatter",3]],["result",6]]],[11,"fmt","","",34,[[["formatter",3]],["result",6]]],[11,"fmt","argmin::solver::brent","",82,[[["formatter",3]],["result",6]]],[11,"hash","argmin::core","",11,[[]]],[11,"hash","","",120,[[]]],[11,"hash","","",121,[[]]],[11,"hash","","",33,[[]]],[11,"hash","","",127,[[]]],[11,"hash","","",34,[[]]],[11,"hash","argmin::solver::conjugategradient::beta","",86,[[]]],[11,"hash","","",87,[[]]],[11,"hash","","",88,[[]]],[11,"hash","","",89,[[]]],[11,"from_iter","argmin::core","",11,[[["intoiterator",8]]]],[11,"serialize","argmin::core::executor","",0,[[],["result",4]]],[11,"serialize","argmin::core","",10,[[],["result",4]]],[11,"serialize","","",11,[[],["result",4]]],[11,"serialize","","",120,[[],["result",4]]],[11,"serialize","","",121,[[],["result",4]]],[11,"serialize","argmin::core::file","",1,[[],["result",4]]],[11,"serialize","","",122,[[],["result",4]]],[11,"serialize","argmin::core","",30,[[],["result",4]]],[11,"serialize","","",31,[[],["result",4]]],[11,"serialize","","",33,[[],["result",4]]],[11,"serialize","","",127,[[],["result",4]]],[11,"serialize","","",34,[[],["result",4]]],[11,"serialize","argmin::solver::brent","",83,[[],["result",4]]],[11,"serialize","argmin::solver::conjugategradient::cg","",84,[[],["result",4]]],[11,"serialize","argmin::solver::conjugategradient::nonlinear_cg","",85,[[],["result",4]]],[11,"serialize","argmin::solver::conjugategradient::beta","",86,[[],["result",4]]],[11,"serialize","","",87,[[],["result",4]]],[11,"serialize","","",88,[[],["result",4]]],[11,"serialize","","",89,[[],["result",4]]],[11,"serialize","argmin::solver::gaussnewton::gaussnewton_linesearch","",90,[[],["result",4]]],[11,"serialize","argmin::solver::gaussnewton::gaussnewton_method","",91,[[],["result",4]]],[11,"serialize","argmin::solver::goldensectionsearch","",92,[[],["result",4]]],[11,"serialize","argmin::solver::gradientdescent::steepestdescent","",93,[[],["result",4]]],[11,"serialize","argmin::solver::landweber","",94,[[],["result",4]]],[11,"serialize","argmin::solver::linesearch::backtracking","",95,[[],["result",4]]],[11,"serialize","argmin::solver::linesearch::condition","",97,[[],["result",4]]],[11,"serialize","","",98,[[],["result",4]]],[11,"serialize","","",99,[[],["result",4]]],[11,"serialize","","",100,[[],["result",4]]],[11,"serialize","argmin::solver::linesearch::hagerzhang","",101,[[],["result",4]]],[11,"serialize","argmin::solver::linesearch::morethuente","",102,[[],["result",4]]],[11,"serialize","argmin::solver::neldermead","",103,[[],["result",4]]],[11,"serialize","argmin::solver::newton::newton_cg","",104,[[],["result",4]]],[11,"serialize","argmin::solver::newton::newton_method","",105,[[],["result",4]]],[11,"serialize","argmin::solver::particleswarm","",106,[[],["result",4]]],[11,"serialize","","",107,[[],["result",4]]],[11,"serialize","argmin::solver::quasinewton::bfgs","",108,[[],["result",4]]],[11,"serialize","argmin::solver::quasinewton::dfp","",109,[[],["result",4]]],[11,"serialize","argmin::solver::quasinewton::lbfgs","",110,[[],["result",4]]],[11,"serialize","argmin::solver::quasinewton::sr1","",111,[[],["result",4]]],[11,"serialize","argmin::solver::quasinewton::sr1_trustregion","",112,[[],["result",4]]],[11,"serialize","argmin::solver::simulatedannealing","",113,[[],["result",4]]],[11,"serialize","","",114,[[],["result",4]]],[11,"serialize","argmin::solver::trustregion::cauchypoint","",115,[[],["result",4]]],[11,"serialize","argmin::solver::trustregion::dogleg","",116,[[],["result",4]]],[11,"serialize","argmin::solver::trustregion::steihaug","",117,[[],["result",4]]],[11,"serialize","argmin::solver::trustregion::trustregion_method","",118,[[],["result",4]]],[11,"deserialize","argmin::core::executor","",0,[[],["result",4]]],[11,"deserialize","argmin::core","",10,[[],["result",4]]],[11,"deserialize","","",11,[[],["result",4]]],[11,"deserialize","","",120,[[],["result",4]]],[11,"deserialize","","",121,[[],["result",4]]],[11,"deserialize","argmin::core::file","",1,[[],["result",4]]],[11,"deserialize","","",122,[[],["result",4]]],[11,"deserialize","argmin::core","",30,[[],["result",4]]],[11,"deserialize","","",31,[[],["result",4]]],[11,"deserialize","","",33,[[],["result",4]]],[11,"deserialize","","",127,[[],["result",4]]],[11,"deserialize","","",34,[[],["result",4]]],[11,"deserialize","argmin::solver::brent","",83,[[],["result",4]]],[11,"deserialize","argmin::solver::conjugategradient::cg","",84,[[],["result",4]]],[11,"deserialize","argmin::solver::conjugategradient::nonlinear_cg","",85,[[],["result",4]]],[11,"deserialize","argmin::solver::conjugategradient::beta","",86,[[],["result",4]]],[11,"deserialize","","",87,[[],["result",4]]],[11,"deserialize","","",88,[[],["result",4]]],[11,"deserialize","","",89,[[],["result",4]]],[11,"deserialize","argmin::solver::gaussnewton::gaussnewton_linesearch","",90,[[],["result",4]]],[11,"deserialize","argmin::solver::gaussnewton::gaussnewton_method","",91,[[],["result",4]]],[11,"deserialize","argmin::solver::goldensectionsearch","",92,[[],["result",4]]],[11,"deserialize","argmin::solver::gradientdescent::steepestdescent","",93,[[],["result",4]]],[11,"deserialize","argmin::solver::landweber","",94,[[],["result",4]]],[11,"deserialize","argmin::solver::linesearch::backtracking","",95,[[],["result",4]]],[11,"deserialize","argmin::solver::linesearch::condition","",97,[[],["result",4]]],[11,"deserialize","","",98,[[],["result",4]]],[11,"deserialize","","",99,[[],["result",4]]],[11,"deserialize","","",100,[[],["result",4]]],[11,"deserialize","argmin::solver::linesearch::hagerzhang","",101,[[],["result",4]]],[11,"deserialize","argmin::solver::linesearch::morethuente","",102,[[],["result",4]]],[11,"deserialize","argmin::solver::neldermead","",103,[[],["result",4]]],[11,"deserialize","argmin::solver::newton::newton_cg","",104,[[],["result",4]]],[11,"deserialize","argmin::solver::newton::newton_method","",105,[[],["result",4]]],[11,"deserialize","argmin::solver::particleswarm","",106,[[],["result",4]]],[11,"deserialize","","",107,[[],["result",4]]],[11,"deserialize","argmin::solver::quasinewton::bfgs","",108,[[],["result",4]]],[11,"deserialize","argmin::solver::quasinewton::dfp","",109,[[],["result",4]]],[11,"deserialize","argmin::solver::quasinewton::lbfgs","",110,[[],["result",4]]],[11,"deserialize","argmin::solver::quasinewton::sr1","",111,[[],["result",4]]],[11,"deserialize","argmin::solver::quasinewton::sr1_trustregion","",112,[[],["result",4]]],[11,"deserialize","argmin::solver::simulatedannealing","",113,[[],["result",4]]],[11,"deserialize","","",114,[[],["result",4]]],[11,"deserialize","argmin::solver::trustregion::cauchypoint","",115,[[],["result",4]]],[11,"deserialize","argmin::solver::trustregion::dogleg","",116,[[],["result",4]]],[11,"deserialize","argmin::solver::trustregion::steihaug","",117,[[],["result",4]]],[11,"deserialize","argmin::solver::trustregion::trustregion_method","",118,[[],["result",4]]],[11,"serialize","argmin::core::slog_logger","",2,[[["serializer",8],["record",3]],["result",6]]],[11,"serialize","argmin::core","",10,[[["serializer",8],["record",3]],["result",6]]],[11,"new","","Create a new error object from any error type.",119,[[],["error",3]]],[11,"msg","","Create a new error object from a printable error message.",119,[[],["error",3]]],[11,"context","","Wrap the error value with additional context.",119,[[],["error",3]]],[11,"chain","","An iterator of the chain of source errors contained by …",119,[[],["chain",3]]],[11,"root_cause","","The lowest level cause of this error — this error\'s …",119,[[],["error",8]]],[11,"is","","Returns true if <code>E</code> is the type held by this error object.",119,[[]]],[11,"downcast","","Attempt to downcast the error object to a concrete type.",119,[[],[["error",3],["result",4]]]],[11,"downcast_ref","","Downcast this error object by reference.",119,[[],["option",4]]],[11,"downcast_mut","","Downcast this error object by mutable reference.",119,[[],["option",4]]],[11,"new","","Create new IterState from <code>param</code>",10,[[]]],[11,"param","","Set parameter vector. This shifts the stored parameter …",10,[[]]],[11,"best_param","","Set best paramater vector. This shifts the stored best …",10,[[]]],[11,"cost","","Set the current cost function value. This shifts the …",10,[[]]],[11,"best_cost","","Set the current best cost function value. This shifts the …",10,[[]]],[11,"grad","","Set gradient. This shifts the stored gradient to the …",10,[[]]],[11,"hessian","","Set Hessian. This shifts the stored Hessian to the …",10,[[]]],[11,"jacobian","","Set Jacobian. This shifts the stored Jacobian to the …",10,[[]]],[11,"population","","Set population",10,[[["vec",3]]]],[11,"target_cost","","Set target cost value",10,[[]]],[11,"max_iters","","Set maximum number of iterations",10,[[]]],[11,"last_best_iter","","Set iteration number where the previous best parameter …",10,[[]]],[11,"termination_reason","","Set termination_reason",10,[[["terminationreason",4]]]],[11,"time","","Set time required so far",10,[[["duration",3]]]],[11,"get_param","","Returns current parameter vector",10,[[]]],[11,"get_prev_param","","Returns previous parameter vector",10,[[]]],[11,"get_best_param","","Returns best parameter vector",10,[[]]],[11,"get_prev_best_param","","Returns previous best parameter vector",10,[[]]],[11,"get_cost","","Returns current cost function value",10,[[]]],[11,"get_prev_cost","","Returns previous cost function value",10,[[]]],[11,"get_best_cost","","Returns current best cost function value",10,[[]]],[11,"get_prev_best_cost","","Returns previous best cost function value",10,[[]]],[11,"get_target_cost","","Returns target cost",10,[[]]],[11,"get_cost_func_count","","Returns current cost function evaluation count",10,[[]]],[11,"get_grad_func_count","","Returns current gradient function evaluation count",10,[[]]],[11,"get_hessian_func_count","","Returns current Hessian function evaluation count",10,[[]]],[11,"get_jacobian_func_count","","Returns current Jacobian function evaluation count",10,[[]]],[11,"get_modify_func_count","","Returns current Modify function evaluation count",10,[[]]],[11,"get_last_best_iter","","Returns iteration number where the last best parameter …",10,[[]]],[11,"get_termination_reason","","Get termination_reason",10,[[],["terminationreason",4]]],[11,"get_time","","Get time required so far",10,[[],["duration",3]]],[11,"get_grad","","Returns gradient",10,[[],["option",4]]],[11,"get_prev_grad","","Returns previous gradient",10,[[],["option",4]]],[11,"get_hessian","","Returns current Hessian",10,[[],["option",4]]],[11,"get_prev_hessian","","Returns previous Hessian",10,[[],["option",4]]],[11,"get_jacobian","","Returns current Jacobian",10,[[],["option",4]]],[11,"get_prev_jacobian","","Returns previous Jacobian",10,[[],["option",4]]],[11,"get_iter","","Returns current number of iterations",10,[[]]],[11,"get_max_iters","","Returns maximum number of iterations",10,[[]]],[11,"get_population","","Returns population",10,[[],[["option",4],["vec",3]]]],[11,"increment_iter","","Increment the number of iterations by one",10,[[]]],[11,"increment_func_counts","","Increment all function evaluation counts by the …",10,[[["opwrapper",3]]]],[11,"set_func_counts","","Set all function evaluation counts to the evaluation …",10,[[["opwrapper",3]]]],[11,"increment_cost_func_count","","Increment cost function evaluation count by <code>num</code>",10,[[]]],[11,"increment_grad_func_count","","Increment gradient function evaluation count by <code>num</code>",10,[[]]],[11,"increment_hessian_func_count","","Increment Hessian function evaluation count by <code>num</code>",10,[[]]],[11,"increment_jacobian_func_count","","Increment Jacobian function evaluation count by <code>num</code>",10,[[]]],[11,"increment_modify_func_count","","Increment modify function evaluation count by <code>num</code>",10,[[]]],[11,"new_best","","Indicate that a new best parameter vector was found",10,[[]]],[11,"is_best","","Returns whether the current parameter vector is also the …",10,[[]]],[11,"terminated","","Return whether the algorithm has terminated or not",10,[[]]],[11,"new","","Constructor",11,[[]]],[11,"push","","Push a key-value pair to the <code>kv</code> vector.",11,[[["display",8]]]],[11,"merge","","Merge another <code>kv</code> into <code>self.kv</code>",11,[[["argminkv",3]]]],[11,"new","","Constructor",120,[[]]],[11,"new","","Constructor",121,[[]]],[11,"new","argmin::core::file","Create a new <code>WriteToFile</code> struct",122,[[]]],[11,"serializer","","Set serializer",122,[[["writetofileserializer",4]]]],[11,"term","argmin::core::slog_logger","Log to the terminal in a blocking way",123,[[]]],[11,"term_noblock","","Log to the terminal in a non-blocking way (in case of …",123,[[]]],[11,"file","","Log JSON to a file in a blocking way",123,[[],[["error",3],["result",4]]]],[11,"file_noblock","","Log JSON to a file in a non-blocking way (in case of …",123,[[],[["error",3],["result",4]]]],[11,"new","argmin::core::visualizer","Create a new visualizer",124,[[]]],[11,"delay","","Set delay",124,[[["duration",3]]]],[11,"surface","","Set surface",124,[[["surface",3]]]],[11,"new","","Create a new surface",125,[[]]],[11,"observe_init","argmin::core","Called once at the beginning of the execution of the …",29,[[["argminkv",3]],[["error",3],["result",4]]]],[11,"observe_iter","","Called at every iteration of the solver",29,[[["iterstate",3],["argminkv",3]],[["error",3],["result",4]]]],[11,"new","","Constructor",126,[[]]],[11,"push","","Push another <code>Observe</code> to the <code>observer</code> field",126,[[["observermode",4],["observe",8]]]],[11,"new","","Constructor",31,[[]]],[11,"new_from_wrapper","","Construct struct from other <code>OpWrapper</code>. Takes the operator …",31,[[["opwrapper",3]]]],[11,"apply","","Calls the <code>apply</code> method of <code>op</code> and increments …",31,[[],[["error",3],["result",4]]]],[11,"gradient","","Calls the <code>gradient</code> method of <code>op</code> and increments …",31,[[],[["error",3],["result",4]]]],[11,"hessian","","Calls the <code>hessian</code> method of <code>op</code> and increments …",31,[[],[["error",3],["result",4]]]],[11,"jacobian","","Calls the <code>jacobian</code> method of <code>op</code> and increments …",31,[[],[["error",3],["result",4]]]],[11,"modify","","Calls the <code>modify</code> method of <code>op</code> and increments …",31,[[],[["error",3],["result",4]]]],[11,"take_op","","Moves the operator out of the struct and replaces it with …",31,[[],["option",4]]],[11,"consume_op","","Consumes an operator by increasing the function call …",31,[[["opwrapper",3]]]],[11,"consume_func_counts","","Adds function evaluation counts of another operator.",31,[[["opwrapper",3],["argminop",8]]]],[11,"reset","","Reset the cost function counts to zero.",31,[[]]],[11,"get_op","","Returns the operator <code>op</code> by taking ownership of <code>self</code>.",31,[[]]],[11,"new","","Constructor",32,[[["iterstate",3]]]],[11,"operator","","Return handle to operator",32,[[]]],[11,"state","","Return handle to state",32,[[],["iterstate",3]]],[11,"new","","Define a new checkpoint",127,[[["checkpointmode",4]],[["error",3],["result",4]]]],[11,"set_dir","","Set directory of checkpoint",127,[[]]],[11,"dir","","Get directory of checkpoint",127,[[],["string",3]]],[11,"set_name","","Set name of checkpoint",127,[[]]],[11,"name","","Get name of checkpoint",127,[[],["string",3]]],[11,"set_mode","","Set mode of checkpoint",127,[[["checkpointmode",4]]]],[11,"store","","Write checkpoint to disk",127,[[["string",3]],[["error",3],["result",4]]]],[11,"store_cond","","Write checkpoint based on the desired <code>CheckpointMode</code>",127,[[],[["error",3],["result",4]]]],[11,"terminated","","Returns <code>true</code> if a solver terminated and <code>false</code> otherwise",34,[[]]],[11,"text","","Returns a texual representation of what happened",34,[[]]]],"p":[[3,"Executor"],[4,"WriteToFileSerializer"],[3,"ArgminSlogKV"],[4,"ArgminError"],[13,"InvalidParameter"],[13,"NotImplemented"],[13,"NotInitialized"],[13,"ConditionViolated"],[13,"CheckpointNotFound"],[13,"ImpossibleError"],[3,"IterState"],[3,"ArgminKV"],[8,"ArgminDot"],[8,"ArgminWeightedDot"],[8,"ArgminZero"],[8,"ArgminConj"],[8,"ArgminZeroLike"],[8,"ArgminEye"],[8,"ArgminAdd"],[8,"ArgminSub"],[8,"ArgminMul"],[8,"ArgminDiv"],[8,"ArgminScaledAdd"],[8,"ArgminScaledSub"],[8,"ArgminNorm"],[8,"ArgminTranspose"],[8,"ArgminInv"],[8,"ArgminRandom"],[8,"ArgminMinMax"],[8,"Observe"],[4,"ObserverMode"],[3,"OpWrapper"],[3,"ArgminResult"],[4,"CheckpointMode"],[4,"TerminationReason"],[8,"ArgminOp"],[8,"Solver"],[3,"ArgminIterData"],[8,"ArgminLineSearch"],[8,"ArgminTrustRegion"],[8,"ArgminNLCGBetaUpdate"],[8,"Bounded"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"AsPrimitive"],[8,"FloatCore"],[8,"Float"],[8,"FloatConst"],[8,"Zero"],[8,"One"],[8,"PrimInt"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"CheckedRem"],[8,"CheckedNeg"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"Inv"],[8,"MulAdd"],[8,"MulAddAssign"],[8,"OverflowingAdd"],[8,"OverflowingSub"],[8,"OverflowingMul"],[8,"Saturating"],[8,"SaturatingAdd"],[8,"SaturatingSub"],[8,"SaturatingMul"],[8,"WrappingAdd"],[8,"WrappingSub"],[8,"WrappingMul"],[8,"WrappingNeg"],[8,"WrappingShl"],[8,"WrappingShr"],[8,"Pow"],[8,"Real"],[8,"Signed"],[8,"Num"],[4,"FloatErrorKind"],[3,"ParseFloatError"],[4,"BrentError"],[3,"Brent"],[3,"ConjugateGradient"],[3,"NonlinearConjugateGradient"],[3,"FletcherReeves"],[3,"PolakRibiere"],[3,"PolakRibierePlus"],[3,"HestenesStiefel"],[3,"GaussNewtonLS"],[3,"GaussNewton"],[3,"GoldenSectionSearch"],[3,"SteepestDescent"],[3,"Landweber"],[3,"BacktrackingLineSearch"],[8,"LineSearchCondition"],[3,"ArmijoCondition"],[3,"WolfeCondition"],[3,"StrongWolfeCondition"],[3,"GoldsteinCondition"],[3,"HagerZhangLineSearch"],[3,"MoreThuenteLineSearch"],[3,"NelderMead"],[3,"NewtonCG"],[3,"Newton"],[3,"ParticleSwarm"],[3,"Particle"],[3,"BFGS"],[3,"DFP"],[3,"LBFGS"],[3,"SR1"],[3,"SR1TrustRegion"],[4,"SATempFunc"],[3,"SimulatedAnnealing"],[3,"CauchyPoint"],[3,"Dogleg"],[3,"Steihaug"],[3,"TrustRegion"],[3,"Error"],[3,"NoOperator"],[3,"MinimalNoOperator"],[3,"WriteToFile"],[3,"ArgminSlogLogger"],[3,"Visualizer3d"],[3,"Surface"],[3,"Observer"],[3,"ArgminCheckpoint"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);